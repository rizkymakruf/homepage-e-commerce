{"version":3,"sources":["webpack://arangojs/webpack/universalModuleDefinition","webpack://arangojs/webpack/bootstrap","webpack://arangojs/./src/indexes.ts","webpack://arangojs/./src/collection.ts","webpack://arangojs/./src/lib/error.ts","webpack://arangojs/./src/error.ts","webpack://arangojs/./src/documents.ts","webpack://arangojs/./src/lib/codes.ts","webpack://arangojs/./src/aql.ts","webpack://arangojs/./src/cursor.ts","webpack://arangojs/../src/index.ts","webpack://arangojs/./src/view.ts","webpack://arangojs/./src/graph.ts","webpack://arangojs/./node_modules/querystring-es3/index.js","webpack://arangojs/./node_modules/url/url.js","webpack://arangojs/../src/LinkedListItem.ts","webpack://arangojs/(webpack)/buildin/global.js","webpack://arangojs/./node_modules/path-browserify/index.js","webpack://arangojs/./node_modules/regenerator-runtime/runtime.js","webpack://arangojs/./src/web.js","webpack://arangojs/../src/LinkedList.ts","webpack://arangojs/./node_modules/es6-error/es6/index.js","webpack://arangojs/./node_modules/querystring-es3/decode.js","webpack://arangojs/./node_modules/querystring-es3/encode.js","webpack://arangojs/./node_modules/node-libs-browser/node_modules/punycode/punycode.js","webpack://arangojs/(webpack)/buildin/module.js","webpack://arangojs/./node_modules/url/util.js","webpack://arangojs/./node_modules/process/browser.js","webpack://arangojs/./node_modules/xhr/index.js","webpack://arangojs/./node_modules/global/window.js","webpack://arangojs/./node_modules/is-function/index.js","webpack://arangojs/./node_modules/parse-headers/parse-headers.js","webpack://arangojs/./node_modules/xtend/immutable.js","webpack://arangojs/./src/analyzer.ts","webpack://arangojs/./src/lib/btoa.web.ts","webpack://arangojs/./src/lib/xhr.ts","webpack://arangojs/./src/lib/request.web.ts","webpack://arangojs/./src/lib/omit.ts","webpack://arangojs/./src/connection.ts","webpack://arangojs/./src/lib/normalizeUrl.ts","webpack://arangojs/./src/lib/multipart.web.ts","webpack://arangojs/./src/route.ts","webpack://arangojs/./src/transaction.ts","webpack://arangojs/./src/database.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_indexHandle","selector","collectionName","id","Error","includes","split","head","tail","normalizedHead","normalize","join","CollectionType","CollectionStatus","isArangoCollection","collection","Boolean","collectionToString","String","Collection","db","this","_name","_db","path","qs","request","encodeURIComponent","res","body","method","isArangoError","errorNum","COLLECTION_NOT_FOUND","options","waitForSyncReplication","undefined","enforceReplicationFactor","opts","properties","_put","_get","result","details","count","newName","renameCollection","document","shardId","_documentHandle","encodeURI","code","selectors","allowDirtyRead","onlyget","graceful","DOCUMENT_NOT_FOUND","data","silent","newData","map","Array","isArray","type","lines","line","JSON","stringify","isBinary","direction","vertex","_edges","startVertex","edgeCollection","BatchedArrayCursor","arangojsHostId","items","example","newValue","keys","documents","indexes","attribute","query","index","Es6Error","require","ExtendableError","default","messages","0","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","421","422","423","424","426","428","429","431","444","451","499","500","501","502","503","504","505","506","507","508","510","511","599","nativeErrorKeys","error","isArangoErrorResponse","isSystemError","err","getPrototypeOf","ArangoError","response","message","errorMessage","HttpError","statusCode","strict","_id","_key","TRANSACTION_NOT_FOUND","ANALYZER_NOT_FOUND","VIEW_NOT_FOUND","DATABASE_NOT_FOUND","GRAPH_NOT_FOUND","isAqlQuery","bindVars","isGeneratedAqlQuery","_source","isAqlLiteral","literal","toAQL","aql","templateStrings","args","strings","bindValues","length","rawValue","src","splice","slice","indexOf","isKnown","isArangoGraph","isArangoView","push","values","sep","fill","host","batches","LinkedList","_batches","_hasMore","hasMore","_host","_count","_extra","extra","_allowDirtyRead","_itemsCursor","ArrayCursor","more","_more","shift","batch","first","hasNext","next","clear","callback","currentBatch","reducer","initialValue","asyncIterator","batchedCursor","view","_view","flatMap","v","isEmpty","item","kill","ViewType","View","ARANGOSEARCH_VIEW","renameView","graph","mungeGharialResponse","prop","newDoc","new","oldDoc","old","doc","coerceEdgeDefinition","edgeDefinition","from","to","GraphVertexCollection","_collection","_graph","rev","headers","GraphEdgeCollection","edge","Graph","edgeDefinitions","orphanCollections","satellites","waitForSync","isSmart","isDisjoint","dropCollections","removed","collections","listVertexCollections","names","dropCollection","listEdgeCollections","collectionOrEdgeDefinitionOptions","edgeDefinitionOrOptions","graphName","decode","parse","encode","punycode","util","Url","protocol","slashes","auth","port","hostname","hash","search","pathname","href","urlParse","resolve","source","relative","resolveObject","format","obj","isString","protocolPattern","portPattern","simplePathPattern","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","unsafeProtocol","hostlessProtocol","slashedProtocol","querystring","url","parseQueryString","slashesDenoteHost","isObject","u","TypeError","queryIndex","splitter","uSplit","replace","rest","trim","simplePath","exec","substr","proto","lowerProto","toLowerCase","match","atSign","hostEnd","hec","lastIndexOf","decodeURIComponent","parseHost","ipv6Hostname","hostparts","part","newpart","j","k","charCodeAt","validParts","notHost","bit","unshift","toASCII","h","ae","esc","escape","qm","charAt","rel","tkeys","tk","tkey","rkeys","rk","rkey","relPath","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","isNullOrUndefined","authInHost","isNull","last","hasTrailingSlash","up","isAbsolute","g","Function","e","normalizeArray","parts","allowAboveRoot","filter","xs","f","resolvedPath","resolvedAbsolute","arguments","process","cwd","trailingSlash","paths","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","delimiter","dirname","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","len","runtime","Op","hasOwn","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","toStringTagSymbol","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","arg","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","reject","invoke","__await","then","unwrapped","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","reverse","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Database","arangojs","config","assign","newList","_classCallCheck","instance","Constructor","_possibleConstructorReturn","ReferenceError","_extendableBuiltin2","_this","captureStackTrace","stack","subClass","superClass","_inherits","cls","ExtendableBuiltin","apply","_extendableBuiltin","eq","regexp","maxKeys","kstr","vstr","x","idx","toString","stringifyPrimitive","isFinite","objectKeys","ks","nodeType","freeGlobal","global","maxInt","regexPunycode","regexNonASCII","regexSeparators","errors","floor","stringFromCharCode","fromCharCode","RangeError","array","mapDomain","string","ucs2decode","output","counter","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","baseMinusTMin","base","input","out","basic","oldi","w","baseMinusT","codePoint","inputLength","bias","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","test","webpackPolyfill","deprecate","children","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","isFunction","parseHeaders","xtend","initParams","uri","params","createXHR","_createXHR","called","getBody","xhr","responseText","responseType","responseXML","firefoxBugTakenEffect","documentElement","nodeName","getXml","isJson","errorFunc","evt","timeoutTimer","failureResponse","loadFunc","aborted","status","useXDR","rawRequest","getAllResponseHeaders","cors","XDomainRequest","XMLHttpRequest","sync","json","onreadystatechange","readyState","onload","onerror","onprogress","onabort","ontimeout","open","username","password","withCredentials","abort","setRequestHeader","beforeSend","send","forEachArray","toUpperCase","win","alert","confirm","prompt","headersArr","row","target","Analyzer","force","btoa","createRequest","baseUrl","agentOptions","parseUrl","baseUrlParts","omit","cb","expectBinary","urlParts","joinPath","req","formatUrl","after","before","MIME_JSON","isBearerAuth","Connection","Map","URLS","MAX_SOCKETS","loadBalancingStrategy","arangoVersion","_arangoVersion","_agent","agent","_agentOptions","maxSockets","_maxTasks","_headers","_loadBalancingStrategy","_useFailOver","_precaptureStackTraces","precaptureStackTraces","_responseQueueTimeSamples","responseQueueTimeSamples","Infinity","maxRetries","_shouldRetry","_maxRetries","addToHostList","setBearerAuth","setBasicAuth","_activeHost","random","_hosts","_activeDirtyHost","getLatest","_queueTimes","getValues","getAvg","avg","_queue","_activeTasks","task","retries","syscall","_runQueue","basePath","querystringify","clean","setHeader","token","databaseName","database","_databases","set","delete","urls","cleanUrls","raw","unix","normalizeUrl","newUrls","_urls","transactionId","_transactionId","headerName","close","numHosts","propagated","started","Date","now","transform","urlInfo","contentType","extraHeaders","_buildUrl","queueTime","Number","parsedBody","capture","generateStackTrace","toForm","fields","form","FormData","Blob","append","Route","_path","Transaction","conn","_connection","setTransactionId","promise","clearTransactionId","isArangoDatabase","coerceTransactionCollections","write","cols","allowImplicit","read","exclusive","configOrDatabase","connection","absolutePath","endpoints","endpoint","waitForPropagation","setResponseQueueTimeSamples","useBearerAuth","jwt","usersOrOptions","users","_collections","has","createCollection","EDGE_COLLECTION","excludeSystem","listCollections","_graphs","graphs","listGraphs","viewName","_views","listViews","views","analyzerName","_analyzers","analyzer","listAnalyzers","analyzers","passwd","user","suffix","grant","full","action","transactions","listTransactions","transaction","batchSize","cache","memoryLimit","ttl","queryId","isDeterministic","group","mount","configuration","dependencies","minimal","every","current","cfg","getServiceConfiguration","result2","warnings","warning","deps","getServiceDependencies","enabled"],"mappings":"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","file":"web.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"arangojs\"] = factory();\n\telse\n\t\troot[\"arangojs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","/**\n * ```ts\n * import type {\n *   FulltextIndex,\n *   GeoIndex,\n *   HashIndex,\n *   PersistentIndex,\n *   PrimaryIndex,\n *   SkiplistIndex,\n *   TtlIndex,\n * } from \"arangojs/indexes\";\n * ```\n *\n * The \"indexes\" module provides index-related types for TypeScript.\n *\n * @packageDocumentation\n */\n\n/**\n * (MMFiles only.) Options for creating a hash index.\n *\n * When using the RocksDB storage engine, this index type behaves identically\n * to {@link EnsurePersistentIndexOptions}.\n *\n * @deprecated Hash indexes have been deprecated in ArangoDB 3.9 and should be\n * replaced with persistent indexes.\n */\nexport type EnsureHashIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"hash\";\n  /**\n   * An array of attribute paths.\n   */\n  fields: string[];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, a unique index will be created.\n   *\n   * Default: `false`\n   */\n  unique?: boolean;\n  /**\n   * If set to `true`, the index will omit documents that do not contain at\n   * least one of the attribute paths in `fields` and these documents will be\n   * ignored for uniqueness checks.\n   *\n   * Default: `false`\n   */\n  sparse?: boolean;\n  /**\n   * If set to `false`, array values will not be deduplicated.\n   *\n   * Default: `true`\n   */\n  deduplicate?: boolean;\n  /**\n   * If set to `false`, index selectivity estimates will be disabled for this\n   * index.\n   *\n   * Default: `true`\n   */\n  estimates?: boolean;\n  /**\n   * If set to `true`, the index will be created in the background to reduce\n   * the write-lock duration for the collection during index creation.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * (MMFiles only.) Options for creating a skiplist index.\n *\n * When using the RocksDB storage engine, this index type behaves identically\n * to {@link EnsurePersistentIndexOptions}.\n *\n * @deprecated Skiplist indexes have been deprecated in ArangoDB 3.9 and should\n * be replaced with persistent indexes.\n */\nexport type EnsureSkiplistIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"skiplist\";\n  /**\n   * An array of attribute paths.\n   */\n  fields: string[];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, a unique index will be created.\n   *\n   * Default: `false`\n   */\n  unique?: boolean;\n  /**\n   * If set to `true`, the index will omit documents that do not contain at\n   * least one of the attribute paths in `fields` and these documents will be\n   * ignored for uniqueness checks.\n   *\n   * Default: `false`\n   */\n  sparse?: boolean;\n  /**\n   * If set to `false`, array values will not be deduplicated.\n   *\n   * Default: `true`\n   */\n  deduplicate?: boolean;\n  /**\n   * If set to `false`, index selectivity estimates will be disabled for this\n   * index.\n   *\n   * Default: `true`\n   */\n  estimates?: boolean;\n  /**\n   * If set to `true`, the index will be created in the background to reduce\n   * the write-lock duration for the collection during index creation.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * Options for creating a persistent index.\n */\nexport type EnsurePersistentIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"persistent\";\n  /**\n   * An array of attribute paths.\n   */\n  fields: string[];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, a unique index will be created.\n   *\n   * Default: `false`\n   */\n  unique?: boolean;\n  /**\n   * If set to `true`, the index will omit documents that do not contain at\n   * least one of the attribute paths in `fields` and these documents will be\n   * ignored for uniqueness checks.\n   *\n   * Default: `false`\n   */\n  sparse?: boolean;\n  /**\n   * If set to `false`, index selectivity estimates will be disabled for this\n   * index.\n   *\n   * Default: `true`\n   */\n  estimates?: boolean;\n  /**\n   * If set to `true`, the index will be created in the background to reduce\n   * the write-lock duration for the collection during index creation.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * Options for creating a geo index.\n */\nexport type EnsureGeoIndexOptions =\n  | {\n      type: \"geo\";\n      /**\n       * If set to `true`, `fields` must be an array containing a single attribute\n       * path and the attribute value must be an array with two values, the first\n       * of which will be interpreted as the longitude and the second of which will\n       * be interpreted as the latitude of the document.\n       *\n       * Default: `false`\n       */\n      geoJson?: false;\n      /**\n       * Attribute paths for the document's latitude and longitude values.\n       */\n      fields: [string, string];\n      /**\n       * A unique name for this index.\n       */\n      name?: string;\n      /**\n       * If set to `true`, the index will be created in the background to reduce\n       * the write-lock duration for the collection during index creation.\n       *\n       * Default: `false`\n       */\n      inBackground?: boolean;\n    }\n  | {\n      type: \"geo\";\n      /**\n       * If set to `true`, `fields` must be an array containing a single attribute\n       * path and the attribute value must be an array with two values, the first\n       * of which will be interpreted as the longitude and the second of which will\n       * be interpreted as the latitude of the document.\n       *\n       * Default: `false`\n       */\n      geoJson?: boolean;\n      /**\n       * An array containing the attribute path for an array containing two values,\n       * the first of which will be interpreted as the latitude, the second as the\n       * longitude. If `geoJson` is set to `true`, the order is reversed to match\n       * the GeoJSON format.\n       */\n      fields: [string];\n      /**\n       * A unique name for this index.\n       */\n      name?: string;\n      /**\n       * If set to `true`, the index will be created in the background to reduce\n       * the write-lock duration for the collection during index creation.\n       *\n       * Default: `false`\n       */\n      inBackground?: boolean;\n    };\n\n/**\n * Options for creating a fulltext index.\n */\nexport type EnsureFulltextIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"fulltext\";\n  /**\n   * An array containing exactly one attribute path.\n   */\n  fields: [string];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * Minimum character length of words to index.\n   */\n  minLength?: number;\n  /**\n   * If set to `true`, the index will be created in the background to reduce\n   * the write-lock duration for the collection during index creation.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * Options for creating a TTL index.\n */\nexport type EnsureTtlIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"ttl\";\n  /**\n   * An array containing exactly one attribute path.\n   */\n  fields: [string];\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * Duration in seconds after the attribute value at which the document will\n   * be considered as expired.\n   */\n  expireAfter: number;\n  /**\n   * If set to `true`, the index will be created in the background to reduce\n   * the write-lock duration for the collection during index creation.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * Options for creating a ZKD index.\n */\nexport type EnsureZkdIndexOptions = {\n  /**\n   * Type of this index.\n   */\n  type: \"zkd\";\n  /**\n   * An array containing attribute paths for the dimensions.\n   */\n  fields: string[];\n  /**\n   * Data type of the dimension attributes.\n   */\n  fieldValueTypes: \"double\";\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * If set to `true`, the index will be created in the background to reduce\n   * the write-lock duration for the collection during index creation.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * Shared attributes of all index types.\n */\nexport type GenericIndex = {\n  /**\n   * A unique name for this index.\n   */\n  name?: string;\n  /**\n   * A unique identifier for this index.\n   */\n  id: string;\n  /**\n   * Whether documents not containing at least one of the attribute paths\n   * are omitted by this index.\n   */\n  sparse: boolean;\n  /**\n   * Whether this index enforces uniqueness for values of its attribute paths.\n   */\n  unique: boolean;\n};\n\n/**\n * An object representing a persistent index.\n */\nexport type PersistentIndex = GenericIndex & {\n  type: \"persistent\";\n  fields: string[];\n};\n\n/**\n * An object representing a skiplist index.\n */\nexport type SkiplistIndex = GenericIndex & {\n  type: \"skiplist\";\n  fields: string[];\n};\n\n/**\n * An object representing a hash index.\n */\nexport type HashIndex = GenericIndex & {\n  type: \"hash\";\n  fields: string[];\n  selectivityEstimate: number;\n};\n\n/**\n * An object representing a primary index.\n */\nexport type PrimaryIndex = GenericIndex & {\n  type: \"primary\";\n  fields: string[];\n  selectivityEstimate: number;\n};\n\n/**\n * An object representing a fulltext index.\n */\nexport type FulltextIndex = GenericIndex & {\n  type: \"fulltext\";\n  fields: [string];\n  minLength: number;\n};\n\n/**\n * An object representing a geo index.\n */\nexport type GeoIndex = GenericIndex & {\n  type: \"geo\";\n  fields: [string] | [string, string];\n  geoJson: boolean;\n  bestIndexedLevel: number;\n  worstIndexedLevel: number;\n  maxNumCoverCells: number;\n};\n\n/**\n * An object representing a TTL index.\n */\nexport type TtlIndex = GenericIndex & {\n  type: \"ttl\";\n  fields: [string];\n  expireAfter: number;\n  selectivityEstimate: number;\n};\n\n/**\n * An object representing a TTL index.\n */\nexport type ZkdIndex = GenericIndex & {\n  type: \"zkd\";\n  fields: string[];\n  fieldValueTypes: \"double\";\n};\n\n/**\n * An object representing an index.\n */\nexport type Index =\n  | GeoIndex\n  | FulltextIndex\n  | PersistentIndex\n  | PrimaryIndex\n  | HashIndex\n  | SkiplistIndex\n  | TtlIndex\n  | ZkdIndex;\n\nexport type ObjectWithId = {\n  [key: string]: any;\n  id: string;\n};\n\nexport type ObjectWithName = {\n  [key: string]: any;\n  name: string;\n};\n\n/**\n * Index name, id or object with a `name` or `id` property.\n */\nexport type IndexSelector = ObjectWithId | ObjectWithName | string;\n\n/**\n * @internal\n * @hidden\n */\nexport function _indexHandle(\n  selector: IndexSelector,\n  collectionName: string\n): string {\n  if (typeof selector !== \"string\") {\n    if (selector.id) {\n      return _indexHandle(selector.id, collectionName);\n    }\n    throw new Error(\n      \"Index handle must be a string or an object with an id attribute\"\n    );\n  }\n  if (selector.includes(\"/\")) {\n    const [head, ...tail] = selector.split(\"/\");\n    const normalizedHead = head.normalize(\"NFC\");\n    if (normalizedHead !== collectionName) {\n      throw new Error(\n        `Index ID \"${selector}\" does not match collection name \"${collectionName}\"`\n      );\n    }\n    return [normalizedHead, ...tail].join(\"/\");\n  }\n  return `${collectionName}/${selector}`;\n}\n","/**\n * ```ts\n * import type {\n *   DocumentCollection,\n *   EdgeCollection,\n * } from \"arangojs/collection\";\n * ```\n *\n * The \"collection\" module provides collection related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ArangoResponseMetadata, Dict, Params } from \"./connection\";\nimport { ArrayCursor, BatchedArrayCursor } from \"./cursor\";\nimport { Database } from \"./database\";\nimport {\n  Document,\n  DocumentData,\n  DocumentMetadata,\n  DocumentSelector,\n  Edge,\n  EdgeData,\n  ObjectWithKey,\n  Patch,\n  _documentHandle,\n} from \"./documents\";\nimport { isArangoError } from \"./error\";\nimport {\n  EnsureFulltextIndexOptions,\n  EnsureGeoIndexOptions,\n  EnsureHashIndexOptions,\n  EnsurePersistentIndexOptions,\n  EnsureSkiplistIndexOptions,\n  EnsureTtlIndexOptions,\n  EnsureZkdIndexOptions,\n  FulltextIndex,\n  GeoIndex,\n  HashIndex,\n  Index,\n  IndexSelector,\n  PersistentIndex,\n  SkiplistIndex,\n  TtlIndex,\n  ZkdIndex,\n  _indexHandle,\n} from \"./indexes\";\nimport { Blob } from \"./lib/blob\";\nimport { COLLECTION_NOT_FOUND, DOCUMENT_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * Indicates whether the given value represents an {@link ArangoCollection}.\n *\n * @param collection - A value that might be a collection.\n */\nexport function isArangoCollection(\n  collection: any\n): collection is ArangoCollection {\n  return Boolean(collection && collection.isArangoCollection);\n}\n\n/**\n * Coerces the given collection name or {@link ArangoCollection} object to\n * a string representing the collection name.\n *\n * @param collection - Collection name or {@link ArangoCollection} object.\n */\nexport function collectionToString(\n  collection: string | ArangoCollection\n): string {\n  if (isArangoCollection(collection)) {\n    return String(collection.name);\n  } else return String(collection).normalize(\"NFC\");\n}\n\n/**\n * A marker interface identifying objects that can be used in AQL template\n * strings to create references to ArangoDB collections.\n *\n * See {@link aql}.\n */\nexport interface ArangoCollection {\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB collection.\n   */\n  readonly isArangoCollection: true;\n  /**\n   * Name of the collection.\n   */\n  readonly name: string;\n}\n\n/**\n * Integer values indicating the collection type.\n */\nexport enum CollectionType {\n  DOCUMENT_COLLECTION = 2,\n  EDGE_COLLECTION = 3,\n}\n\n/**\n * Integer values indicating the collection loading status.\n */\nexport enum CollectionStatus {\n  NEWBORN = 1,\n  UNLOADED = 2,\n  LOADED = 3,\n  UNLOADING = 4,\n  DELETED = 5,\n  LOADING = 6,\n}\n\n/**\n * Type of key generator.\n */\nexport type KeyGenerator = \"traditional\" | \"autoincrement\" | \"uuid\" | \"padded\";\n\n/**\n * Strategy for sharding a collection.\n */\nexport type ShardingStrategy =\n  | \"hash\"\n  | \"enterprise-hash-smart-edge\"\n  | \"community-compat\"\n  | \"enterprise-compat\"\n  | \"enterprise-smart-edge-compat\";\n\n/**\n * Type of document reference.\n *\n * See {@link DocumentCollection.list} and {@link EdgeCollection.list}.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryListType = \"id\" | \"key\" | \"path\";\n\n/**\n * When a validation should be applied.\n *\n * * `\"none\"`: No validation.\n * * `\"new\"`: Newly inserted documents are validated.\n * * `\"moderate\"`: New and modified documents are validated unless the modified\n *   document was already invalid.\n * * `\"strict\"`: New and modified documents are always validated.\n */\nexport type ValidationLevel = \"none\" | \"new\" | \"moderate\" | \"strict\";\n\n/**\n * General information about a collection.\n */\nexport type CollectionMetadata = {\n  /**\n   * Collection name.\n   */\n  name: string;\n  /**\n   * A globally unique identifier for this collection.\n   */\n  globallyUniqueId: string;\n  /**\n   * An integer indicating the collection loading status.\n   */\n  status: CollectionStatus;\n  /**\n   * An integer indicating the collection type.\n   */\n  type: CollectionType;\n  /**\n   * @internal\n   *\n   * Whether the collection is a system collection.\n   */\n  isSystem: boolean;\n};\n\n/**\n * An object defining the collection's key generation.\n */\nexport type CollectionKeyProperties = {\n  /**\n   * Type of key generator to use.\n   */\n  type: KeyGenerator;\n  /**\n   * Whether documents can be created with a user-specified `_key` attribute.\n   */\n  allowUserKeys: boolean;\n  /**\n   * (Autoincrement only.) How many steps to increment the key each time.\n   */\n  increment?: number;\n  /**\n   * (Autoincrement only.) Initial offset for the key.\n   */\n  offset?: number;\n  /**\n   * Most recent key that has been generated.\n   */\n  lastValue: number;\n};\n\n/**\n * Properties for validating documents in a collection.\n */\nexport type SchemaProperties = {\n  /**\n   * Type of document validation.\n   */\n  type: \"json\";\n  /**\n   * JSON Schema description of the validation schema for documents.\n   */\n  rule: any;\n  /**\n   * When validation should be applied.\n   */\n  level: ValidationLevel;\n  /**\n   * Message to be used if validation fails.\n   */\n  message: string;\n};\n\n/**\n * An object defining the properties of a collection.\n */\nexport type CollectionProperties = {\n  /**\n   * A human-readable representation of the collection loading status.\n   */\n  statusString: string;\n  /**\n   * Whether data should be synchronized to disk before returning from\n   * a document create, update, replace or removal operation.\n   */\n  waitForSync: boolean;\n  /**\n   * An object defining the collection's key generation.\n   */\n  keyOptions: CollectionKeyProperties;\n  /**\n   * Properties for validating documents in the collection.\n   */\n  schema: SchemaProperties | null;\n  /**\n   * (Cluster only.) Write concern for this collection.\n   */\n  writeConcern: number;\n  /**\n   * (Cluster only.) Write concern for this collection.\n   *\n   * @deprecated Renamed to `writeConcern` in ArangoDB 3.6.\n   */\n  minReplicationFactor?: number;\n  /**\n   * (Cluster only.) Number of shards of this collection.\n   */\n  numberOfShards?: number;\n  /**\n   * (Cluster only.) Keys of this collection that will be used for\n   * sharding.\n   */\n  shardKeys?: string[];\n  /**\n   * (Cluster only.) Replication factor of the collection.\n   */\n  replicationFactor?: number;\n  /**\n   * (Cluster only.) Sharding strategy of the collection.\n   */\n  shardingStrategy?: ShardingStrategy;\n  /**\n   * (MMFiles only.) Whether the collection will be compacted.\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  doCompact?: boolean;\n  /**\n   * (MMFiles only.) Maximum size for each journal or datafile in bytes.\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  journalSize?: number;\n  /**\n   * (MMFiles only.) Number of buckets into which indexes using hash tables are\n   * split.\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  indexBuckets?: number;\n  /**\n   * (MMFiles only.) If set to `true`, the collection will only be kept\n   * in-memory and discarded when unloaded, resulting in full data loss.\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  isVolatile?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) If set to a collection name, sharding\n   * of the new collection will follow the rules for that collection. As long\n   * as the new collection exists, the indicated collection can not be dropped.\n   */\n  distributeShardsLike?: string;\n  /**\n   * (Enterprise Edition cluster only.) Attribute containing the shard key\n   * value of the referred-to smart join collection.\n   */\n  smartJoinAttribute?: string;\n};\n\n// Options\n\n/**\n * Options for validating collection documents.\n */\nexport type SchemaOptions = {\n  /**\n   * JSON Schema description of the validation schema for documents.\n   */\n  rule: any;\n  /**\n   * When validation should be applied.\n   *\n   * Default: `\"strict\"`\n   */\n  level?: ValidationLevel;\n  /**\n   * Message to be used if validation fails.\n   */\n  message?: string;\n};\n\n/**\n * Options for setting a collection's properties.\n *\n * See {@link DocumentCollection.properties} and {@link EdgeCollection.properties}.\n */\nexport type CollectionPropertiesOptions = {\n  /**\n   * Whether data should be synchronized to disk before returning from\n   * a document create, update, replace or removal operation.\n   */\n  waitForSync?: boolean;\n  /**\n   * Options for validating documents in this collection.\n   */\n  schema?: SchemaOptions;\n  /**\n   * (MMFiles only.) Maximum size for each journal or datafile in bytes.\n   *\n   * Must be a number greater than or equal to `1048576` (1 MiB).\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  journalSize?: number;\n};\n\n/**\n * Options for retrieving a collection checksum.\n */\nexport type CollectionChecksumOptions = {\n  /**\n   * If set to `true`, revision IDs will be included in the calculation\n   * of the checksum.\n   *\n   * Default: `false`\n   */\n  withRevisions?: boolean;\n  /**\n   * If set to `true`, document data will be included in the calculation\n   * of the checksum.\n   *\n   * Default: `false`\n   */\n  withData?: boolean;\n};\n\n/**\n * Options for dropping collections.\n */\nexport type CollectionDropOptions = {\n  /**\n   * Whether the collection is a system collection. If the collection is a\n   * system collection, this option must be set to `true` or ArangoDB will\n   * refuse to drop the collection.\n   *\n   * Default: `false`\n   */\n  isSystem?: boolean;\n};\n\n/**\n * An object defining the collection's key generation.\n */\nexport type CollectionKeyOptions = {\n  /**\n   * Type of key generator to use.\n   */\n  type?: KeyGenerator;\n  /**\n   * Unless set to `false`, documents can be created with a user-specified\n   * `_key` attribute.\n   *\n   * Default: `true`\n   */\n  allowUserKeys?: boolean;\n  /**\n   * (Autoincrement only.) How many steps to increment the key each time.\n   */\n  increment?: number;\n  /**\n   * (Autoincrement only.) Initial offset for the key.\n   */\n  offset?: number;\n};\n\n/**\n * Options for creating a collection.\n *\n * See {@link Database.createCollection}, {@link Database.createEdgeCollection}\n * and {@link DocumentCollection.create} or {@link EdgeCollection.create}.\n */\nexport type CreateCollectionOptions = {\n  /**\n   * If set to `true`, data will be synchronized to disk before returning from\n   * a document create, update, replace or removal operation.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * @internal\n   *\n   * Whether the collection should be created as a system collection.\n   *\n   * Default: `false`\n   */\n  isSystem?: boolean;\n  /**\n   * An object defining the collection's key generation.\n   */\n  keyOptions?: CollectionKeyOptions;\n  /**\n   * Options for validating documents in the collection.\n   */\n  schema?: SchemaOptions;\n  /**\n   * (Cluster only.) Unless set to `false`, the server will wait for all\n   * replicas to create the collection before returning.\n   *\n   * Default: `true`\n   */\n  waitForSyncReplication?: boolean;\n  /**\n   * (Cluster only.) Unless set to `false`, the server will check whether\n   * enough replicas are available at creation time and bail out otherwise.\n   *\n   * Default: `true`\n   */\n  enforceReplicationFactor?: boolean;\n  /**\n   * (Cluster only.) Number of shards to distribute the collection across.\n   *\n   * Default: `1`\n   */\n  numberOfShards?: number;\n  /**\n   * (Cluster only.) Document attributes to use to determine the target shard\n   * for each document.\n   *\n   * Default: `[\"_key\"]`\n   */\n  shardKeys?: string[];\n  /**\n   * (Cluster only.) How many copies of each document should be kept in the\n   * cluster.\n   *\n   * Default: `1`\n   */\n  replicationFactor?: number;\n  /**\n   * (Cluster only.) Write concern for this collection.\n   */\n  writeConcern?: number;\n  /**\n   * (Cluster only.) Write concern for this collection.\n   *\n   * @deprecated Renamed to `writeConcern` in ArangoDB 3.6.\n   */\n  minReplicationFactor?: number;\n  /**\n   * (Cluster only.) Sharding strategy to use.\n   */\n  shardingStrategy?: ShardingStrategy;\n  /**\n   * (MMFiles only.) Number of buckets into which indexes using hash tables are\n   * split.\n   *\n   * Must be a power of 2 and less than or equal to `1024`.\n   *\n   * Default: `16`\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  indexBuckets?: number;\n  /**\n   * (MMFiles only.) Whether the collection will be compacted.\n   *\n   * Default: `true`\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  doCompact?: boolean;\n  /**\n   * (MMFiles only.) Maximum size for each journal or datafile in bytes.\n   *\n   * Must be a number greater than or equal to `1048576` (1 MiB).\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  journalSize?: number;\n  /**\n   * (MMFiles only.) If set to `true`, the collection will only be kept\n   * in-memory and discarded when unloaded, resulting in full data loss.\n   *\n   * Default: `false`\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  isVolatile?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) If set to a collection name, sharding\n   * of the new collection will follow the rules for that collection. As long\n   * as the new collection exists, the indicated collection can not be dropped.\n   */\n  distributeShardsLike?: string;\n  /**\n   * (Enterprise Edition cluster only.) Attribute containing the shard key\n   * value of the referred-to smart join collection.\n   */\n  smartJoinAttribute?: string;\n};\n\n/**\n * Options for retrieving a document from a collection.\n */\nexport type CollectionReadOptions = {\n  /**\n   * If set to `true`, `null` is returned instead of an exception being thrown\n   * if the document does not exist.\n   */\n  graceful?: boolean;\n  /**\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\n   * potentially dirty or stale result and arangojs will load balance the\n   * request without distinguishing between leaders and followers.\n   */\n  allowDirtyRead?: boolean;\n};\n\n/**\n * Options for retrieving multiple documents from a collection.\n */\nexport type CollectionBatchReadOptions = {\n  /**\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\n   * potentially dirty or stale result and arangojs will load balance the\n   * request without distinguishing between leaders and followers.\n   */\n  allowDirtyRead?: boolean;\n};\n\n/**\n * Options for inserting a new document into a collection.\n */\nexport type CollectionInsertOptions = {\n  /**\n   * If set to `true`, data will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `true`, no data will be returned by the server. This option can\n   * be used to reduce network traffic.\n   *\n   * Default: `false`\n   */\n  silent?: boolean;\n  /**\n   * If set to `true`, the complete new document will be returned as the `new`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnNew?: boolean;\n  /**\n   * If set to `true`, a document with the same `_key` or `_id` already\n   * existing will be overwritten instead of resulting in an exception.\n   *\n   * @deprecated This option has been deprecated in ArangoDB 3.7 and replaced\n   * with the `overwriteMode` option.\n   */\n  overwrite?: boolean;\n  /**\n   * Defines what should happen if a document with the same `_key` or `_id`\n   * already exists, instead of throwing an exception.\n   *\n   * Default: `\"conflict\"\n   */\n  overwriteMode?: \"ignore\" | \"update\" | \"replace\" | \"conflict\";\n};\n\n/**\n * Options for replacing an existing document in a collection.\n */\nexport type CollectionReplaceOptions = {\n  /**\n   * If set to `true`, data will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `true`, no data will be returned by the server. This option can\n   * be used to reduce network traffic.\n   *\n   * Default: `false`\n   */\n  silent?: boolean;\n  /**\n   * If set to `true`, the complete new document will be returned as the `new`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnNew?: boolean;\n  /**\n   * If set to `false`, the existing document will only be modified if its\n   * `_rev` property matches the same property on the new data.\n   *\n   * Default: `true`\n   */\n  ignoreRevs?: boolean;\n  /**\n   * If set to `true`, the complete old document will be returned as the `old`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnOld?: boolean;\n};\n\n/**\n * Options for updating a document in a collection.\n */\nexport type CollectionUpdateOptions = {\n  /**\n   * If set to `true`, data will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `true`, no data will be returned by the server. This option can\n   * be used to reduce network traffic.\n   *\n   * Default: `false`\n   */\n  silent?: boolean;\n  /**\n   * If set to `true`, the complete new document will be returned as the `new`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnNew?: boolean;\n  /**\n   * If set to `false`, the existing document will only be modified if its\n   * `_rev` property matches the same property on the new data.\n   *\n   * Default: `true`\n   */\n  ignoreRevs?: boolean;\n  /**\n   * If set to `true`, the complete old document will be returned as the `old`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnOld?: boolean;\n  /**\n   * If set to `false`, properties with a value of `null` will be removed from\n   * the new document.\n   *\n   * Default: `true`\n   */\n  keepNull?: boolean;\n  /**\n   * If set to `false`, object properties that already exist in the old\n   * document will be overwritten rather than merged. This does not affect\n   * arrays.\n   *\n   * Default: `true`\n   */\n  mergeObjects?: boolean;\n};\n\n/**\n * Options for removing a document from a collection.\n */\nexport type CollectionRemoveOptions = {\n  /**\n   * If set to `true`, changes will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `true`, the complete old document will be returned as the `old`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnOld?: boolean;\n  /**\n   * If set to `true`, no data will be returned by the server. This option can\n   * be used to reduce network traffic.\n   *\n   * Default: `false`\n   */\n  silent?: boolean;\n};\n\n/**\n * Options for bulk importing documents into a collection.\n */\nexport type CollectionImportOptions = {\n  /**\n   * (Edge collections only.) Prefix to prepend to `_from` attribute values.\n   */\n  fromPrefix?: string;\n  /**\n   * (Edge collections only.) Prefix to prepend to `_to` attribute values.\n   */\n  toPrefix?: string;\n  /**\n   * If set to `true`, the collection is truncated before the data is imported.\n   *\n   * Default: `false`\n   */\n  overwrite?: boolean;\n  /**\n   * Whether to wait for the documents to have been synced to disk.\n   */\n  waitForSync?: boolean;\n  /**\n   * Controls behavior when a unique constraint is violated on the document key.\n   *\n   * * `\"error\"`: the document will not be imported.\n   * * `\"update`: the document will be merged into the existing document.\n   * * `\"replace\"`: the document will replace the existing document.\n   * * `\"ignore\"`: the document will not be imported and the unique constraint\n   *   error will be ignored.\n   *\n   * Default: `\"error\"`\n   */\n  onDuplicate?: \"error\" | \"update\" | \"replace\" | \"ignore\";\n  /**\n   * If set to `true`, the import will abort if any error occurs.\n   */\n  complete?: boolean;\n  /**\n   * Whether the response should contain additional details about documents\n   * that could not be imported.\n   */\n  details?: boolean;\n};\n\n/**\n * Options for retrieving documents by example.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryByExampleOptions = {\n  /**\n   * Number of documents to skip in the query.\n   */\n  skip?: number;\n  /**\n   * Maximum number of documents to return.\n   */\n  limit?: number;\n  /**\n   * Number of result values to be transferred by the server in each\n   * network roundtrip (or \"batch\").\n   *\n   * Must be greater than zero.\n   *\n   * See also {@link QueryOptions}.\n   */\n  batchSize?: number;\n  /**\n   * Time-to-live for the cursor in seconds. The cursor results may be\n   * garbage collected by ArangoDB after this much time has passed.\n   *\n   * See also {@link QueryOptions}.\n   */\n  ttl?: number;\n};\n\n/**\n * Options for retrieving all documents in a collection.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryAllOptions = {\n  /**\n   * Number of documents to skip in the query.\n   */\n  skip?: number;\n  /**\n   * Maximum number of documents to return.\n   */\n  limit?: number;\n  /**\n   * Number of result values to be transferred by the server in each\n   * network roundtrip (or \"batch\").\n   *\n   * Must be greater than zero.\n   *\n   * See also {@link QueryOptions}.\n   */\n  batchSize?: number;\n  /**\n   * Time-to-live for the cursor in seconds. The cursor results may be\n   * garbage collected by ArangoDB after this much time has passed.\n   *\n   * See also {@link QueryOptions}.\n   */\n  ttl?: number;\n  /**\n   * If set to `true`, the query will be executed as a streaming query.\n   *\n   * See also {@link QueryOptions}.\n   */\n  stream?: boolean;\n};\n\n/**\n * Options for updating documents by example.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryUpdateByExampleOptions = {\n  /**\n   * If set to `false`, properties with a value of `null` will be removed from\n   * the new document.\n   *\n   * Default: `true`\n   */\n  keepNull?: boolean;\n  /**\n   * If set to `true`, the request will wait until all modifications have been\n   * synchronized to disk before returning successfully.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * Maximum number of documents to return.\n   */\n  limit?: number;\n  /**\n   * If set to `false`, object properties that already exist in the old\n   * document will be overwritten rather than merged. This does not affect\n   * arrays.\n   *\n   * Default: `true`\n   */\n  mergeObjects?: boolean;\n};\n\n/**\n * Options for removing documents by example.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryRemoveByExampleOptions = {\n  /**\n   * If set to `true`, the request will wait until all modifications have been\n   * synchronized to disk before returning successfully.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * Maximum number of documents to return.\n   */\n  limit?: number;\n};\n\n/**\n * Options for replacing documents by example.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryReplaceByExampleOptions =\n  SimpleQueryRemoveByExampleOptions;\n\n/**\n * Options for removing documents by keys.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryRemoveByKeysOptions = {\n  /**\n   * If set to `true`, the complete old document will be returned as the `old`\n   * property on the result object. Has no effect if `silent` is set to `true`.\n   *\n   * Default: `false`\n   */\n  returnOld?: boolean;\n  /**\n   * If set to `true`, no data will be returned by the server. This option can\n   * be used to reduce network traffic.\n   *\n   * Default: `false`\n   */\n  silent?: boolean;\n  /**\n   * If set to `true`, the request will wait until all modifications have been\n   * synchronized to disk before returning successfully.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n};\n\n/**\n * Options for performing a fulltext query.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryFulltextOptions = {\n  /**\n   * Unique identifier of the fulltext index to use to perform the query.\n   */\n  index?: string;\n  /**\n   * Maximum number of documents to return.\n   */\n  limit?: number;\n  /**\n   * Number of documents to skip in the query.\n   */\n  skip?: number;\n};\n\n/**\n * Options for performing a graph traversal.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type TraversalOptions = {\n  /**\n   * A string evaluating to the body of a JavaScript function to be executed\n   * on the server to initialize the traversal result object.\n   *\n   * The code has access to two variables: `config`, `result`.\n   * The code may modify the `result` object.\n   *\n   * **Note**: This code will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any other variables.\n   *\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   */\n  init?: string;\n  /**\n   * A string evaluating to the body of a JavaScript function to be executed\n   * on the server to filter nodes.\n   *\n   * The code has access to three variables: `config`, `vertex`, `path`.\n   * The code may include a return statement for the following values:\n   *\n   * * `\"exclude\"`: The vertex will not be visited.\n   * * `\"prune\"`: The edges of the vertex will not be followed.\n   * * `\"\"` or `undefined`: The vertex will be visited and its edges followed.\n   * * an array including any of the above values.\n   *\n   * **Note**: This code will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any other variables.\n   *\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   */\n  filter?: string;\n  /**\n   * A string evaluating to the body of a JavaScript function to be executed\n   * on the server to sort edges if `expander` is not set.\n   *\n   * The code has access to two variables representing edges: `l`, `r`.\n   * The code must return `-1` if `l < r`, `1` if `l > r` or `0` if both\n   * values are equal.\n   *\n   * **Note**: This code will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any other variables.\n   *\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   */\n  sort?: string;\n  /**\n   * A string evaluating to the body of a JavaScript function to be executed\n   * on the server when a node is visited.\n   *\n   * The code has access to five variables: `config`, `result`, `vertex`,\n   * `path`, `connected`.\n   * The code may modify the `result` object.\n   *\n   * **Note**: This code will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any other variables.\n   *\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   */\n  visitor?: string;\n  /**\n   * A string evaluating to the body of a JavaScript function to be executed\n   * on the server to use when `direction` is not set.\n   *\n   * The code has access to three variables: `config`, `vertex`, `path`.\n   * The code must return an array of objects with `edge` and `vertex`\n   * attributes representing the connections for the vertex.\n   *\n   * **Note**: This code will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any other variables.\n   *\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   */\n  expander?: string;\n  /**\n   * Direction of the traversal, relative to the starting vertex if `expander`\n   * is not set.\n   */\n  direction?: \"inbound\" | \"outbound\" | \"any\";\n  /**\n   * Item iteration order.\n   */\n  itemOrder?: \"forward\" | \"backward\";\n  /**\n   * Traversal strategy.\n   */\n  strategy?: \"depthfirst\" | \"breadthfirst\";\n  /**\n   * Traversal order.\n   */\n  order?: \"preorder\" | \"postorder\" | \"preorder-expander\";\n  /**\n   * Specifies uniqueness for vertices and edges.\n   */\n  uniqueness?: {\n    /**\n     * Uniqueness for vertices.\n     */\n    vertices?: \"none\" | \"global\" | \"path\";\n    /**\n     * Uniqueness for edges.\n     */\n    edges?: \"none\" | \"global\" | \"path\";\n  };\n  /**\n   * If specified, only nodes in at least this depth will be visited.\n   */\n  minDepth?: number;\n  /**\n   * If specified, only nodes in at most this depth will be visited.\n   */\n  maxDepth?: number;\n  /**\n   * Maximum number of iterations before a traversal is aborted because of a\n   * potential endless loop.\n   */\n  maxIterations?: number;\n};\n\n// Results\n\n/**\n * Result of a collection bulk import.\n */\nexport type CollectionImportResult = {\n  /**\n   * Whether the import failed.\n   */\n  error: false;\n  /**\n   * Number of new documents imported.\n   */\n  created: number;\n  /**\n   * Number of documents that failed with an error.\n   */\n  errors: number;\n  /**\n   * Number of empty documents.\n   */\n  empty: number;\n  /**\n   * Number of documents updated.\n   */\n  updated: number;\n  /**\n   * Number of documents that failed with an error that is ignored.\n   */\n  ignored: number;\n  /**\n   * Additional details about any errors encountered during the import.\n   */\n  details?: string[];\n};\n\n/**\n * Result of retrieving edges in a collection.\n */\nexport type CollectionEdgesResult<T extends Record<string, any> = any> = {\n  edges: Edge<T>[];\n  stats: {\n    scannedIndex: number;\n    filtered: number;\n  };\n};\n\n/**\n * Result of removing documents by an example.\n *\n * See {@link DocumentCollection.removeByExample} and {@link EdgeCollection.removeByExample}.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryRemoveByExampleResult = {\n  /**\n   * Number of documents removed.\n   */\n  deleted: number;\n};\n\n/**\n * Result of replacing documents by an example.\n *\n * See {@link DocumentCollection.replaceByExample} and {@link EdgeCollection.replaceByExample}.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryReplaceByExampleResult = {\n  /**\n   * Number of documents replaced.\n   */\n  replaced: number;\n};\n\n/**\n * Result of updating documents by an example.\n *\n * See {@link DocumentCollection.updateByExample} and {@link EdgeCollection.updateByExample}.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryUpdateByExampleResult = {\n  /**\n   * Number of documents updated.\n   */\n  updated: number;\n};\n\n/**\n * Result of removing documents by keys.\n *\n * See {@link DocumentCollection.removeByKeys} and {@link EdgeCollection.removeByKeys}.\n *\n * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n * replaced with AQL queries.\n */\nexport type SimpleQueryRemoveByKeysResult<T extends Record<string, any> = any> =\n  {\n    /**\n     * Number of documents removed.\n     */\n    removed: number;\n    /**\n     * Number of documents not removed.\n     */\n    ignored: number;\n    /**\n     * Documents that have been removed.\n     */\n    old?: DocumentMetadata[] | Document<T>[];\n  };\n\n// Collections\n\n/**\n * Represents an document collection in a {@link Database}.\n *\n * See {@link EdgeCollection} for a variant of this interface more suited for\n * edge collections.\n *\n * When using TypeScript, collections can be cast to a specific document data\n * type to increase type safety.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n *\n * @example\n * ```ts\n * interface Person {\n *   name: string;\n * }\n * const db = new Database();\n * const documents = db.collection(\"persons\") as DocumentCollection<Person>;\n * ```\n */\nexport interface DocumentCollection<T extends Record<string, any> = any>\n  extends ArangoCollection {\n  /**\n   * Checks whether the collection exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const result = await collection.exists();\n   * // result indicates whether the collection exists\n   * ```\n   */\n  exists(): Promise<boolean>;\n  /**\n   * Retrieves general information about the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const data = await collection.get();\n   * // data contains general information about the collection\n   * ```\n   */\n  get(): Promise<ArangoResponseMetadata & CollectionMetadata>;\n  /**\n   * Creates a collection with the given `options` and the instance's name.\n   *\n   * See also {@link Database.createCollection} and\n   * {@link Database.createEdgeCollection}.\n   *\n   * **Note**: When called on an {@link EdgeCollection} instance in TypeScript,\n   * the `type` option must still be set to the correct {@link CollectionType}.\n   * Otherwise this will result in the collection being created with the\n   * default type (i.e. as a document collection).\n   *\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"potatoes\");\n   * await collection.create();\n   * // the document collection \"potatoes\" now exists\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.create({ type: CollectionType.EDGE_COLLECTION });\n   * // the edge collection \"friends\" now exists\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const collection = db.collection(\"friends\") as EdgeCollection<Friend>;\n   * // even in TypeScript you still need to indicate the collection type\n   * // if you want to create an edge collection\n   * await collection.create({ type: CollectionType.EDGE_COLLECTION });\n   * // the edge collection \"friends\" now exists\n   * ```\n   */\n  create(\n    options?: CreateCollectionOptions & {\n      type?: CollectionType;\n    }\n  ): Promise<\n    ArangoResponseMetadata & CollectionMetadata & CollectionProperties\n  >;\n  /**\n   * Retrieves the collection's properties.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const data = await collection.properties();\n   * // data contains the collection's properties\n   * ```\n   */\n  properties(): Promise<\n    ArangoResponseMetadata & CollectionMetadata & CollectionProperties\n  >;\n  /**\n   * Replaces the properties of the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const result = await collection.setProperties({ waitForSync: true });\n   * // the collection will now wait for data being written to disk\n   * // whenever a document is changed\n   * ```\n   */\n  properties(\n    properties: CollectionPropertiesOptions\n  ): Promise<\n    ArangoResponseMetadata & CollectionMetadata & CollectionProperties\n  >;\n  /**\n   * Retrieves information about the number of documents in a collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const data = await collection.count();\n   * // data contains the collection's count\n   * ```\n   */\n  count(): Promise<\n    ArangoResponseMetadata &\n      CollectionMetadata &\n      CollectionProperties & { count: number }\n  >;\n  /**\n   * (RocksDB only.) Instructs ArangoDB to recalculate the collection's\n   * document count to fix any inconsistencies.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"inconsistent-collection\");\n   * const badData = await collection.count();\n   * // oh no, the collection count looks wrong -- fix it!\n   * await collection.recalculateCount();\n   * const goodData = await collection.count();\n   * // goodData contains the collection's improved count\n   * ```\n   */\n  recalculateCount(): Promise<boolean>;\n  /**\n   * Retrieves statistics for a collection.\n   *\n   * @param details - whether to return extended storage engine-specific details\n   * to the figures, which may cause additional load and impact performance\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const data = await collection.figures();\n   * // data contains the collection's figures\n   * ```\n   */\n  figures(\n    details?: boolean\n  ): Promise<\n    ArangoResponseMetadata &\n      CollectionMetadata &\n      CollectionProperties & { count: number; figures: Dict<any> }\n  >;\n  /**\n   * Retrieves the collection revision ID.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const data = await collection.revision();\n   * // data contains the collection's revision\n   * ```\n   */\n  revision(): Promise<\n    ArangoResponseMetadata &\n      CollectionMetadata &\n      CollectionProperties & { revision: string }\n  >;\n  /**\n   * Retrieves the collection checksum.\n   *\n   * @param options - Options for retrieving the checksum.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const data = await collection.checksum();\n   * // data contains the collection's checksum\n   * ```\n   */\n  checksum(\n    options?: CollectionChecksumOptions\n  ): Promise<\n    ArangoResponseMetadata &\n      CollectionMetadata & { revision: string; checksum: string }\n  >;\n  /**\n   * (MMFiles only.) Instructs ArangoDB to load the collection into memory.\n   *\n   * @param count - Whether the number of documents in the collection should\n   * be included in the server response. Disabling this may speed up this\n   * process in future versions of ArangoDB.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.load();\n   * // the collection has now been loaded into memory\n   * ```\n   *\n   * @deprecated This method was deprecated in ArangoDB 3.8 as it no longer has\n   * any effect since the MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  load(\n    count?: true\n  ): Promise<ArangoResponseMetadata & CollectionMetadata & { count: number }>;\n  /**\n   * Instructs ArangoDB to load the collection into memory.\n   *\n   * @param count - Whether the number of documents in the collection should\n   * be included in the server response. Disabling this may speed up this\n   * process in future versions of ArangoDB.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.load(false);\n   * // the collection has now been loaded into memory\n   * ```\n   */\n  load(count: false): Promise<ArangoResponseMetadata & CollectionMetadata>;\n  /**\n   * (RocksDB only.) Instructs ArangoDB to load as many indexes of the\n   * collection into memory as permitted by the memory limit.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"indexed-collection\");\n   * await collection.loadIndexes();\n   * // the indexes are now loaded into memory\n   * ```\n   */\n  loadIndexes(): Promise<boolean>;\n  /**\n   * (MMFiles only.) Instructs ArangoDB to remove the collection from memory.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.unload();\n   * // the collection has now been unloaded from memory\n   * ```\n   *\n   * @deprecated This method was deprecated in ArangoDB 3.8 as it no longer has\n   * any effect since the MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  unload(): Promise<ArangoResponseMetadata & CollectionMetadata>;\n  /**\n   * Renames the collection and updates the instance's `name` to `newName`.\n   *\n   * Additionally removes the instance from the {@link Database}'s internal\n   * cache.\n   *\n   * **Note**: Renaming collections may not be supported when ArangoDB is\n   * running in a cluster configuration.\n   *\n   * @param newName - The new name of the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection1 = db.collection(\"some-collection\");\n   * await collection1.rename(\"other-collection\");\n   * const collection2 = db.collection(\"some-collection\");\n   * const collection3 = db.collection(\"other-collection\");\n   * // Note all three collection instances are different objects but\n   * // collection1 and collection3 represent the same ArangoDB collection!\n   * ```\n   */\n  rename(newName: string): Promise<ArangoResponseMetadata & CollectionMetadata>;\n  /**\n   * (MMFiles single-server only.) Rotates the journal of the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const rotated = await collection.rotate();\n   * ```\n   *\n   * @deprecated The MMFiles storage engine was removed in ArangoDB 3.7.\n   */\n  rotate(): Promise<boolean>;\n  /**\n   * Deletes all documents in the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.truncate();\n   * // millions of documents cry out in terror and are suddenly silenced,\n   * // the collection \"some-collection\" is now empty\n   * ```\n   */\n  truncate(): Promise<ArangoResponseMetadata & CollectionMetadata>;\n  /**\n   * Deletes the collection from the database.\n   *\n   * @param options - Options for dropping the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.drop();\n   * // The collection \"some-collection\" is now an ex-collection\n   * ```\n   */\n  drop(options?: CollectionDropOptions): Promise<ArangoResponseMetadata>;\n\n  //#region crud\n  /**\n   * Retrieves the `shardId` of the shard responsible for the given document.\n   *\n   * @param document - Document in the collection to look up the `shardId` of.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const responsibleShard = await collection.getResponsibleShard();\n   * ```\n   */\n  getResponsibleShard(document: Partial<Document<T>>): Promise<string>;\n  /**\n   * Derives a document `_id` from the given selector for this collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const meta = await collection.save({ foo: \"bar\" }, { returnNew: true });\n   * const doc = meta.new;\n   * console.log(collection.documentId(meta)); // via meta._id\n   * console.log(collection.documentId(doc)); // via doc._id\n   * console.log(collection.documentId(meta._key)); // also works\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection1 = db.collection(\"some-collection\");\n   * const collection2 = db.collection(\"other-collection\");\n   * const meta = await collection1.save({ foo: \"bar\" });\n   * // Mixing collections is usually a mistake\n   * console.log(collection1.documentId(meta)); // ok: same collection\n   * console.log(collection2.documentId(meta)); // throws: wrong collection\n   * console.log(collection2.documentId(meta._id)); // also throws\n   * console.log(collection2.documentId(meta._key)); // ok but wrong collection\n   * ```\n   */\n  documentId(selector: DocumentSelector): string;\n  /**\n   * Checks whether a document matching the given key or id exists in this\n   * collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const exists = await collection.documentExists(\"abc123\");\n   * if (!exists) {\n   *   console.log(\"Document does not exist\");\n   * }\n   * ```\n   */\n  documentExists(selector: DocumentSelector): Promise<boolean>;\n  /**\n   * Retrieves the document matching the given key or id.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param options - Options for retrieving the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * try {\n   *   const document = await collection.document(\"abc123\");\n   *   console.log(document);\n   * } catch (e) {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const document = await collection.document(\"abc123\", { graceful: true });\n   * if (document) {\n   *   console.log(document);\n   * } else {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   */\n  document(\n    selector: DocumentSelector,\n    options?: CollectionReadOptions\n  ): Promise<Document<T>>;\n  /**\n   * Retrieves the document matching the given key or id.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param graceful - If set to `true`, `null` is returned instead of an\n   * exception being thrown if the document does not exist.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * try {\n   *   const document = await collection.document(\"abc123\", false);\n   *   console.log(document);\n   * } catch (e) {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const document = await collection.document(\"abc123\", true);\n   * if (document) {\n   *   console.log(document);\n   * } else {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   */\n  document(selector: DocumentSelector, graceful: boolean): Promise<Document<T>>;\n  /**\n   * Retrieves the documents matching the given key or id values.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection, or if the document does not exist.\n   *\n   * @param selectors - Array of document `_key`, `_id` or objects with either\n   * of those properties (e.g. a document from this collection).\n   * @param options - Options for retrieving the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * try {\n   *   const documents = await collection.documents([\"abc123\", \"xyz456\"]);\n   *   console.log(documents);\n   * } catch (e) {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   */\n  documents(\n    selectors: (string | ObjectWithKey)[],\n    options?: CollectionBatchReadOptions\n  ): Promise<Document<T>[]>;\n  /**\n   * Inserts a new document with the given `data` into the collection.\n   *\n   * @param data - The contents of the new document.\n   * @param options - Options for inserting the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const result = await collection.save(\n   *   { _key: \"a\", color: \"blue\", count: 1 },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.color, result.new.count); // \"blue\" 1\n   * ```\n   */\n  save(\n    data: DocumentData<T>,\n    options?: CollectionInsertOptions\n  ): Promise<DocumentMetadata & { new?: Document<T> }>;\n  /**\n   * Inserts new documents with the given `data` into the collection.\n   *\n   * @param data - The contents of the new documents.\n   * @param options - Options for inserting the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const result = await collection.saveAll(\n   *   [\n   *     { _key: \"a\", color: \"blue\", count: 1 },\n   *     { _key: \"b\", color: \"red\", count: 2 },\n   *   ],\n   *   { returnNew: true }\n   * );\n   * console.log(result[0].new.color, result[0].new.count); // \"blue\" 1\n   * console.log(result[1].new.color, result[1].new.count); // \"red\" 2\n   * ```\n   */\n  saveAll(\n    data: Array<DocumentData<T>>,\n    options?: CollectionInsertOptions\n  ): Promise<Array<DocumentMetadata & { new?: Document<T> }>>;\n  /**\n   * Replaces an existing document in the collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param newData - The contents of the new document.\n   * @param options - Options for replacing the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\n   * const result = await collection.replace(\n   *   \"a\",\n   *   { color: \"red\" },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.color, result.new.count); // \"red\" undefined\n   * ```\n   */\n  replace(\n    selector: DocumentSelector,\n    newData: DocumentData<T>,\n    options?: CollectionReplaceOptions\n  ): Promise<DocumentMetadata & { new?: Document<T>; old?: Document<T> }>;\n  /**\n   * Replaces existing documents in the collection, identified by the `_key` or\n   * `_id` of each document.\n   *\n   * @param newData - The documents to replace.\n   * @param options - Options for replacing the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\n   * await collection.save({ _key: \"b\", color: \"green\", count: 3 });\n   * const result = await collection.replaceAll(\n   *   [\n   *     { _key: \"a\", color: \"red\" },\n   *     { _key: \"b\", color: \"yellow\", count: 2 }\n   *   ],\n   *   { returnNew: true }\n   * );\n   * console.log(result[0].new.color, result[0].new.count); // \"red\" undefined\n   * console.log(result[1].new.color, result[1].new.count); // \"yellow\" 2\n   * ```\n   */\n  replaceAll(\n    newData: Array<DocumentData<T> & ({ _key: string } | { _id: string })>,\n    options?: CollectionReplaceOptions\n  ): Promise<\n    Array<DocumentMetadata & { new?: Document<T>; old?: Document<T> }>\n  >;\n  /**\n   * Updates an existing document in the collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param newData - The data for updating the document.\n   * @param options - Options for updating the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\n   * const result = await collection.update(\n   *   \"a\",\n   *   { count: 2 },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.color, result.new.count); // \"blue\" 2\n   * ```\n   */\n  update(\n    selector: DocumentSelector,\n    newData: Patch<DocumentData<T>>,\n    options?: CollectionUpdateOptions\n  ): Promise<DocumentMetadata & { new?: Document<T>; old?: Document<T> }>;\n  /**\n   * Updates existing documents in the collection, identified by the `_key` or\n   * `_id` of each document.\n   *\n   * @param newData - The data for updating the documents.\n   * @param options - Options for updating the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\n   * await collection.save({ _key: \"b\", color: \"green\", count: 3 });\n   * const result = await collection.updateAll(\n   *   [\n   *     { _key: \"a\", count: 2 },\n   *     { _key: \"b\", count: 4 }\n   *   ],\n   *   { returnNew: true }\n   * );\n   * console.log(result[0].new.color, result[0].new.count); // \"blue\" 2\n   * console.log(result[1].new.color, result[1].new.count); // \"green\" 4\n   * ```\n   */\n  updateAll(\n    newData: Array<\n      Patch<DocumentData<T>> & ({ _key: string } | { _id: string })\n    >,\n    options?: CollectionUpdateOptions\n  ): Promise<\n    Array<DocumentMetadata & { new?: Document<T>; old?: Document<T> }>\n  >;\n  /**\n   * Removes an existing document from the collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param options - Options for removing the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.remove(\"abc123\");\n   * // document with key \"abc123\" deleted\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const doc = await collection.document(\"abc123\");\n   * await collection.remove(doc);\n   * // document with key \"abc123\" deleted\n   * ```\n   */\n  remove(\n    selector: DocumentSelector,\n    options?: CollectionRemoveOptions\n  ): Promise<DocumentMetadata & { old?: Document<T> }>;\n  /**\n   * Removes existing documents from the collection.\n   *\n   * Throws an exception when passed any document or `_id` from a different\n   * collection.\n   *\n   * @param selectors - Documents `_key`, `_id` or objects with either of those\n   * properties (e.g. documents from this collection).\n   * @param options - Options for removing the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.removeAll([\"abc123\", \"def456\"]);\n   * // document with keys \"abc123\" and \"def456\" deleted\n   * ```\n   */\n  removeAll(\n    selectors: DocumentSelector[],\n    options?: CollectionRemoveOptions\n  ): Promise<Array<DocumentMetadata & { old?: Document<T> }>>;\n  /**\n   * Bulk imports the given `data` into the collection.\n   *\n   * @param data - The data to import, as an array of document data.\n   * @param options - Options for importing the data.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   [\n   *     { _key: \"jcd\", password: \"bionicman\" },\n   *     { _key: \"jreyes\", password: \"amigo\" },\n   *     { _key: \"ghermann\", password: \"zeitgeist\" }\n   *   ]\n   * );\n   * ```\n   */\n  import(\n    data: DocumentData<T>[],\n    options?: CollectionImportOptions\n  ): Promise<CollectionImportResult>;\n  /**\n   * Bulk imports the given `data` into the collection.\n   *\n   * @param data - The data to import, as an array containing a single array of\n   * attribute names followed by one or more arrays of attribute values for\n   * each document.\n   * @param options - Options for importing the data.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   [\n   *     [ \"_key\", \"password\" ],\n   *     [ \"jcd\", \"bionicman\" ],\n   *     [ \"jreyes\", \"amigo\" ],\n   *     [ \"ghermann\", \"zeitgeist\" ]\n   *   ]\n   * );\n   * ```\n   */\n  import(\n    data: any[][],\n    options?: CollectionImportOptions\n  ): Promise<CollectionImportResult>;\n  /**\n   * Bulk imports the given `data` into the collection.\n   *\n   * If `type` is omitted, `data` must contain one JSON array per line with\n   * the first array providing the attribute names and all other arrays\n   * providing attribute values for each document.\n   *\n   * If `type` is set to `\"documents\"`, `data` must contain one JSON document\n   * per line.\n   *\n   * If `type` is set to `\"list\"`, `data` must contain a JSON array of\n   * documents.\n   *\n   * If `type` is set to `\"auto\"`, `data` can be in either of the formats\n   * supported by `\"documents\"` or `\"list\"`.\n   *\n   * @param data - The data to import as a Buffer (Node), Blob (browser) or\n   * string.\n   * @param options - Options for importing the data.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   '{\"_key\":\"jcd\",\"password\":\"bionicman\"}\\r\\n' +\n   *   '{\"_key\":\"jreyes\",\"password\":\"amigo\"}\\r\\n' +\n   *   '{\"_key\":\"ghermann\",\"password\":\"zeitgeist\"}\\r\\n',\n   *   { type: \"documents\" } // or \"auto\"\n   * );\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   '[{\"_key\":\"jcd\",\"password\":\"bionicman\"},' +\n   *   '{\"_key\":\"jreyes\",\"password\":\"amigo\"},' +\n   *   '{\"_key\":\"ghermann\",\"password\":\"zeitgeist\"}]',\n   *   { type: \"list\" } // or \"auto\"\n   * );\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   '[\"_key\",\"password\"]\\r\\n' +\n   *   '[\"jcd\",\"bionicman\"]\\r\\n' +\n   *   '[\"jreyes\",\"amigo\"]\\r\\n' +\n   *   '[\"ghermann\",\"zeitgeist\"]\\r\\n'\n   * );\n   * ```\n   */\n  import(\n    data: Buffer | Blob | string,\n    options?: CollectionImportOptions & {\n      type?: \"documents\" | \"list\" | \"auto\";\n    }\n  ): Promise<CollectionImportResult>;\n  //#endregion\n\n  //#region simple queries\n\n  /**\n   * Retrieves a list of references for all documents in the collection.\n   *\n   * @param type - The type of document reference to retrieve.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const ids = await collection.list(\"id\");\n   * const ids = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   RETURN doc._id\n   * `);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const keys = await collection.list(\"key\");\n   * const keys = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   RETURN doc._key\n   * `);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const paths = await collection.list(\"path\");\n   * const paths = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   RETURN CONCAT(\"/_db/\", CURRENT_DATABASE(), \"/_api/document/\", doc._id)\n   * `);\n   * ```\n   */\n  list(type?: SimpleQueryListType): Promise<ArrayCursor<string>>;\n\n  /**\n   * Retrieves all documents in the collection.\n   *\n   * @param options - Options for retrieving the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const cursor = await collection.all();\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   RETURN doc\n   * `);\n   * ```\n   */\n  all(options?: SimpleQueryAllOptions): Promise<ArrayCursor<Document<T>>>;\n\n  /**\n   * Retrieves a random document from the collection.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const doc = await collection.any();\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   SORT RAND()\n   *   LIMIT 1\n   *   RETURN doc\n   * `);\n   * const doc = await cursor.next();\n   * ```\n   */\n  any(): Promise<Document<T>>;\n\n  /**\n   * Retrieves all documents in the collection matching the given example.\n   *\n   * @param example - An object representing an example for documents.\n   * @param options - Options for retrieving the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const cursor = await collection.byExample({ flavor: \"strawberry\" });\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   RETURN doc\n   * `);\n   * ```\n   */\n  byExample(\n    example: Partial<DocumentData<T>>,\n    options?: SimpleQueryByExampleOptions\n  ): Promise<ArrayCursor<Document<T>>>;\n\n  /**\n   * Retrieves a single document in the collection matching the given example.\n   *\n   * @param example - An object representing an example for the document.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const doc = await collection.firstExample({ flavor: \"strawberry\" });\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   LIMIT 1\n   *   RETURN doc\n   * `);\n   * const doc = await cursor.next();\n   * ```\n   */\n  firstExample(example: Partial<DocumentData<T>>): Promise<Document<T>>;\n\n  /**\n   * Removes all documents in the collection matching the given example.\n   *\n   * @param example - An object representing an example for the document.\n   * @param options - Options for removing the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const { deleted } = await collection.removeByExample({\n   * //   flavor: \"strawberry\"\n   * // });\n   * const cursor = await db.query(aql`\n   *   RETURN LENGTH(\n   *     FOR doc IN ${collection}\n   *     FILTER doc.flavor == \"strawberry\"\n   *     REMOVE doc IN ${collection}\n   *     RETURN 1\n   *   )\n   * `);\n   * const deleted = await cursor.next();\n   * ```\n   */\n  removeByExample(\n    example: Partial<DocumentData<T>>,\n    options?: SimpleQueryRemoveByExampleOptions\n  ): Promise<ArangoResponseMetadata & SimpleQueryRemoveByExampleResult>;\n\n  /**\n   * Replaces all documents in the collection matching the given example.\n   *\n   * @param example - An object representing an example for the documents.\n   * @param newValue - Document data to replace the matching documents with.\n   * @param options - Options for replacing the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const newValue = { flavor: \"chocolate\" };\n   * // const { replaced } = await collection.replaceByExample(\n   * //   { flavor: \"strawberry\" },\n   * //   newValue\n   * // );\n   * const cursor = await db.query(aql`\n   *   RETURN LENGTH(\n   *     FOR doc IN ${collection}\n   *     FILTER doc.flavor == \"strawberry\"\n   *     REPLACE doc WITH ${newValue} IN ${collection}\n   *     RETURN 1\n   *   )\n   * `);\n   * const replaced = await cursor.next();\n   * ```\n   */\n  replaceByExample(\n    example: Partial<DocumentData<T>>,\n    newValue: DocumentData<T>,\n    options?: SimpleQueryReplaceByExampleOptions\n  ): Promise<ArangoResponseMetadata & SimpleQueryReplaceByExampleResult>;\n\n  /**\n   * Updates all documents in the collection matching the given example.\n   *\n   * @param example - An object representing an example for the documents.\n   * @param newValue - Document data to update the matching documents with.\n   * @param options - Options for updating the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const newData = { color: \"red\" };\n   * // const { updated } = await collection.updateByExample(\n   * //   { flavor: \"strawberry\" },\n   * //   newValue\n   * // );\n   * const cursor = await db.query(aql`\n   *   RETURN LENGTH(\n   *     FOR doc IN ${collection}\n   *     FILTER doc.flavor == \"strawberry\"\n   *     UPDATE doc WITH ${newValue} IN ${collection}\n   *     RETURN 1\n   *   )\n   * `);\n   * const updated = await cursor.next();\n   * ```\n   */\n  updateByExample(\n    example: Partial<DocumentData<T>>,\n    newValue: Patch<DocumentData<T>>,\n    options?: SimpleQueryUpdateByExampleOptions\n  ): Promise<ArangoResponseMetadata & SimpleQueryUpdateByExampleResult>;\n\n  /**\n   * Retrieves all documents matching the given document keys.\n   *\n   * @param keys - An array of document keys to look up.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const keys = [\"a\", \"b\", \"c\"];\n   * // const docs = await collection.byKeys(keys);\n   * const cursor = await db.query(aql`\n   *   FOR key IN ${keys}\n   *   LET doc = DOCUMENT(${collection}, key)\n   *   RETURN doc\n   * `);\n   * const docs = await cursor.all();\n   * ```\n   */\n  lookupByKeys(keys: string[]): Promise<Document<T>[]>;\n\n  /**\n   * Removes all documents matching the given document keys.\n   *\n   * @param keys - An array of document keys to remove.\n   * @param options - Options for removing the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const keys = [\"a\", \"b\", \"c\"];\n   * // const { removed, ignored } = await collection.removeByKeys(keys);\n   * const cursor = await db.query(aql`\n   *   FOR key IN ${keys}\n   *   LET doc = DOCUMENT(${collection}, key)\n   *   FILTER doc\n   *   REMOVE doc IN ${collection}\n   *   RETURN key\n   * `);\n   * const removed = await cursor.all();\n   * const ignored = keys.filter((key) => !removed.includes(key));\n   * ```\n   */\n  removeByKeys(\n    keys: string[],\n    options?: SimpleQueryRemoveByKeysOptions\n  ): Promise<ArangoResponseMetadata & SimpleQueryRemoveByKeysResult<T>>;\n\n  /**\n   * Performs a fulltext query in the given `attribute` on the collection.\n   *\n   * @param attribute - Name of the field to search.\n   * @param query - Fulltext query string to search for.\n   * @param options - Options for performing the fulltext query.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const cursor = await collection.fulltext(\"article\", \"needle\");\n   * const cursor = await db.query(aql`\n   *   FOR doc IN FULLTEXT(${collection}, \"article\", \"needle\")\n   *   RETURN doc\n   * `);\n   * ```\n   */\n  fulltext(\n    attribute: string,\n    query: string,\n    options?: SimpleQueryFulltextOptions\n  ): Promise<ArrayCursor<Document<T>>>;\n  //#endregion\n\n  //#region indexes\n  /**\n   * Returns a list of all index descriptions for the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const indexes = await collection.indexes();\n   * ```\n   */\n  indexes(): Promise<Index[]>;\n  /**\n   * Returns an index description by name or `id` if it exists.\n   *\n   * @param selector - Index name, id or object with either property.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const index = await collection.index(\"some-index\");\n   * ```\n   */\n  index(selector: IndexSelector): Promise<Index>;\n  /**\n   * Creates a persistent index on the collection if it does not already exist.\n   *\n   * @param details - Options for creating the persistent index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Create a unique index for looking up documents by username\n   * await collection.ensureIndex({\n   *   type: \"persistent\",\n   *   fields: [\"username\"],\n   *   name: \"unique-usernames\",\n   *   unique: true\n   * });\n   * ```\n   */\n  ensureIndex(\n    details: EnsurePersistentIndexOptions\n  ): Promise<\n    ArangoResponseMetadata & PersistentIndex & { isNewlyCreated: boolean }\n  >;\n  /**\n   * Creates a hash index on the collection if it does not already exist.\n   *\n   * When using the RocksDB storage engine, hash indexes behave identically\n   * to persistent indexes.\n   *\n   * @param details - Options for creating the hash index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Create a unique index for looking up documents by username\n   * await collection.ensureIndex({\n   *   type: \"hash\",\n   *   fields: [\"username\"],\n   *   name: \"unique-usernames\",\n   *   unique: true\n   * });\n   * ```\n   *\n   * @deprecated Hash indexes have been deprecated in ArangoDB 3.9 and should\n   * be replaced with persistent indexes.\n   */\n  ensureIndex(\n    details: EnsureHashIndexOptions\n  ): Promise<ArangoResponseMetadata & HashIndex & { isNewlyCreated: boolean }>;\n  /**\n   * Creates a skiplist index on the collection if it does not already exist.\n   *\n   * When using the RocksDB storage engine, skiplist indexes behave identically\n   * to persistent indexes.\n   *\n   * @param details - Options for creating the skiplist index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Create an index for sorting email addresses\n   * await collection.ensureIndex({\n   *   type: \"skiplist\",\n   *   fields: [\"email\"]\n   * });\n   * ```\n   *\n   * @deprecated Skiplist indexes have been deprecated in ArangoDB 3.9 and\n   * should be replaced with persistent indexes.\n   */\n  ensureIndex(\n    details: EnsureSkiplistIndexOptions\n  ): Promise<\n    ArangoResponseMetadata & SkiplistIndex & { isNewlyCreated: boolean }\n  >;\n  /**\n   * Creates a TTL index on the collection if it does not already exist.\n   *\n   * @param details - Options for creating the TTL index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Expire documents with \"createdAt\" timestamp one day after creation\n   * await collection.ensureIndex({\n   *   type: \"ttl\",\n   *   fields: [\"createdAt\"],\n   *   expireAfter: 60 * 60 * 24 // 24 hours\n   * });\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Expire documents with \"expiresAt\" timestamp according to their value\n   * await collection.ensureIndex({\n   *   type: \"ttl\",\n   *   fields: [\"expiresAt\"],\n   *   expireAfter: 0 // when attribute value is exceeded\n   * });\n   * ```\n   */\n  ensureIndex(\n    details: EnsureTtlIndexOptions\n  ): Promise<ArangoResponseMetadata & TtlIndex & { isNewlyCreated: boolean }>;\n  /**\n   * Creates a multi-dimensional index on the collection if it does not already exist.\n   *\n   * @param details - Options for creating the multi-dimensional index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-points\");\n   * // Create a multi-dimensional index for the attributes x, y and z\n   * await collection.ensureIndex({\n   *   type: \"zkd\",\n   *   fields: [\"x\", \"y\", \"z\"],\n   *   fieldValueTypes: \"double\"\n   * });\n   * ```\n   * ```\n   */\n  ensureIndex(\n    details: EnsureZkdIndexOptions\n  ): Promise<ArangoResponseMetadata & ZkdIndex & { isNewlyCreated: boolean }>;\n  /**\n   * Creates a fulltext index on the collection if it does not already exist.\n   *\n   * @param details - Options for creating the fulltext index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Create a fulltext index for tokens longer than or equal to 3 characters\n   * await collection.ensureIndex({\n   *   type: \"fulltext\",\n   *   fields: [\"description\"],\n   *   minLength: 3\n   * });\n   * ```\n   */\n  ensureIndex(\n    details: EnsureFulltextIndexOptions\n  ): Promise<\n    ArangoResponseMetadata & FulltextIndex & { isNewlyCreated: boolean }\n  >;\n  /**\n   * Creates a geo index on the collection if it does not already exist.\n   *\n   * @param details - Options for creating the geo index.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // Create an index for GeoJSON data\n   * await collection.ensureIndex({\n   *   type: \"geo\",\n   *   fields: [\"lngLat\"],\n   *   geoJson: true\n   * });\n   * ```\n   */\n  ensureIndex(\n    details: EnsureGeoIndexOptions\n  ): Promise<ArangoResponseMetadata & GeoIndex & { isNewlyCreated: boolean }>;\n  /**\n   * Deletes the index with the given name or `id` from the database.\n   *\n   * @param selector - Index name, id or object with either property.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.dropIndex(\"some-index\");\n   * // The index \"some-index\" no longer exists\n   * ```\n   */\n  dropIndex(\n    selector: IndexSelector\n  ): Promise<ArangoResponseMetadata & { id: string }>;\n  /**\n   * Triggers compaction for a collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.compact();\n   * // Background compaction is triggered on the collection\n   * ```\n   */\n  compact(): Promise<ArangoResponseMetadata>;\n  //#endregion\n}\n\n/**\n * Represents an edge collection in a {@link Database}.\n *\n * See {@link DocumentCollection} for a more generic variant of this interface\n * more suited for regular document collections.\n *\n * See also {@link GraphEdgeCollection} for the type representing an edge\n * collection in a {@link Graph}.\n *\n * When using TypeScript, collections can be cast to a specific edge document\n * data type to increase type safety.\n *\n * @param T - Type to use for edge document data. Defaults to `any`.\n *\n * @example\n * ```ts\n * interface Friend {\n *   startDate: number;\n *   endDate?: number;\n * }\n * const db = new Database();\n * const edges = db.collection(\"friends\") as EdgeCollection<Friend>;\n * ```\n */\nexport interface EdgeCollection<T extends Record<string, any> = any>\n  extends DocumentCollection<T> {\n  /**\n   * Retrieves the document matching the given key or id.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection, or if the document does not exist.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param options - Options for retrieving the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * try {\n   *   const document = await collection.document(\"abc123\");\n   *   console.log(document);\n   * } catch (e) {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const document = await collection.document(\"abc123\", { graceful: true });\n   * if (document) {\n   *   console.log(document);\n   * } else {\n   *   console.error(\"Document does not exist\");\n   * }\n   * ```\n   */\n  document(\n    selector: DocumentSelector,\n    options?: CollectionReadOptions\n  ): Promise<Edge<T>>;\n  /**\n   * Retrieves the document matching the given key or id.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection, or if the document does not exist.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param graceful - If set to `true`, `null` is returned instead of an\n   * exception being thrown if the document does not exist.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * try {\n   *   const document = await collection.document(\"abc123\", false);\n   *   console.log(document);\n   * } catch (e) {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const document = await collection.document(\"abc123\", true);\n   * if (document) {\n   *   console.log(document);\n   * } else {\n   *   console.error(\"Document does not exist\");\n   * }\n   * ```\n   */\n  document(selector: DocumentSelector, graceful: boolean): Promise<Edge<T>>;\n  /**\n   * Retrieves the documents matching the given key or id values.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection, or if the document does not exist.\n   *\n   * @param selectors - Array of document `_key`, `_id` or objects with either\n   * of those properties (e.g. a document from this collection).\n   * @param options - Options for retrieving the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * try {\n   *   const documents = await collection.documents([\"abc123\", \"xyz456\"]);\n   *   console.log(documents);\n   * } catch (e) {\n   *   console.error(\"Could not find document\");\n   * }\n   * ```\n   */\n  documents(\n    selectors: (string | ObjectWithKey)[],\n    options?: CollectionBatchReadOptions\n  ): Promise<Edge<T>[]>;\n  /**\n   * Inserts a new document with the given `data` into the collection.\n   *\n   * @param data - The contents of the new document.\n   * @param options - Options for inserting the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * const result = await collection.save(\n   *   { _from: \"users/rana\", _to: \"users/mudasir\", active: false },\n   *   { returnNew: true }\n   * );\n   * ```\n   */\n  save(\n    data: EdgeData<T>,\n    options?: CollectionInsertOptions\n  ): Promise<DocumentMetadata & { new?: Edge<T> }>;\n  /**\n   * Inserts new documents with the given `data` into the collection.\n   *\n   * @param data - The contents of the new documents.\n   * @param options - Options for inserting the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * const result = await collection.saveAll(\n   *   [\n   *     { _from: \"users/rana\", _to: \"users/mudasir\", active: false },\n   *     { _from: \"users/rana\", _to: \"users/salman\", active: true }\n   *   ],\n   *   { returnNew: true }\n   * );\n   * ```\n   */\n  saveAll(\n    data: Array<EdgeData<T>>,\n    options?: CollectionInsertOptions\n  ): Promise<Array<DocumentMetadata & { new?: Edge<T> }>>;\n  /**\n   * Replaces an existing document in the collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param newData - The contents of the new document.\n   * @param options - Options for replacing the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.save(\n   *   {\n   *     _key: \"musadir\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/mudasir\",\n   *     active: true,\n   *     best: true\n   *   }\n   * );\n   * const result = await collection.replace(\n   *   \"musadir\",\n   *   { active: false },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.active, result.new.best); // false undefined\n   * ```\n   */\n  replace(\n    selector: DocumentSelector,\n    newData: DocumentData<T>,\n    options?: CollectionReplaceOptions\n  ): Promise<DocumentMetadata & { new?: Edge<T>; old?: Edge<T> }>;\n  /**\n   * Replaces existing documents in the collection, identified by the `_key` or\n   * `_id` of each document.\n   *\n   * @param newData - The documents to replace.\n   * @param options - Options for replacing the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.save(\n   *   {\n   *     _key: \"musadir\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/mudasir\",\n   *     active: true,\n   *     best: true\n   *   }\n   * );\n   * await collection.save(\n   *   {\n   *     _key: \"salman\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/salman\",\n   *     active: false,\n   *     best: false\n   *   }\n   * );\n   * const result = await collection.replaceAll(\n   *   [\n   *     { _key: \"musadir\", active: false },\n   *     { _key: \"salman\", active: true, best: true }\n   *   ],\n   *   { returnNew: true }\n   * );\n   * console.log(result[0].new.active, result[0].new.best); // false undefined\n   * console.log(result[1].new.active, result[1].new.best); // true true\n   * ```\n   */\n  replaceAll(\n    newData: Array<DocumentData<T> & ({ _key: string } | { _id: string })>,\n    options?: CollectionReplaceOptions\n  ): Promise<Array<DocumentMetadata & { new?: Edge<T>; old?: Edge<T> }>>;\n  /**\n   * Updates an existing document in the collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param newData - The data for updating the document.\n   * @param options - Options for updating the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.save(\n   *   {\n   *     _key: \"musadir\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/mudasir\",\n   *     active: true,\n   *     best: true\n   *   }\n   * );\n   * const result = await collection.update(\n   *   \"musadir\",\n   *   { active: false },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.active, result.new.best); // false true\n   * ```\n   */\n  update(\n    selector: DocumentSelector,\n    newData: Patch<DocumentData<T>>,\n    options?: CollectionUpdateOptions\n  ): Promise<DocumentMetadata & { new?: Edge<T>; old?: Edge<T> }>;\n  /**\n   * Updates existing documents in the collection, identified by the `_key` or\n   * `_id` of each document.\n   *\n   * @param newData - The data for updating the documents.\n   * @param options - Options for updating the documents.\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.save(\n   *   {\n   *     _key: \"musadir\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/mudasir\",\n   *     active: true,\n   *     best: true\n   *   }\n   * );\n   * await collection.save(\n   *   {\n   *     _key: \"salman\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/salman\",\n   *     active: false,\n   *     best: false\n   *   }\n   * );\n   * const result = await collection.updateAll(\n   *   [\n   *     { _key: \"musadir\", active: false },\n   *     { _key: \"salman\", active: true, best: true }\n   *   ],\n   *   { returnNew: true }\n   * );\n   * console.log(result[0].new.active, result[0].new.best); // false true\n   * console.log(result[1].new.active, result[1].new.best); // true true\n   * ```\n   */\n  updateAll(\n    newData: Array<\n      Patch<DocumentData<T>> & ({ _key: string } | { _id: string })\n    >,\n    options?: CollectionUpdateOptions\n  ): Promise<Array<DocumentMetadata & { new?: Edge<T>; old?: Edge<T> }>>;\n  /**\n   * Removes an existing document from the collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param options - Options for removing the document.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * const doc = await collection.document(\"musadir\");\n   * await collection.remove(doc);\n   * // document with key \"musadir\" deleted\n   * ```\n   */\n  remove(\n    selector: DocumentSelector,\n    options?: CollectionRemoveOptions\n  ): Promise<DocumentMetadata & { old?: Edge<T> }>;\n  /**\n   * Removes existing documents from the collection.\n   *\n   * Throws an exception when passed any document or `_id` from a different\n   * collection.\n   *\n   * @param selectors - Documents `_key`, `_id` or objects with either of those\n   * properties (e.g. documents from this collection).\n   * @param options - Options for removing the documents.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.removeAll([\"musadir\", \"salman\"]);\n   * // document with keys \"musadir\" and \"salman\" deleted\n   * ```\n   */\n  removeAll(\n    selectors: DocumentSelector[],\n    options?: CollectionRemoveOptions\n  ): Promise<Array<DocumentMetadata & { old?: Edge<T> }>>;\n  /**\n   * Bulk imports the given `data` into the collection.\n   *\n   * @param data - The data to import, as an array of edge data.\n   * @param options - Options for importing the data.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   [\n   *     { _key: \"x\", _from: \"vertices/a\", _to: \"vertices/b\", weight: 1 },\n   *     { _key: \"y\", _from: \"vertices/a\", _to: \"vertices/c\", weight: 2 }\n   *   ]\n   * );\n   * ```\n   */\n  import(\n    data: EdgeData<T>[],\n    options?: CollectionImportOptions\n  ): Promise<CollectionImportResult>;\n  /**\n   * Bulk imports the given `data` into the collection.\n   *\n   * @param data - The data to import, as an array containing a single array of\n   * attribute names followed by one or more arrays of attribute values for\n   * each edge document.\n   * @param options - Options for importing the data.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   [\n   *     [ \"_key\", \"_from\", \"_to\", \"weight\" ],\n   *     [ \"x\", \"vertices/a\", \"vertices/b\", 1 ],\n   *     [ \"y\", \"vertices/a\", \"vertices/c\", 2 ]\n   *   ]\n   * );\n   * ```\n   */\n  import(\n    data: any[][],\n    options?: CollectionImportOptions\n  ): Promise<CollectionImportResult>;\n  /**\n   * Bulk imports the given `data` into the collection.\n   *\n   * If `type` is omitted, `data` must contain one JSON array per line with\n   * the first array providing the attribute names and all other arrays\n   * providing attribute values for each edge document.\n   *\n   * If `type` is set to `\"documents\"`, `data` must contain one JSON document\n   * per line.\n   *\n   * If `type` is set to `\"list\"`, `data` must contain a JSON array of\n   * edge documents.\n   *\n   * If `type` is set to `\"auto\"`, `data` can be in either of the formats\n   * supported by `\"documents\"` or `\"list\"`.\n   *\n   * @param data - The data to import as a Buffer (Node), Blob (browser) or\n   * string.\n   * @param options - Options for importing the data.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   '{\"_key\":\"x\",\"_from\":\"vertices/a\",\"_to\":\"vertices/b\",\"weight\":1}\\r\\n' +\n   *   '{\"_key\":\"y\",\"_from\":\"vertices/a\",\"_to\":\"vertices/c\",\"weight\":2}\\r\\n',\n   *   { type: \"documents\" } // or \"auto\"\n   * );\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   '[{\"_key\":\"x\",\"_from\":\"vertices/a\",\"_to\":\"vertices/b\",\"weight\":1},' +\n   *   '{\"_key\":\"y\",\"_from\":\"vertices/a\",\"_to\":\"vertices/c\",\"weight\":2}]',\n   *   { type: \"list\" } // or \"auto\"\n   * );\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * await collection.import(\n   *   '[\"_key\",\"_from\",\"_to\",\"weight\"]\\r\\n' +\n   *   '[\"x\",\"vertices/a\",\"vertices/b\",1]\\r\\n' +\n   *   '[\"y\",\"vertices/a\",\"vertices/c\",2]\\r\\n'\n   * );\n   * ```\n   */\n  import(\n    data: Buffer | Blob | string,\n    options?: CollectionImportOptions & {\n      type?: \"documents\" | \"list\" | \"auto\";\n    }\n  ): Promise<CollectionImportResult>;\n  //#endregion\n\n  //#region simple queries\n\n  /**\n   * Retrieves all documents in the collection.\n   *\n   * @param options - Options for retrieving the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const cursor = await collection.all();\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   RETURN doc\n   * `);\n   * ```\n   */\n  all(options?: SimpleQueryAllOptions): Promise<ArrayCursor<Edge<T>>>;\n\n  /**\n   * Retrieves a random document from the collection.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const doc = await collection.any();\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   SORT RAND()\n   *   LIMIT 1\n   *   RETURN doc\n   * `);\n   * const doc = await cursor.next();\n   * ```\n   */\n  any(): Promise<Edge<T>>;\n\n  /**\n   * Retrieves all documents in the collection matching the given example.\n   *\n   * @param example - An object representing an example for documents.\n   * @param options - Options for retrieving the documents.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const cursor = await collection.byExample({ flavor: \"strawberry\" });\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   RETURN doc\n   * `);\n   * ```\n   */\n  byExample(\n    example: Partial<DocumentData<T>>,\n    options?: SimpleQueryByExampleOptions\n  ): Promise<ArrayCursor<Edge<T>>>;\n\n  /**\n   * Retrieves a single document in the collection matching the given example.\n   *\n   * @param example - An object representing an example for the document.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const doc = await collection.firstExample({ flavor: \"strawberry\" });\n   * const cursor = await db.query(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   LIMIT 1\n   *   RETURN doc\n   * `);\n   * const doc = await cursor.next();\n   * ```\n   */\n  firstExample(example: Partial<DocumentData<T>>): Promise<Edge<T>>;\n\n  /**\n   * Retrieves all documents matching the given document keys.\n   *\n   * @param keys - An array of document keys to look up.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const keys = [\"a\", \"b\", \"c\"];\n   * // const docs = await collection.byKeys(keys);\n   * const cursor = await db.query(aql`\n   *   FOR key IN ${keys}\n   *   LET doc = DOCUMENT(${collection}, key)\n   *   RETURN doc\n   * `);\n   * const docs = await cursor.all();\n   * ```\n   */\n  lookupByKeys(keys: string[]): Promise<Edge<T>[]>;\n\n  /**\n   * Performs a fulltext query in the given `attribute` on the collection.\n   *\n   * @param attribute - Name of the field to search.\n   * @param query - Fulltext query string to search for.\n   * @param options - Options for performing the fulltext query.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * // const cursor = await collection.fulltext(\"article\", \"needle\");\n   * const cursor = await db.query(aql`\n   *   FOR doc IN FULLTEXT(${collection}, \"article\", \"needle\")\n   *   RETURN doc\n   * `);\n   * ```\n   */\n  fulltext(\n    attribute: string,\n    query: string,\n    options?: SimpleQueryFulltextOptions\n  ): Promise<ArrayCursor<Edge<T>>>;\n  //#endregion\n\n  //#region edges\n  /**\n   * Retrieves a list of all edges of the document matching the given\n   * `selector`.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"edges\");\n   * await collection.import([\n   *   [\"_key\", \"_from\", \"_to\"],\n   *   [\"x\", \"vertices/a\", \"vertices/b\"],\n   *   [\"y\", \"vertices/a\", \"vertices/c\"],\n   *   [\"z\", \"vertices/d\", \"vertices/a\"],\n   * ]);\n   * const edges = await collection.edges(\"vertices/a\");\n   * console.log(edges.map((edge) => edge._key)); // [\"x\", \"y\", \"z\"]\n   * ```\n   */\n  edges(\n    selector: DocumentSelector\n  ): Promise<ArangoResponseMetadata & CollectionEdgesResult<T>>;\n  /**\n   * Retrieves a list of all incoming edges of the document matching the given\n   * `selector`.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"edges\");\n   * await collection.import([\n   *   [\"_key\", \"_from\", \"_to\"],\n   *   [\"x\", \"vertices/a\", \"vertices/b\"],\n   *   [\"y\", \"vertices/a\", \"vertices/c\"],\n   *   [\"z\", \"vertices/d\", \"vertices/a\"],\n   * ]);\n   * const edges = await collection.inEdges(\"vertices/a\");\n   * console.log(edges.map((edge) => edge._key)); // [\"z\"]\n   * ```\n   */\n  inEdges(\n    selector: DocumentSelector\n  ): Promise<ArangoResponseMetadata & CollectionEdgesResult<T>>;\n  /**\n   * Retrieves a list of all outgoing edges of the document matching the given\n   * `selector`.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"edges\");\n   * await collection.import([\n   *   [\"_key\", \"_from\", \"_to\"],\n   *   [\"x\", \"vertices/a\", \"vertices/b\"],\n   *   [\"y\", \"vertices/a\", \"vertices/c\"],\n   *   [\"z\", \"vertices/d\", \"vertices/a\"],\n   * ]);\n   * const edges = await collection.outEdges(\"vertices/a\");\n   * console.log(edges.map((edge) => edge._key)); // [\"x\", \"y\"]\n   * ```\n   */\n  outEdges(\n    selector: DocumentSelector\n  ): Promise<ArangoResponseMetadata & CollectionEdgesResult<T>>;\n\n  /**\n   * Performs a traversal starting from the given `startVertex` and following\n   * edges contained in this edge collection.\n   *\n   * Throws an exception when passed a document or `_id` from a different\n   * collection.\n   *\n   * See also {@link Graph.traversal}.\n   *\n   * @param startVertex - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a document from this collection).\n   * @param options - Options for performing the traversal.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"edges\");\n   * await collection.import([\n   *   [\"_key\", \"_from\", \"_to\"],\n   *   [\"x\", \"vertices/a\", \"vertices/b\"],\n   *   [\"y\", \"vertices/b\", \"vertices/c\"],\n   *   [\"z\", \"vertices/c\", \"vertices/d\"],\n   * ]);\n   * const result = await collection.traversal(\"vertices/a\", {\n   *   direction: \"outbound\",\n   *   init: \"result.vertices = [];\",\n   *   visitor: \"result.vertices.push(vertex._key);\",\n   * });\n   * console.log(result.vertices); // [\"a\", \"b\", \"c\", \"d\"]\n   * ```\n   */\n  traversal(\n    startVertex: DocumentSelector,\n    options?: TraversalOptions\n  ): Promise<any>;\n  //#endregion\n}\n\n/**\n * @internal\n * @hidden\n */\nexport class Collection<T extends Record<string, any> = any>\n  implements EdgeCollection<T>, DocumentCollection<T>\n{\n  //#region attributes\n  protected _name: string;\n  protected _db: Database;\n  //#endregion\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string) {\n    this._name = name.normalize(\"NFC\");\n    this._db = db;\n  }\n\n  //#region internals\n  protected _get<T extends Record<string, any>>(path: string, qs?: any) {\n    return this._db.request(\n      {\n        path: `/_api/collection/${encodeURIComponent(this._name)}/${path}`,\n        qs,\n      },\n      (res) => res.body as ArangoResponseMetadata & T\n    );\n  }\n\n  protected _put<T extends Record<string, any>>(path: string, body?: any) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${encodeURIComponent(this._name)}/${path}`,\n        body,\n      },\n      (res) => res.body as ArangoResponseMetadata & T\n    );\n  }\n  //#endregion\n\n  //#region metadata\n  get isArangoCollection(): true {\n    return true;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get() {\n    return this._db.request(\n      { path: `/_api/collection/${encodeURIComponent(this._name)}` },\n      (res) => res.body\n    );\n  }\n\n  async exists() {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === COLLECTION_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  create(\n    options?: CreateCollectionOptions & {\n      type?: CollectionType;\n    }\n  ) {\n    const {\n      waitForSyncReplication = undefined,\n      enforceReplicationFactor = undefined,\n      ...opts\n    } = options || {};\n    const qs: Params = {};\n    if (typeof waitForSyncReplication === \"boolean\") {\n      qs.waitForSyncReplication = waitForSyncReplication ? 1 : 0;\n    }\n    if (typeof enforceReplicationFactor === \"boolean\") {\n      qs.enforceReplicationFactor = enforceReplicationFactor ? 1 : 0;\n    }\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/collection\",\n        qs,\n        body: {\n          ...opts,\n          name: this._name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  properties(properties?: CollectionPropertiesOptions) {\n    if (!properties)\n      return this._get<CollectionMetadata & CollectionProperties>(\"properties\");\n    return this._put<CollectionMetadata & CollectionProperties>(\n      \"properties\",\n      properties\n    );\n  }\n\n  count() {\n    return this._get<\n      CollectionMetadata & CollectionProperties & { count: number }\n    >(\"count\");\n  }\n\n  async recalculateCount() {\n    const body = await this._put<{ result: boolean }>(\"recalculateCount\");\n    return body.result;\n  }\n\n  figures(details = false): Promise<\n    CollectionMetadata &\n      CollectionProperties & {\n        count: number;\n        figures: Dict<any>;\n      } & ArangoResponseMetadata\n  > {\n    return this._db.request({\n      path: `/_api/collection/${encodeURIComponent(this._name)}/figures`,\n      qs: { details },\n    });\n  }\n\n  revision() {\n    return this._get<\n      CollectionMetadata & CollectionProperties & { revision: string }\n    >(\"revision\");\n  }\n\n  checksum(options?: CollectionChecksumOptions) {\n    return this._get<\n      CollectionMetadata & { revision: string; checksum: string }\n    >(\"checksum\", options);\n  }\n\n  load(count?: boolean) {\n    return this._put<CollectionMetadata & { count: number }>(\n      \"load\",\n      typeof count === \"boolean\" ? { count } : undefined\n    );\n  }\n\n  async loadIndexes() {\n    const body = await this._put<{ result: boolean }>(\"loadIndexesIntoMemory\");\n    return body.result;\n  }\n\n  unload() {\n    return this._put<CollectionMetadata>(\"unload\");\n  }\n\n  async rename(newName: string) {\n    const result = await this._db.renameCollection(this._name, newName);\n    this._name = newName.normalize(\"NFC\");\n    return result;\n  }\n\n  async rotate() {\n    const body = await this._put<{ result: boolean }>(\"rotate\");\n    return body.result;\n  }\n\n  truncate() {\n    return this._put<CollectionMetadata>(\"truncate\");\n  }\n\n  drop(options?: CollectionDropOptions) {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/collection/${encodeURIComponent(this._name)}`,\n        qs: options,\n      },\n      (res) => res.body\n    );\n  }\n  //#endregion\n\n  //#region crud\n  getResponsibleShard(document: Partial<Document<T>>): Promise<string> {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${encodeURIComponent(\n          this._name\n        )}/responsibleShard`,\n        body: document,\n      },\n      (res) => res.body.shardId\n    );\n  }\n\n  documentId(selector: DocumentSelector): string {\n    return _documentHandle(selector, this._name);\n  }\n\n  async documentExists(selector: DocumentSelector): Promise<boolean> {\n    try {\n      return await this._db.request(\n        {\n          method: \"HEAD\",\n          path: `/_api/document/${encodeURI(\n            _documentHandle(selector, this._name)\n          )}`,\n        },\n        () => true\n      );\n    } catch (err) {\n      if (err.code === 404) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  documents(\n    selectors: (string | ObjectWithKey)[],\n    options: CollectionBatchReadOptions = {}\n  ) {\n    const { allowDirtyRead = undefined } = options;\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/document/${encodeURIComponent(this._name)}`,\n        qs: { onlyget: true },\n        allowDirtyRead,\n        body: selectors,\n      },\n      (res) => res.body\n    );\n  }\n\n  async document(\n    selector: DocumentSelector,\n    options: boolean | CollectionReadOptions = {}\n  ) {\n    if (typeof options === \"boolean\") {\n      options = { graceful: options };\n    }\n    const { allowDirtyRead = undefined, graceful = false } = options;\n    const result = this._db.request(\n      {\n        path: `/_api/document/${encodeURI(\n          _documentHandle(selector, this._name)\n        )}`,\n        allowDirtyRead,\n      },\n      (res) => res.body\n    );\n    if (!graceful) return result;\n    try {\n      return await result;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  save(data: DocumentData<T>, options?: CollectionInsertOptions) {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/document/${encodeURIComponent(this._name)}`,\n        body: data,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  saveAll(data: Array<DocumentData<T>>, options?: CollectionInsertOptions) {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/document/${encodeURIComponent(this._name)}`,\n        body: data,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  replace(\n    selector: DocumentSelector,\n    newData: DocumentData<T>,\n    options?: CollectionReplaceOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/document/${encodeURI(\n          _documentHandle(selector, this._name)\n        )}`,\n        body: newData,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  replaceAll(\n    newData: Array<DocumentData<T> & ({ _key: string } | { _id: string })>,\n    options?: CollectionReplaceOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/document/${encodeURIComponent(this._name)}`,\n        body: newData,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  update(\n    selector: DocumentSelector,\n    newData: Patch<DocumentData<T>>,\n    options?: CollectionUpdateOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/document/${encodeURI(\n          _documentHandle(selector, this._name)\n        )}`,\n        body: newData,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  updateAll(\n    newData: Array<\n      Patch<DocumentData<T>> & ({ _key: string } | { _id: string })\n    >,\n    options?: CollectionUpdateOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/document/${encodeURIComponent(this._name)}`,\n        body: newData,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  remove(selector: DocumentSelector, options?: CollectionRemoveOptions) {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/document/${encodeURI(\n          _documentHandle(selector, this._name)\n        )}`,\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  removeAll(selectors: DocumentSelector[], options?: CollectionRemoveOptions) {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/document/${encodeURIComponent(this._name)}`,\n        body: selectors.map((selector) =>\n          _documentHandle(selector, this._name)\n        ),\n        qs: options,\n      },\n      (res) => (options && options.silent ? undefined : res.body)\n    );\n  }\n\n  import(\n    data: Buffer | Blob | string | any[],\n    options: CollectionImportOptions & {\n      type?: \"documents\" | \"list\" | \"auto\";\n    } = {}\n  ): Promise<CollectionImportResult> {\n    const qs = { ...options, collection: this._name };\n    if (Array.isArray(data)) {\n      qs.type = Array.isArray(data[0]) ? undefined : \"documents\";\n      const lines = data as any[];\n      data = lines.map((line) => JSON.stringify(line)).join(\"\\r\\n\") + \"\\r\\n\";\n    }\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/import\",\n        body: data,\n        isBinary: true,\n        qs,\n      },\n      (res) => res.body\n    );\n  }\n  //#endregion\n\n  //#region edges\n  protected _edges(selector: DocumentSelector, direction?: \"in\" | \"out\") {\n    return this._db.request(\n      {\n        path: `/_api/edges/${encodeURIComponent(this._name)}`,\n        qs: {\n          direction,\n          vertex: _documentHandle(selector, this._name, false),\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  edges(vertex: DocumentSelector) {\n    return this._edges(vertex);\n  }\n\n  inEdges(vertex: DocumentSelector) {\n    return this._edges(vertex, \"in\");\n  }\n\n  outEdges(vertex: DocumentSelector) {\n    return this._edges(vertex, \"out\");\n  }\n\n  traversal(startVertex: DocumentSelector, options?: TraversalOptions) {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/traversal\",\n        body: {\n          ...options,\n          startVertex,\n          edgeCollection: this._name,\n        },\n      },\n      (res) => res.body.result\n    );\n  }\n  //#endregion\n\n  //#region simple queries\n  list(type: SimpleQueryListType = \"id\") {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/all-keys\",\n        body: { type, collection: this._name },\n      },\n      (res) =>\n        new BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items\n    );\n  }\n\n  all(options?: SimpleQueryAllOptions) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/all\",\n        body: {\n          ...options,\n          collection: this._name,\n        },\n      },\n      (res) =>\n        new BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items\n    );\n  }\n\n  any() {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/any\",\n        body: { collection: this._name },\n      },\n      (res) => res.body.document\n    );\n  }\n\n  byExample(\n    example: Partial<DocumentData<T>>,\n    options?: SimpleQueryByExampleOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/by-example\",\n        body: {\n          ...options,\n          example,\n          collection: this._name,\n        },\n      },\n      (res) =>\n        new BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items\n    );\n  }\n\n  firstExample(example: Partial<DocumentData<T>>) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/first-example\",\n        body: {\n          example,\n          collection: this._name,\n        },\n      },\n      (res) => res.body.document\n    );\n  }\n\n  removeByExample(\n    example: Partial<DocumentData<T>>,\n    options?: SimpleQueryRemoveByExampleOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/remove-by-example\",\n        body: {\n          ...options,\n          example,\n          collection: this._name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  replaceByExample(\n    example: Partial<DocumentData<T>>,\n    newValue: DocumentData<T>,\n    options?: SimpleQueryReplaceByExampleOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/replace-by-example\",\n        body: {\n          ...options,\n          example,\n          newValue,\n          collection: this._name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  updateByExample(\n    example: Partial<DocumentData<T>>,\n    newValue: Patch<DocumentData<T>>,\n    options?: SimpleQueryUpdateByExampleOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/update-by-example\",\n        body: {\n          ...options,\n          example,\n          newValue,\n          collection: this._name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  lookupByKeys(keys: string[]) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/lookup-by-keys\",\n        body: {\n          keys,\n          collection: this._name,\n        },\n      },\n      (res) => res.body.documents\n    );\n  }\n\n  removeByKeys(keys: string[], options?: SimpleQueryRemoveByKeysOptions) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/remove-by-keys\",\n        body: {\n          options: options,\n          keys,\n          collection: this._name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n  //#endregion\n\n  //#region indexes\n  indexes() {\n    return this._db.request(\n      {\n        path: \"/_api/index\",\n        qs: { collection: this._name },\n      },\n      (res) => res.body.indexes\n    );\n  }\n\n  index(selector: IndexSelector) {\n    return this._db.request(\n      {\n        path: `/_api/index/${encodeURI(_indexHandle(selector, this._name))}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  ensureIndex(\n    options:\n      | EnsureHashIndexOptions\n      | EnsureSkiplistIndexOptions\n      | EnsurePersistentIndexOptions\n      | EnsureGeoIndexOptions\n      | EnsureFulltextIndexOptions\n      | EnsureTtlIndexOptions\n      | EnsureZkdIndexOptions\n  ) {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: options,\n        qs: { collection: this._name },\n      },\n      (res) => res.body\n    );\n  }\n\n  dropIndex(selector: IndexSelector) {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/index/${encodeURI(_indexHandle(selector, this._name))}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  fulltext(\n    attribute: string,\n    query: string,\n    { index, ...options }: SimpleQueryFulltextOptions = {}\n  ) {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/fulltext\",\n        body: {\n          ...options,\n          index: index ? _indexHandle(index, this._name) : undefined,\n          attribute,\n          query,\n          collection: this._name,\n        },\n      },\n      (res) =>\n        new BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items\n    );\n  }\n\n  compact() {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${this._name}/compact`,\n      },\n      (res) => res.body\n    );\n  }\n  //#endregion\n}\n","/**\n * Wrapper around the `es6-error` module.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Es6Error = require(\"es6-error\");\n\n/**\n * @internal\n * @hidden\n */\nexport const ExtendableError: typeof Error = Es6Error.default || Es6Error;\n\n/**\n * @internal\n * @hidden\n */\nexport type ExtendableError = typeof Error;\n","/**\n * ```ts\n * import type { ArangoError, HttpError } from \"arangojs/error\";\n * ```\n *\n * The \"error\" module provides types and interfaces for TypeScript related\n * to arangojs error handling.\n *\n * @packageDocumentation\n */\nimport { ExtendableError } from \"./lib/error\";\n\nconst messages: { [key: number]: string } = {\n  0: \"Network Error\",\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  402: \"Payment Required\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  405: \"Method Not Allowed\",\n  406: \"Not Acceptable\",\n  407: \"Proxy Authentication Required\",\n  408: \"Request Timeout\",\n  409: \"Conflict\",\n  410: \"Gone\",\n  411: \"Length Required\",\n  412: \"Precondition Failed\",\n  413: \"Payload Too Large\",\n  414: \"Request-URI Too Long\",\n  415: \"Unsupported Media Type\",\n  416: \"Requested Range Not Satisfiable\",\n  417: \"Expectation Failed\",\n  418: \"I'm a teapot\",\n  421: \"Misdirected Request\",\n  422: \"Unprocessable Entity\",\n  423: \"Locked\",\n  424: \"Failed Dependency\",\n  426: \"Upgrade Required\",\n  428: \"Precondition Required\",\n  429: \"Too Many Requests\",\n  431: \"Request Header Fields Too Large\",\n  444: \"Connection Closed Without Response\",\n  451: \"Unavailable For Legal Reasons\",\n  499: \"Client Closed Request\",\n  500: \"Internal Server Error\",\n  501: \"Not Implemented\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n  504: \"Gateway Timeout\",\n  505: \"HTTP Version Not Supported\",\n  506: \"Variant Also Negotiates\",\n  507: \"Insufficient Storage\",\n  508: \"Loop Detected\",\n  510: \"Not Extended\",\n  511: \"Network Authentication Required\",\n  599: \"Network Connect Timeout Error\",\n};\n\nconst nativeErrorKeys = [\n  \"fileName\",\n  \"lineNumber\",\n  \"columnNumber\",\n  \"stack\",\n  \"description\",\n  \"number\",\n] as (keyof Error)[];\n\n/**\n * Indicates whether the given value represents an {@link ArangoError}.\n *\n * @param error - A value that might be an `ArangoError`.\n */\nexport function isArangoError(error: any): error is ArangoError {\n  return Boolean(error && error.isArangoError);\n}\n\n/**\n * Indicates whether the given value represents an ArangoDB error response.\n *\n * @internal\n */\nexport function isArangoErrorResponse(body: any): boolean {\n  return (\n    body &&\n    body.hasOwnProperty(\"error\") &&\n    body.hasOwnProperty(\"code\") &&\n    body.hasOwnProperty(\"errorMessage\") &&\n    body.hasOwnProperty(\"errorNum\")\n  );\n}\n\n/**\n * Indicates whether the given value represents a Node.js `SystemError`.\n */\nexport function isSystemError(err: any): err is SystemError {\n  return (\n    Object.getPrototypeOf(err) === Error.prototype &&\n    err.hasOwnProperty(\"code\") &&\n    err.hasOwnProperty(\"errno\") &&\n    err.hasOwnProperty(\"syscall\")\n  );\n}\n\n/**\n * Interface representing a Node.js `SystemError`.\n */\nexport interface SystemError extends Error {\n  code: string;\n  errno: number | string;\n  syscall: string;\n}\n\n/**\n * Represents an error returned by ArangoDB.\n */\nexport class ArangoError extends ExtendableError {\n  name = \"ArangoError\";\n  /**\n   * ArangoDB error code.\n   *\n   * See {@link https://www.arangodb.com/docs/stable/appendix-error-codes.html | ArangoDB error documentation}.\n   */\n  errorNum: number;\n  /**\n   * HTTP status code included in the server error response object.\n   */\n  code: number;\n  /**\n   * Server response object.\n   */\n  response: any;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(response: any) {\n    super();\n    this.response = response;\n    this.message = response.body.errorMessage;\n    this.errorNum = response.body.errorNum;\n    this.code = response.body.code;\n    const err = new Error(this.message);\n    err.name = this.name;\n    for (const key of nativeErrorKeys) {\n      if (err[key]) this[key] = err[key]!;\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB error.\n   */\n  get isArangoError(): true {\n    return true;\n  }\n\n  toJSON() {\n    return {\n      error: true,\n      errorMessage: this.message,\n      errorNum: this.errorNum,\n      code: this.code,\n    };\n  }\n}\n\n/**\n * Represents a plain HTTP error response.\n */\nexport class HttpError extends ExtendableError {\n  name = \"HttpError\";\n  /**\n   * Server response object.\n   */\n  response: any;\n  /**\n   * HTTP status code of the server response.\n   */\n  code: number;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(response: any) {\n    super();\n    this.response = response;\n    this.code = response.statusCode || 500;\n    this.message = messages[this.code] || messages[500];\n    const err = new Error(this.message);\n    err.name = this.name;\n    for (const key of nativeErrorKeys) {\n      if (err[key]) this[key] = err[key]!;\n    }\n  }\n\n  toJSON() {\n    return {\n      error: true,\n      code: this.code,\n    };\n  }\n}\n","/**\n * ```ts\n * import type { Document, Edge } from \"arangojs/documents\";\n * ```\n *\n * The \"documents\" module provides document/edge related types for TypeScript.\n *\n * @packageDocumentation\n */\n\n/**\n * Common ArangoDB metadata properties of a document.\n */\nexport type DocumentMetadata = {\n  /**\n   * Key of the document, which uniquely identifies the document within its\n   * collection.\n   */\n  _key: string;\n  /**\n   * Unique ID of the document, which is composed of the collection name\n   * and the document `_key`.\n   */\n  _id: string;\n  /**\n   * Revision of the document data.\n   */\n  _rev: string;\n};\n\n/**\n * ArangoDB metadata defining the relations of an edge document.\n */\nexport type EdgeMetadata = {\n  /**\n   * Unique ID of the document that acts as the edge's start vertex.\n   */\n  _from: string;\n  /**\n   * Unique ID of the document that acts as the edge's end vertex.\n   */\n  _to: string;\n};\n\n/**\n * Type representing an object that can be stored in a collection.\n */\nexport type DocumentData<T extends Record<string, any> = any> = T &\n  Partial<DocumentMetadata> &\n  Partial<EdgeMetadata>;\n\n/**\n * Type representing an object that can be stored in an edge collection.\n */\nexport type EdgeData<T extends Record<string, any> = any> = T &\n  Partial<DocumentMetadata> &\n  EdgeMetadata;\n\n/**\n * Type representing a document stored in a collection.\n */\nexport type Document<T extends Record<string, any> = any> = T &\n  DocumentMetadata &\n  Partial<EdgeMetadata>;\n\n/**\n * Type representing an edge document stored in an edge collection.\n */\nexport type Edge<T extends Record<string, any> = any> = T &\n  DocumentMetadata &\n  EdgeMetadata;\n\n/**\n * Type representing patch data for a given object type to represent a payload\n * ArangoDB can apply in a document PATCH request (i.e. a partial update).\n *\n * This differs from `Partial` in that it also applies itself to any nested\n * objects recursively.\n */\nexport type Patch<T = Record<string, any>> = {\n  [K in keyof T]?: T[K] | Patch<T[K]>;\n};\n\n/**\n * An object with an ArangoDB document `_id` property.\n *\n * See {@link DocumentMetadata}.\n */\nexport type ObjectWithId = {\n  [key: string]: any;\n  _id: string;\n};\n\n/**\n * An object with an ArangoDB document `_key` property.\n *\n * See {@link DocumentMetadata}.\n */\nexport type ObjectWithKey = {\n  [key: string]: any;\n  _key: string;\n};\n\n/**\n * A value that can be used to identify a document within a collection in\n * arangojs methods, i.e. a partial ArangoDB document or the value of a\n * document's `_key` or `_id`.\n *\n * See {@link DocumentMetadata}.\n */\nexport type DocumentSelector = ObjectWithId | ObjectWithKey | string;\n\n/**\n * @internal\n * @hidden\n */\nexport function _documentHandle(\n  selector: DocumentSelector,\n  collectionName: string,\n  strict: boolean = true\n): string {\n  if (typeof selector !== \"string\") {\n    if (selector._id) {\n      return _documentHandle(selector._id, collectionName);\n    }\n    if (selector._key) {\n      return _documentHandle(selector._key, collectionName);\n    }\n    throw new Error(\n      \"Document handle must be a string or an object with a _key or _id attribute\"\n    );\n  }\n  if (selector.includes(\"/\")) {\n    const [head, ...tail] = selector.split(\"/\");\n    const normalizedHead = head.normalize(\"NFC\");\n    if (strict && normalizedHead !== collectionName) {\n      throw new Error(\n        `Document ID \"${selector}\" does not match collection name \"${collectionName}\"`\n      );\n    }\n    return [normalizedHead, ...tail].join(\"/\");\n  }\n  return `${collectionName}/${selector}`;\n}\n","/**\n * Error codes handled by arangojs.\n *\n * See also {@link https://www.arangodb.com/docs/stable/appendix-error-codes.html | ArangoDB error documentation}.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\nexport const TRANSACTION_NOT_FOUND = 10;\nexport const ANALYZER_NOT_FOUND = 1202;\nexport const DOCUMENT_NOT_FOUND = 1202;\nexport const COLLECTION_NOT_FOUND = 1203;\nexport const VIEW_NOT_FOUND = 1203;\nexport const DATABASE_NOT_FOUND = 1228;\nexport const GRAPH_NOT_FOUND = 1924;\n","/**\n * ```js\n * import { aql } from \"arangojs/aql\";\n * ```\n *\n * The \"aql\" module provides the {@link aql} template string handler and\n * helper functions, as well as associated types and interfaces for TypeScript.\n *\n * The aql function and namespace is also re-exported by the \"index\" module.\n *\n * @packageDocumentation\n */\nimport { ArangoCollection, isArangoCollection } from \"./collection\";\nimport { Dict } from \"./connection\";\nimport { Graph, isArangoGraph } from \"./graph\";\nimport { isArangoView, View } from \"./view\";\n\n/**\n * Generic AQL query object consisting of an AQL query string and its bind\n * parameters.\n */\nexport interface AqlQuery {\n  /**\n   * An AQL query string.\n   */\n  query: string;\n  /**\n   * An object mapping AQL bind parameter names to their respective values.\n   *\n   * Names of parameters representing collections are prefixed with an\n   * at-symbol.\n   */\n  bindVars: Dict<any>;\n}\n\n/**\n * Derived type representing AQL query objects generated by the AQL helper\n * functions and the AQL template string handler. These objects can be fed\n * back into these helper functions to be inlined or merged in complex queries.\n *\n * @internal\n */\nexport interface GeneratedAqlQuery extends AqlQuery {\n  /**\n   * @internal\n   * @hidden\n   */\n  _source: () => { strings: string[]; args: AqlValue[] };\n}\n\n/**\n * An object representing a trusted AQL literal that will be inlined directly\n * when used in an AQL template or passed to AQL helper functions.\n *\n * Arbitrary values can be converted to trusted AQL literals by passing them\n * to the {@link aql.literal} helper function.\n */\nexport interface AqlLiteral {\n  /**\n   * @internal\n   *\n   * Returns a string representation of this AQL literal that can be inlined\n   * in an AQL template.\n   */\n  toAQL: () => string;\n}\n\n/**\n * A value that can be used in an AQL template string or passed to an AQL\n * helper function.\n */\nexport type AqlValue =\n  | ArangoCollection\n  | View\n  | Graph\n  | GeneratedAqlQuery\n  | AqlLiteral\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | Record<string, any>\n  | any[];\n\n/**\n * Indicates whether the given value is an {@link AqlQuery}.\n *\n * @param query - A value that might be an `AqlQuery`.\n */\nexport function isAqlQuery(query: any): query is AqlQuery {\n  return Boolean(query && typeof query.query === \"string\" && query.bindVars);\n}\n\n/**\n * Indicates whether the given value is a {@link GeneratedAqlQuery}.\n *\n * @param query - A value that might be a `GeneratedAqlQuery`.\n *\n * @internal\n * @hidden\n */\nexport function isGeneratedAqlQuery(query: any): query is GeneratedAqlQuery {\n  return isAqlQuery(query) && typeof (query as any)._source === \"function\";\n}\n\n/**\n * Indicates whether the given value is an {@link AqlLiteral}.\n *\n * @param literal - A value that might be an `AqlLiteral`.\n */\nexport function isAqlLiteral(literal: any): literal is AqlLiteral {\n  return Boolean(literal && typeof literal.toAQL === \"function\");\n}\n\n/**\n * Template string handler (template tag) for AQL queries.\n *\n * The `aql` tag can be used to write complex AQL queries as multi-line strings\n * without having to worry about `bindVars` and the distinction between\n * collections and regular parameters.\n *\n * Tagged template strings will return an {@link AqlQuery} object with\n * `query` and `bindVars` attributes reflecting any interpolated values.\n *\n * Any {@link ArangoCollection} instance used in a query string will be\n * recognized as a collection reference and generate an AQL collection bind\n * parameter instead of a regular AQL value bind parameter.\n *\n * **Note**: you should always use the `aql` template tag when writing\n * dynamic AQL queries instead of using untagged (normal) template strings.\n * Untagged template strings will inline any interpolated values and return\n * a plain string as result. The `aql` template tag will only inline references\n * to the interpolated values and produce an AQL query object containing both\n * the query and the values. This prevents most injection attacks when using\n * untrusted values in dynamic queries.\n *\n * @example\n * ```js\n * // Some user-supplied string that may be malicious\n * const untrustedValue = req.body.email;\n *\n * // Without aql tag: BAD! DO NOT DO THIS!\n * const badQuery = `\n *   FOR user IN users\n *   FILTER user.email == \"${untrustedValue}\"\n *   RETURN user\n * `;\n * // e.g. if untrustedValue is '\" || user.admin == true || \"':\n * // Query:\n * //   FOR user IN users\n * //   FILTER user.email == \"\" || user.admin == true || \"\"\n * //   RETURN user\n *\n * // With the aql tag: GOOD! MUCH SAFER!\n * const betterQuery = aql`\n *   FOR user IN users\n *   FILTER user.email == ${untrustedValue}\n *   RETURN user\n * `;\n * // Query:\n * //   FOR user IN users\n * //   FILTER user.email == @value0\n * //   RETURN user\n * // Bind parameters:\n * //   value0 -> untrustedValue\n * ```\n *\n * @example\n * ```js\n * const collection = db.collection(\"some-collection\");\n * const minValue = 23;\n * const result = await db.query(aql`\n *   FOR d IN ${collection}\n *   FILTER d.num > ${minValue}\n *   RETURN d\n * `);\n *\n * // Equivalent raw query object\n * const result2 = await db.query({\n *   query: `\n *     FOR d IN @@collection\n *     FILTER d.num > @minValue\n *     RETURN d\n *   `,\n *   bindVars: {\n *     \"@collection\": collection.name,\n *     minValue: minValue\n *   }\n * });\n * ```\n *\n * @example\n * ```js\n * const collection = db.collection(\"some-collection\");\n * const color = \"green\";\n * const filter = aql`FILTER d.color == ${color}'`;\n * const result = await db.query(aql`\n *   FOR d IN ${collection}\n *   ${filter}\n *   RETURN d\n * `);\n * ```\n */\nexport function aql(\n  templateStrings: TemplateStringsArray,\n  ...args: AqlValue[]\n): GeneratedAqlQuery {\n  const strings = [...templateStrings];\n  const bindVars: Dict<any> = {};\n  const bindValues = [];\n  let query = strings[0];\n  for (let i = 0; i < args.length; i++) {\n    const rawValue = args[i];\n    let value = rawValue;\n    if (isGeneratedAqlQuery(rawValue)) {\n      const src = rawValue._source();\n      if (src.args.length) {\n        query += src.strings[0];\n        args.splice(i, 1, ...src.args);\n        strings.splice(\n          i,\n          2,\n          strings[i] + src.strings[0],\n          ...src.strings.slice(1, src.args.length),\n          src.strings[src.args.length] + strings[i + 1]\n        );\n      } else {\n        query += rawValue.query + strings[i + 1];\n        args.splice(i, 1);\n        strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\n      }\n      i -= 1;\n      continue;\n    }\n    if (rawValue === undefined) {\n      query += strings[i + 1];\n      continue;\n    }\n    if (isAqlLiteral(rawValue)) {\n      query += `${rawValue.toAQL()}${strings[i + 1]}`;\n      continue;\n    }\n    const index = bindValues.indexOf(rawValue);\n    const isKnown = index !== -1;\n    let name = `value${isKnown ? index : bindValues.length}`;\n    if (\n      isArangoCollection(rawValue) ||\n      isArangoGraph(rawValue) ||\n      isArangoView(rawValue)\n    ) {\n      name = `@${name}`;\n      value = rawValue.name;\n    }\n    if (!isKnown) {\n      bindValues.push(rawValue);\n      bindVars[name] = value;\n    }\n    query += `@${name}${strings[i + 1]}`;\n  }\n  return {\n    query,\n    bindVars,\n    _source: () => ({ strings, args }),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace aql {\n  /**\n   * Marks an arbitrary scalar value (i.e. a string, number or boolean) as\n   * safe for being inlined directly into AQL queries when used in an `aql`\n   * template string, rather than being converted into a bind parameter.\n   *\n   * **Note**: Nesting `aql` template strings is a much safer alternative for\n   * most use cases. This low-level helper function only exists to help with\n   * rare edge cases where a trusted AQL query fragment must be read from a\n   * string (e.g. when reading query fragments from JSON) and should only be\n   * used as a last resort.\n   *\n   * @example\n   * ```js\n   * // BAD! DO NOT DO THIS!\n   * const sortDirection = aql.literal('ASC');\n   *\n   * // GOOD! DO THIS INSTEAD!\n   * const sortDirection = aql`ASC`;\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! DO NOT DO THIS!\n   * const filterColor = aql.literal('FILTER d.color == \"green\"');\n   * const result = await db.query(aql`\n   *   FOR d IN some-collection\n   *   ${filterColor}\n   *   RETURN d\n   * `);\n   *\n   * // GOOD! DO THIS INSTEAD!\n   * const color = \"green\";\n   * const filterColor = aql`FILTER d.color === ${color}`;\n   * const result = await db.query(aql`\n   *   FOR d IN some-collection\n   *   ${filterColor}\n   *   RETURN d\n   * `);\n   * ```\n   *\n   * @example\n   * ```js\n   * // WARNING: We explicitly trust the environment variable to be safe!\n   * const filter = aql.literal(process.env.FILTER_STATEMENT);\n   * const users = await db.query(aql`\n   *   FOR user IN users\n   *   ${filter}\n   *   RETURN user\n   * `);\n   * ```\n   */\n  export function literal(\n    value: string | number | boolean | AqlLiteral | null | undefined\n  ): AqlLiteral {\n    if (isAqlLiteral(value)) {\n      return value;\n    }\n    return {\n      toAQL() {\n        if (value === undefined) {\n          return \"\";\n        }\n        return String(value);\n      },\n    };\n  }\n\n  /**\n   * Constructs {@link AqlQuery} objects from an array of arbitrary values.\n   *\n   * **Note**: Nesting `aql` template strings is a much safer alternative\n   * for most use cases. This low-level helper function only exists to\n   * complement the `aql` tag when constructing complex queries from dynamic\n   * arrays of query fragments.\n   *\n   * @param values - Array of values to join. These values will behave exactly\n   * like values interpolated in an `aql` template string.\n   * @param sep - Seperator to insert between values. This value will behave\n   * exactly like a value passed to {@link aql.literal}, i.e. it will be\n   * inlined as-is, rather than being converted into a bind parameter.\n   *\n   * @example\n   * ```js\n   * const users = db.collection(\"users\");\n   * const filters = [];\n   * if (adminsOnly) filters.push(aql`FILTER user.admin`);\n   * if (activeOnly) filters.push(aql`FILTER user.active`);\n   * const result = await db.query(aql`\n   *   FOR user IN ${users}\n   *   ${aql.join(filters)}\n   *   RETURN user\n   * `);\n   * ```\n   *\n   * @example\n   * ```js\n   * const users = db.collection(\"users\");\n   * const keys = [\"jreyes\", \"ghermann\"];\n   *\n   * // BAD! NEEDLESSLY COMPLEX!\n   * const docs = keys.map(key => aql`DOCUMENT(${users}, ${key}`));\n   * const result = await db.query(aql`\n   *   FOR user IN [\n   *     ${aql.join(docs, \", \")}\n   *   ]\n   *   RETURN user\n   * `);\n   * // Query:\n   * //   FOR user IN [\n   * //     DOCUMENT(@@value0, @value1), DOCUMENT(@@value0, @value2)\n   * //   ]\n   * //   RETURN user\n   * // Bind parameters:\n   * //   @value0 -> \"users\"\n   * //   value1 -> \"jreyes\"\n   * //   value2 -> \"ghermann\"\n   *\n   * // GOOD! MUCH SIMPLER!\n   * const result = await db.query(aql`\n   *   FOR key IN ${keys}\n   *   LET user = DOCUMENT(${users}, key)\n   *   RETURN user\n   * `);\n   * // Query:\n   * //   FOR user IN @value0\n   * //   LET user = DOCUMENT(@@value1, key)\n   * //   RETURN user\n   * // Bind parameters:\n   * //   value0 -> [\"jreyes\", \"ghermann\"]\n   * //   @value1 -> \"users\"\n   * ```\n   */\n  export function join(\n    values: AqlValue[],\n    sep: string = \" \"\n  ): GeneratedAqlQuery {\n    if (!values.length) {\n      return aql``;\n    }\n    if (values.length === 1) {\n      return aql`${values[0]}`;\n    }\n    return aql(\n      [\"\", ...Array(values.length - 1).fill(sep), \"\"] as any,\n      ...values\n    );\n  }\n}\n","/**\n * ```ts\n * import type { ArrayCursor, BatchedArrayCursor } from \"arangojs/cursor\";\n * ```\n *\n * The \"cursor\" module provides cursor-related interfaces for TypeScript.\n *\n * @packageDocumentation\n */\nimport { LinkedList } from \"x3-linkedlist\";\nimport { Dict } from \"./connection\";\nimport { Database } from \"./database\";\n\n/**\n * Additional information about the cursor.\n */\nexport interface CursorExtras {\n  /**\n   * Warnings encountered while executing the query.\n   */\n  warnings: {\n    code: number;\n    message: string;\n  }[];\n  /**\n   * Query execution plan for the executed query.\n   */\n  plan?: any;\n  /**\n   * Additional profiling information for the executed query.\n   */\n  profile?: any;\n  /**\n   * Additional statistics about the query execution.\n   */\n  stats?: Dict<any>;\n}\n\ninterface BatchView<T = any> {\n  isEmpty: boolean;\n  more(): Promise<void>;\n  shift(): T | undefined;\n}\n\n/**\n * The `BatchedArrayCursor` provides a batch-wise API to an {@link ArrayCursor}.\n *\n * When using TypeScript, cursors can be cast to a specific item type in order\n * to increase type safety.\n *\n * @param T - Type to use for each item. Defaults to `any`.\n *\n * @example\n * ```ts\n * const db = new Database();\n * const query = aql`FOR x IN 1..5 RETURN x`;\n * const cursor = await db.query(query) as ArrayCursor<number>;\n * const batches = cursor.batches;\n * ```\n *\n * @example\n * ```js\n * const db = new Database();\n * const query = aql`FOR x IN 1..10000 RETURN x`;\n * const cursor = await db.query(query, { batchSize: 10 });\n * for await (const batch of cursor.batches) {\n *   // Process all values in a batch in parallel\n *   await Promise.all(batch.map(\n *     value => asyncProcessValue(value)\n *   ));\n * }\n * ```\n */\nexport class BatchedArrayCursor<T = any> {\n  protected _db: Database;\n  protected _batches: LinkedList<LinkedList<any>>;\n  protected _count?: number;\n  protected _extra: CursorExtras;\n  protected _hasMore: boolean;\n  protected _id: string | undefined;\n  protected _host?: number;\n  protected _allowDirtyRead?: boolean;\n  protected _itemsCursor: ArrayCursor<T>;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(\n    db: Database,\n    body: {\n      extra: any;\n      result: T[];\n      hasMore: boolean;\n      id: string;\n      count: number;\n    },\n    host?: number,\n    allowDirtyRead?: boolean\n  ) {\n    const batches = new LinkedList(\n      body.result.length ? [new LinkedList(body.result)] : []\n    );\n    this._db = db;\n    this._batches = batches;\n    this._id = body.id;\n    this._hasMore = Boolean(body.id && body.hasMore);\n    this._host = host;\n    this._count = body.count;\n    this._extra = body.extra;\n    this._allowDirtyRead = allowDirtyRead;\n    this._itemsCursor = new ArrayCursor(this, {\n      get isEmpty() {\n        return !batches.length;\n      },\n      more: () => this._more(),\n      shift: () => {\n        let batch = batches.first?.value;\n        while (batch && !batch.length) {\n          batches.shift();\n          batch = batches.first?.value;\n        }\n        if (!batch) return undefined;\n        const value = batch.shift();\n        if (!batch.length) batches.shift();\n        return value;\n      },\n    });\n  }\n\n  protected async _more(): Promise<void> {\n    if (!this.hasMore) return;\n    const res = await this._db.request({\n      method: \"PUT\",\n      path: `/_api/cursor/${encodeURIComponent(this._id!)}`,\n      host: this._host,\n      allowDirtyRead: this._allowDirtyRead,\n    });\n    this._batches.push(new LinkedList(res.body.result));\n    this._hasMore = res.body.hasMore;\n  }\n\n  /**\n   * An {@link ArrayCursor} providing item-wise access to the cursor result set.\n   *\n   * See also {@link ArrayCursor.batches}.\n   */\n  get items() {\n    return this._itemsCursor;\n  }\n\n  /**\n   * Additional information about the cursor.\n   */\n  get extra(): Readonly<CursorExtras> {\n    return this._extra;\n  }\n\n  /**\n   * Total number of documents in the query result. Only available if the\n   * `count` option was used.\n   */\n  get count(): number | undefined {\n    return this._count;\n  }\n\n  /**\n   * Whether the cursor has any remaining batches that haven't yet been\n   * fetched. If set to `false`, all batches have been fetched and no\n   * additional requests to the server will be made when consuming any\n   * remaining batches from this cursor.\n   */\n  get hasMore(): boolean {\n    return this._hasMore;\n  }\n\n  /**\n   * Whether the cursor has more batches. If set to `false`, the cursor has\n   * already been depleted and contains no more batches.\n   */\n  get hasNext(): boolean {\n    return this.hasMore || Boolean(this._batches.length);\n  }\n\n  /**\n   * Enables use with `for await` to deplete the cursor by asynchronously\n   * yielding every batch in the cursor's remaining result set.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`\n   *   FOR user IN users\n   *   FILTER user.isActive\n   *   RETURN user\n   * `);\n   * for await (const users of cursor.batches) {\n   *   for (const user of users) {\n   *     console.log(user.email, user.isAdmin);\n   *   }\n   * }\n   * ```\n   */\n  async *[Symbol.asyncIterator](): AsyncGenerator<T[], undefined, undefined> {\n    while (this.hasNext) {\n      yield this.next() as Promise<T[]>;\n    }\n    return undefined;\n  }\n\n  /**\n   * Loads all remaining batches from the server.\n   *\n   * **Warning**: This may impact memory use when working with very large\n   * query result sets.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 1 }\n   * );\n   * console.log(cursor.hasMore); // true\n   * await cursor.batches.loadAll();\n   * console.log(cursor.hasMore); // false\n   * console.log(cursor.hasNext); // true\n   * for await (const item of cursor) {\n   *   console.log(item);\n   *   // No server roundtrips necessary any more\n   * }\n   * ```\n   */\n  async loadAll(): Promise<void> {\n    while (this._hasMore) {\n      await this._more();\n    }\n  }\n\n  /**\n   * Depletes the cursor, then returns an array containing all batches in the\n   * cursor's remaining result list.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * const result = await cursor.batches.all(); // [[1, 2], [3, 4], [5]]\n   * console.log(cursor.hasNext); // false\n   * ```\n   */\n  async all(): Promise<T[][]> {\n    return this.map((batch) => batch);\n  }\n\n  /**\n   * Advances the cursor and returns all remaining values in the cursor's\n   * current batch. If the current batch has already been exhausted, fetches\n   * the next batch from the server and returns it, or `undefined` if the\n   * cursor has been depleted.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR i IN 1..10 RETURN i`,\n   *   { batchSize: 5 }\n   * );\n   * const firstBatch = await cursor.batches.next(); // [1, 2, 3, 4, 5]\n   * await cursor.next(); // 6\n   * const lastBatch = await cursor.batches.next(); // [7, 8, 9, 10]\n   * console.log(cursor.hasNext); // false\n   * ```\n   */\n  async next(): Promise<T[] | undefined> {\n    while (!this._batches.length && this.hasNext) {\n      await this._more();\n    }\n    if (!this._batches.length) {\n      return undefined;\n    }\n    const batch = this._batches.shift();\n    if (!batch) return undefined;\n    const values = [...batch.values()];\n    batch.clear(true);\n    return values;\n  }\n\n  /**\n   * Advances the cursor by applying the `callback` function to each item in\n   * the cursor's remaining result list until the cursor is depleted or\n   * `callback` returns the exact value `false`. Returns a promise that\n   * evalues to `true` unless the function returned `false`.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach | `Array.prototype.forEach`}.\n   *\n   * @param callback - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * const result = await cursor.batches.forEach((currentBatch) => {\n   *   for (const value of currentBatch) {\n   *     console.log(value);\n   *   }\n   * });\n   * console.log(result) // true\n   * console.log(cursor.hasNext); // false\n   * ```\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * const result = await cursor.batches.forEach((currentBatch) => {\n   *   for (const value of currentBatch) {\n   *     console.log(value);\n   *   }\n   *   return false; // stop after the first batch\n   * });\n   * console.log(result); // false\n   * console.log(cursor.hasNext); // true\n   * ```\n   */\n  async forEach(\n    callback: (currentBatch: T[], index: number, self: this) => false | void\n  ): Promise<boolean> {\n    let index = 0;\n    while (this.hasNext) {\n      const currentBatch = await this.next();\n      const result = callback(currentBatch!, index, this);\n      index++;\n      if (result === false) return result;\n      if (this.hasNext) await this._more();\n    }\n    return true;\n  }\n\n  /**\n   * Depletes the cursor by applying the `callback` function to each batch in\n   * the cursor's remaining result list. Returns an array containing the\n   * return values of `callback` for each batch.\n   *\n   * **Note**: This creates an array of all return values, which may impact\n   * memory use when working with very large query result sets. Consider using\n   * {@link BatchedArrayCursor.forEach}, {@link BatchedArrayCursor.reduce} or\n   * {@link BatchedArrayCursor.flatMap} instead.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map | `Array.prototype.map`}.\n   *\n   * @param R - Return type of the `callback` function.\n   * @param callback - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * const squares = await cursor.batches.map((currentBatch) => {\n   *   return currentBatch.map((value) => value ** 2);\n   * });\n   * console.log(squares); // [[1, 4], [9, 16], [25]]\n   * console.log(cursor.hasNext); // false\n   * ```\n   */\n  async map<R>(\n    callback: (currentBatch: T[], index: number, self: this) => R\n  ): Promise<R[]> {\n    let index = 0;\n    const result: any[] = [];\n    while (this.hasNext) {\n      const currentBatch = await this.next();\n      result.push(callback(currentBatch!, index, this));\n      index++;\n    }\n    return result;\n  }\n\n  /**\n   * Depletes the cursor by applying the `callback` function to each batch in\n   * the cursor's remaining result list. Returns an array containing the\n   * return values of `callback` for each batch, flattened to a depth of 1.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap | `Array.prototype.flatMap`}.\n   *\n   * @param R - Return type of the `callback` function.\n   * @param callback - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * const squares = await cursor.batches.flatMap((currentBatch) => {\n   *   return currentBatch.map((value) => value ** 2);\n   * });\n   * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\n   * console.log(cursor.hasNext); // false\n   * ```\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 1 }\n   * );\n   * const odds = await cursor.batches.flatMap((currentBatch) => {\n   *   if (currentBatch[0] % 2 === 0) {\n   *     return []; // empty array flattens into nothing\n   *   }\n   *   return currentBatch;\n   * });\n   * console.logs(odds); // [1, 3, 5]\n   * ```\n   */\n  async flatMap<R>(\n    callback: (currentBatch: T[], index: number, self: this) => R | R[]\n  ): Promise<R[]> {\n    let index = 0;\n    const result: any[] = [];\n    while (this.hasNext) {\n      const currentBatch = await this.next();\n      const value = callback(currentBatch!, index, this);\n      if (Array.isArray(value)) {\n        result.push(...value);\n      } else {\n        result.push(value);\n      }\n      index++;\n    }\n    return result;\n  }\n\n  /**\n   * Depletes the cursor by applying the `reducer` function to each batch in\n   * the cursor's remaining result list. Returns the return value of `reducer`\n   * for the last batch.\n   *\n   * **Note**: Most complex uses of the `reduce` method can be replaced with\n   * simpler code using {@link BatchedArrayCursor.forEach} or the `for await`\n   * syntax.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | `Array.prototype.reduce`}.\n   *\n   * @param R - Return type of the `reducer` function.\n   * @param reducer - Function to execute on each element.\n   * @param initialValue - Initial value of the `accumulator` value passed to\n   * the `reducer` function.\n   *\n   * @example\n   * ```js\n   * function largestValue(baseline, values) {\n   *   return Math.max(baseline, ...values);\n   * }\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 3 }\n   * );\n   * const result = await cursor.batches.reduce(largestValue, 0);\n   * console.log(result); // 5\n   * console.log(cursor.hasNext); // false\n   * const emptyResult = await cursor.batches.reduce(largestValue, 0);\n   * console.log(emptyResult); // 0\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! NEEDLESSLY COMPLEX!\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 1 }\n   * );\n   * const result = await cursor.reduce((accumulator, currentBatch) => {\n   *   if (currentBatch[0] % 2 === 0) {\n   *     accumulator.even.push(...currentBatch);\n   *   } else {\n   *     accumulator.odd.push(...currentBatch);\n   *   }\n   *   return accumulator;\n   * }, { odd: [], even: [] });\n   * console.log(result); // { odd: [1, 3, 5], even: [2, 4] }\n   *\n   * // GOOD! MUCH SIMPLER!\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const odd = [];\n   * const even = [];\n   * for await (const currentBatch of cursor) {\n   *   if (currentBatch[0] % 2 === 0) {\n   *     even.push(...currentBatch);\n   *   } else {\n   *     odd.push(...currentBatch);\n   *   }\n   * }\n   * console.log({ odd, even }); // { odd: [1, 3, 5], even: [2, 4] }\n   * ```\n   */\n  async reduce<R>(\n    reducer: (\n      accumulator: R,\n      currentBatch: T[],\n      index: number,\n      self: this\n    ) => R,\n    initialValue: R\n  ): Promise<R>;\n\n  /**\n   * Depletes the cursor by applying the `reducer` function to each batch in\n   * the cursor's remaining result list. Returns the return value of `reducer`\n   * for the last batch.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | `Array.prototype.reduce`}.\n   *\n   * @param R - Return type of the `reducer` function.\n   * @param reducer - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * function largestValue(values1, values2) {\n   *   return [Math.max(...values1, ...values2)];\n   * }\n   * const cursor = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 3 }\n   * );\n   * const result = await cursor.batches.reduce(largestValue);\n   * console.log(result); // [5]\n   * console.log(cursor.hasNext); // false\n   * ```\n   *\n   */\n  async reduce<R>(\n    reducer: (\n      accumulator: T[] | R,\n      currentBatch: T[],\n      index: number,\n      self: this\n    ) => R\n  ): Promise<R | undefined>;\n  async reduce<R>(\n    reducer: (\n      accumulator: R,\n      currentBatch: T[],\n      index: number,\n      self: this\n    ) => R,\n    initialValue?: R\n  ): Promise<R | undefined> {\n    let index = 0;\n    if (!this.hasNext) return initialValue;\n    if (initialValue === undefined) {\n      initialValue = (await this.next()) as any;\n      index += 1;\n    }\n    let value = initialValue as R;\n    while (this.hasNext) {\n      const currentBatch = await this.next();\n      value = reducer(value, currentBatch!, index, this);\n      index++;\n    }\n    return value;\n  }\n\n  /**\n   * Drains the cursor and frees up associated database resources.\n   *\n   * This method has no effect if all batches have already been consumed.\n   *\n   * @example\n   * ```js\n   * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * console.log(cursor1.hasMore); // false\n   * await cursor1.kill(); // no effect\n   *\n   * const cursor2 = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * console.log(cursor2.hasMore); // true\n   * await cursor2.kill(); // cursor is depleted\n   * ```\n   */\n  async kill(): Promise<void> {\n    if (this._batches.length) {\n      for (const batch of this._batches.values()) {\n        batch.clear();\n      }\n      this._batches.clear();\n    }\n    if (!this.hasNext) return undefined;\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/cursor/${encodeURIComponent(this._id!)}`,\n      },\n      () => {\n        this._hasMore = false;\n        return undefined;\n      }\n    );\n  }\n}\n\n/**\n * The `ArrayCursor` type represents a cursor returned from a\n * {@link Database.query}.\n *\n * When using TypeScript, cursors can be cast to a specific item type in order\n * to increase type safety.\n *\n * See also {@link BatchedArrayCursor}.\n *\n * @param T - Type to use for each item. Defaults to `any`.\n *\n * @example\n * ```ts\n * const db = new Database();\n * const query = aql`FOR x IN 1..5 RETURN x`;\n * const result = await db.query(query) as ArrayCursor<number>;\n * ```\n *\n * @example\n * ```js\n * const db = new Database();\n * const query = aql`FOR x IN 1..10 RETURN x`;\n * const cursor = await db.query(query);\n * for await (const value of cursor) {\n *   // Process each value asynchronously\n *   await processValue(value);\n * }\n * ```\n */\nexport class ArrayCursor<T = any> {\n  protected _batches: BatchedArrayCursor<T>;\n  protected _view: BatchView<T>;\n\n  constructor(batchedCursor: BatchedArrayCursor, view: BatchView<T>) {\n    this._batches = batchedCursor;\n    this._view = view;\n  }\n\n  /**\n   * A {@link BatchedArrayCursor} providing batch-wise access to the cursor\n   * result set.\n   *\n   * See also {@link BatchedArrayCursor.items}.\n   */\n  get batches() {\n    return this._batches;\n  }\n\n  /**\n   * Additional information about the cursor.\n   */\n  get extra(): CursorExtras {\n    return this.batches.extra;\n  }\n\n  /**\n   * Total number of documents in the query result. Only available if the\n   * `count` option was used.\n   */\n  get count(): number | undefined {\n    return this.batches.count;\n  }\n\n  /**\n   * Whether the cursor has more values. If set to `false`, the cursor has\n   * already been depleted and contains no more items.\n   */\n  get hasNext(): boolean {\n    return this.batches.hasNext;\n  }\n\n  /**\n   * Enables use with `for await` to deplete the cursor by asynchronously\n   * yielding every value in the cursor's remaining result set.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`\n   *   FOR user IN users\n   *   FILTER user.isActive\n   *   RETURN user\n   * `);\n   * for await (const user of cursor) {\n   *   console.log(user.email, user.isAdmin);\n   * }\n   * ```\n   */\n  async *[Symbol.asyncIterator](): AsyncGenerator<T, undefined, undefined> {\n    while (this.hasNext) {\n      yield this.next() as Promise<T>;\n    }\n    return undefined;\n  }\n\n  /**\n   * Depletes the cursor, then returns an array containing all values in the\n   * cursor's remaining result list.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const result = await cursor.all(); // [1, 2, 3, 4, 5]\n   * console.log(cursor.hasNext); // false\n   * ```\n   */\n  async all(): Promise<T[]> {\n    return this.batches.flatMap((v) => v);\n  }\n\n  /**\n   * Advances the cursor and returns the next value in the cursor's remaining\n   * result list, or `undefined` if the cursor has been depleted.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..3 RETURN x`);\n   * const one = await cursor.next(); // 1\n   * const two = await cursor.next(); // 2\n   * const three = await cursor.next(); // 3\n   * const empty = await cursor.next(); // undefined\n   * ```\n   */\n  async next(): Promise<T | undefined> {\n    while (this._view.isEmpty && this.batches.hasMore) {\n      await this._view.more();\n    }\n    if (this._view.isEmpty) {\n      return undefined;\n    }\n    return this._view.shift();\n  }\n\n  /**\n   * Advances the cursor by applying the `callback` function to each item in\n   * the cursor's remaining result list until the cursor is depleted or\n   * `callback` returns the exact value `false`. Returns a promise that\n   * evalues to `true` unless the function returned `false`.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach | `Array.prototype.forEach`}.\n   *\n   * @param callback - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const result = await cursor.forEach((currentValue) => {\n   *   console.log(currentValue);\n   * });\n   * console.log(result) // true\n   * console.log(cursor.hasNext); // false\n   * ```\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const result = await cursor.forEach((currentValue) => {\n   *   console.log(currentValue);\n   *   return false; // stop after the first item\n   * });\n   * console.log(result); // false\n   * console.log(cursor.hasNext); // true\n   * ```\n   */\n  async forEach(\n    callback: (currentValue: T, index: number, self: this) => false | void\n  ): Promise<boolean> {\n    let index = 0;\n    while (this.hasNext) {\n      const value = await this.next();\n      const result = callback(value!, index, this);\n      index++;\n      if (result === false) return result;\n    }\n    return true;\n  }\n\n  /**\n   * Depletes the cursor by applying the `callback` function to each item in\n   * the cursor's remaining result list. Returns an array containing the\n   * return values of `callback` for each item.\n   *\n   * **Note**: This creates an array of all return values, which may impact\n   * memory use when working with very large query result sets. Consider using\n   * {@link ArrayCursor.forEach}, {@link ArrayCursor.reduce} or\n   * {@link ArrayCursor.flatMap} instead.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map | `Array.prototype.map`}.\n   *\n   * @param R - Return type of the `callback` function.\n   * @param callback - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const squares = await cursor.map((currentValue) => {\n   *   return currentValue ** 2;\n   * });\n   * console.log(squares); // [1, 4, 9, 16, 25]\n   * console.log(cursor.hasNext); // false\n   * ```\n   */\n  async map<R>(\n    callback: (currentValue: T, index: number, self: this) => R\n  ): Promise<R[]> {\n    let index = 0;\n    const result: any[] = [];\n    while (this.hasNext) {\n      const value = await this.next();\n      result.push(callback(value!, index, this));\n      index++;\n    }\n    return result;\n  }\n\n  /**\n   * Depletes the cursor by applying the `callback` function to each item in\n   * the cursor's remaining result list. Returns an array containing the\n   * return values of `callback` for each item, flattened to a depth of 1.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap | `Array.prototype.flatMap`}.\n   *\n   * @param R - Return type of the `callback` function.\n   * @param callback - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const squares = await cursor.flatMap((currentValue) => {\n   *   return [currentValue, currentValue ** 2];\n   * });\n   * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\n   * console.log(cursor.hasNext); // false\n   * ```\n   *\n   * @example\n   * ```js\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const odds = await cursor.flatMap((currentValue) => {\n   *   if (currentValue % 2 === 0) {\n   *     return []; // empty array flattens into nothing\n   *   }\n   *   return currentValue; // or [currentValue]\n   * });\n   * console.logs(odds); // [1, 3, 5]\n   * ```\n   */\n  async flatMap<R>(\n    callback: (currentValue: T, index: number, self: this) => R | R[]\n  ): Promise<R[]> {\n    let index = 0;\n    const result: any[] = [];\n    while (this.hasNext) {\n      const value = await this.next();\n      const item = callback(value!, index, this);\n      if (Array.isArray(item)) {\n        result.push(...item);\n      } else {\n        result.push(item);\n      }\n      index++;\n    }\n    return result;\n  }\n\n  /**\n   * Depletes the cursor by applying the `reducer` function to each item in\n   * the cursor's remaining result list. Returns the return value of `reducer`\n   * for the last item.\n   *\n   * **Note**: Most complex uses of the `reduce` method can be replaced with\n   * simpler code using {@link ArrayCursor.forEach} or the `for await` syntax.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | `Array.prototype.reduce`}.\n   *\n   * @param R - Return type of the `reducer` function.\n   * @param reducer - Function to execute on each element.\n   * @param initialValue - Initial value of the `accumulator` value passed to\n   * the `reducer` function.\n   *\n   * @example\n   * ```js\n   * function largestOfTwo(one, two) {\n   *   return Math.max(one, two);\n   * }\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const result = await cursor.reduce(largestOfTwo, 0);\n   * console.log(result); // 5\n   * console.log(cursor.hasNext); // false\n   * const emptyResult = await cursor.reduce(largestOfTwo, 0);\n   * console.log(emptyResult); // 0\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! NEEDLESSLY COMPLEX!\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const result = await cursor.reduce((accumulator, currentValue) => {\n   *   if (currentValue % 2 === 0) {\n   *     accumulator.even.push(...currentValue);\n   *   } else {\n   *     accumulator.odd.push(...currentValue);\n   *   }\n   *   return accumulator;\n   * }, { odd: [], even: [] });\n   * console.log(result); // { odd: [1, 3, 5], even: [2, 4] }\n   *\n   * // GOOD! MUCH SIMPLER!\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const odd = [];\n   * const even = [];\n   * for await (const currentValue of cursor) {\n   *   if (currentValue % 2 === 0) {\n   *     even.push(currentValue);\n   *   } else {\n   *     odd.push(currentValue);\n   *   }\n   * }\n   * console.log({ odd, even }); // { odd: [1, 3, 5], even: [2, 4] }\n   * ```\n   */\n  async reduce<R>(\n    reducer: (accumulator: R, currentValue: T, index: number, self: this) => R,\n    initialValue: R\n  ): Promise<R>;\n  /**\n   * Depletes the cursor by applying the `reducer` function to each item in\n   * the cursor's remaining result list. Returns the return value of `reducer`\n   * for the last item.\n   *\n   * **Note**: If the result set spans multiple batches, any remaining batches\n   * will only be fetched on demand. Depending on the cursor's TTL and the\n   * processing speed, this may result in the server discarding the cursor\n   * before it is fully depleted.\n   *\n   * See also:\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | `Array.prototype.reduce`}.\n   *\n   * @param R - Return type of the `reducer` function.\n   * @param reducer - Function to execute on each element.\n   *\n   * @example\n   * ```js\n   * function largestOfTwo(one, two) {\n   *   return Math.max(one, two);\n   * }\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * const result = await cursor.reduce(largestOfTwo);\n   * console.log(result); // 5\n   * console.log(cursor.hasNext); // false\n   * const emptyResult = await cursor.reduce(largestOfTwo);\n   * console.log(emptyResult); // undefined\n   * ```\n   */\n  async reduce<R>(\n    reducer: (\n      accumulator: T | R,\n      currentValue: T,\n      index: number,\n      self: this\n    ) => R\n  ): Promise<R | undefined>;\n  async reduce<R>(\n    reducer: (accumulator: R, currentValue: T, index: number, self: this) => R,\n    initialValue?: R\n  ): Promise<R | undefined> {\n    let index = 0;\n    if (!this.hasNext) return initialValue;\n    if (initialValue === undefined) {\n      const value = (await this.next()) as any;\n      initialValue = value as R;\n      index += 1;\n    }\n    let value = initialValue;\n    while (this.hasNext) {\n      const item = await this.next();\n      value = reducer(value, item!, index, this);\n      index++;\n    }\n    return value;\n  }\n\n  /**\n   * Kills the cursor and frees up associated database resources.\n   *\n   * This method has no effect if all batches have already been fetched.\n   *\n   * @example\n   * ```js\n   * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\n   * console.log(cursor1.hasMore); // false\n   * await cursor1.kill(); // no effect\n   *\n   * const cursor2 = await db.query(\n   *   aql`FOR x IN 1..5 RETURN x`,\n   *   { batchSize: 2 }\n   * );\n   * console.log(cursor2.hasMore); // true\n   * await cursor2.kill(); // cursor is depleted\n   * ```\n   */\n  async kill(): Promise<void> {\n    return this.batches.kill();\n  }\n}\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./LinkedList\"));\r\n__export(require(\"./LinkedListItem\"));\r\n//# sourceMappingURL=index.js.map","/**\n * ```ts\n * import type { ArangoSearchView } from \"arangojs/view\";\n * ```\n *\n * The \"view\" module provides View related types and interfaces for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ArangoResponseMetadata, Dict } from \"./connection\";\nimport { Database } from \"./database\";\nimport { isArangoError } from \"./error\";\nimport { VIEW_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * String values indicating the View type.\n */\nexport enum ViewType {\n  ARANGOSEARCH_VIEW = \"arangosearch\",\n}\n\n/**\n * Indicates whether the given value represents a {@link View}.\n *\n * @param view - A value that might be a View.\n */\nexport function isArangoView(view: any): view is View {\n  return Boolean(view && view.isArangoView);\n}\n\n/**\n * Generic description of a View.\n */\nexport type ViewDescription = {\n  /**\n   * A globally unique identifier for this View.\n   */\n  globallyUniqueId: string;\n  /**\n   * An identifier for this View.\n   */\n  id: string;\n  /**\n   * Name of the View.\n   */\n  name: string;\n  /**\n   * Type of the View.\n   */\n  type: ViewType;\n};\n\n/**\n * A link definition for an ArangoSearch View.\n */\nexport type ArangoSearchViewLink = {\n  /**\n   * A list of names of Analyzers to apply to values of processed document\n   * attributes.\n   *\n   * Default: `[\"identity\"]`\n   */\n  analyzers?: string[];\n  /**\n   * An object mapping names of attributes to process for each document to\n   * {@link ArangoSearchViewLink} definitions.\n   */\n  fields?: Dict<ArangoSearchViewLink | undefined>;\n  /**\n   * If set to `true`, all document attributes will be processed, otherwise\n   * only the attributes in `fields` will be processed.\n   *\n   * Default: `false`\n   */\n  includeAllFields?: boolean;\n  /**\n   * If set to `true`, the position of values in array values will be tracked,\n   * otherwise all values in an array will be treated as equal alternatives.\n   */\n  trackListPositions?: boolean;\n  /**\n   * Controls how the view should keep track of the attribute values.\n   *\n   * Default: `\"none\"`\n   */\n  storeValues?: \"none\" | \"id\";\n  /**\n   * If set to `true`, then no exclusive lock is used on the source collection\n   * during View index creation, so that it remains basically available.\n   *\n   * Default: `false`\n   */\n  inBackground?: boolean;\n};\n\n/**\n * Properties of an ArangoSearch View.\n */\nexport type ArangoSearchViewProperties = {\n  /**\n   * How many commits to wait between removing unused files.\n   */\n  cleanupIntervalStep: number;\n  /**\n   * How long to wait between applying the `consolidationPolicy`.\n   */\n  consolidationIntervalMsec: number;\n  /**\n   * Maximum number of writers cached in the pool.\n   */\n  writebufferIdle: number;\n  /**\n   * Maximum number of concurrent active writers that perform a transaction.\n   */\n  writebufferActive: number;\n  /**\n   * Maximum memory byte size per writer before a writer flush is triggered.\n   */\n  writebufferSizeMax: number;\n  /**\n   * Consolidation policy to apply for selecting which segments should be\n   * merged.\n   */\n  consolidationPolicy: BytesAccumConsolidationPolicy | TierConsolidationPolicy;\n  /**\n   * Attribute path (`field`) for the value of each document that is\n   * used for sorting.\n   */\n  primarySort: {\n    /**\n     * Attribute path for the value of each document used for\n     * sorting.\n     */\n    field: string;\n    /**\n     * If set to `\"asc\"`, the primary sorting order is ascending.\n     * If set to `\"desc\"`, the primary sorting order is descending.\n     */\n    direction: \"desc\" | \"asc\";\n  }[];\n  /**\n   * Compression to use for the primary sort data.\n   *\n   * Default: `\"lz4\"`\n   */\n  primarySortCompression: PrimarySortCompression;\n  /**\n   * Attribute paths for which values should be stored in the view index\n   * in addition to those used for sorting via `primarySort`.\n   */\n  storedValues: {\n    /**\n     * Attribute paths for which values should be stored in the view index\n     * in addition to those used for sorting via `primarySort`.\n     */\n    fields: string[];\n  }[];\n  /**\n   * An object mapping names of linked collections to\n   * {@link ArangoSearchViewLink} definitions.\n   */\n  links: Dict<ArangoSearchViewLink | undefined>;\n};\n\n/**\n * Policy to consolidate based on segment byte size and live document count as\n * dictated by the customization attributes.\n */\nexport type BytesAccumConsolidationPolicy = {\n  /**\n   * Type of consolidation policy.\n   */\n  type: \"bytes_accum\";\n  /**\n   * Must be in the range of `0.0` to `1.0`.\n   */\n  threshold?: number;\n};\n\n/**\n * Policy to consolidate if the sum of all candidate segment byte size is less\n * than the total segment byte size multiplied by a given threshold.\n */\nexport type TierConsolidationPolicy = {\n  /**\n   * Type of consolidation policy.\n   */\n  type: \"tier\";\n  /**\n   * Minimum number of segments that will be evaluated as candidates\n   * for consolidation.\n   *\n   * Default: `1`\n   */\n  segmentsMin?: number;\n  /**\n   * Maximum number of segments that will be evaluated as candidates\n   * for consolidation.\n   *\n   * Default: `10`\n   */\n  segmentsMax?: number;\n  /**\n   * Maximum allowed size of all consolidated segments.\n   *\n   * Default: `5368709120`, i.e. 5 GiB\n   */\n  segmentsBytesMax?: number;\n  /**\n   * Defines the value to treat all smaller segments as equal for\n   * consolidation selection.\n   *\n   * Default: `2097152`, i.e. 2 MiB\n   */\n  segmentsBytesFloor?: number;\n  /**\n   * Minimum score.\n   */\n  minScore?: number;\n};\n\n/**\n * Compression to use for primary sort data of a View.\n *\n * Default: `\"lz4\"`\n */\nexport type PrimarySortCompression = \"lz4\" | \"none\";\n\n/**\n * Properties of an ArangoSearch View.\n */\nexport type ArangoSearchViewPropertiesOptions = {\n  /**\n   * How many commits to wait between removing unused files.\n   *\n   * Default: `2`\n   */\n  cleanupIntervalStep?: number;\n  /**\n   * How long to wait between applying the `consolidationPolicy`.\n   *\n   * Default: `10000`\n   */\n  consolidationIntervalMsec?: number;\n  /**\n   * How long to wait between commiting View data store changes and making\n   * documents visible to queries.\n   *\n   * Default: `1000`\n   */\n  commitIntervalMsec?: number;\n  /**\n   * Maximum number of writers cached in the pool.\n   *\n   * Default: `64`\n   */\n  writebufferIdle?: number;\n  /**\n   * Maximum number of concurrent active writers that perform a transaction.\n   *\n   * Default: `0`\n   */\n  writebufferActive?: number;\n  /**\n   * Maximum memory byte size per writer before a writer flush is triggered.\n   *\n   * Default: `33554432`, i.e. 32 MiB\n   */\n  writebufferSizeMax?: number;\n  /**\n   * Consolidation policy to apply for selecting which segments should be\n   * merged.\n   */\n  consolidationPolicy?: BytesAccumConsolidationPolicy | TierConsolidationPolicy;\n  /**\n   * Attribute path (`field`) for the value of each document that will be\n   * used for sorting.\n   *\n   * If `direction` is set to `\"asc\"` or `asc` is set to `true`,\n   * the primary sorting order will be ascending.\n   *\n   * If `direction` is set to `\"desc\"` or `asc` is set to `false`,\n   * the primary sorting order will be descending.\n   */\n  primarySort?: (\n    | {\n        /**\n         * Attribute path for the value of each document to use for\n         * sorting.\n         */\n        field: string;\n        /**\n         * If set to `\"asc\"`, the primary sorting order will be ascending.\n         * If set to `\"desc\"`, the primary sorting order will be descending.\n         */\n        direction: \"desc\" | \"asc\";\n      }\n    | {\n        /**\n         * Attribute path for the value of each document to use for\n         * sorting.\n         */\n        field: string;\n        /**\n         * If set to `true`, the primary sorting order will be ascending.\n         * If set to `false`, the primary sorting order will be descending.\n         */\n        asc: boolean;\n      }\n  )[];\n  /**\n   * Compression to use for the primary sort data.\n   *\n   * Default: `\"lz4\"`\n   */\n  primarySortCompression?: PrimarySortCompression;\n  /**\n   * Attribute paths for which values should be stored in the view index\n   * in addition to those used for sorting via `primarySort`.\n   */\n  storedValues?: {\n    /**\n     * Attribute paths for which values should be stored in the view index\n     * in addition to those used for sorting via `primarySort`.\n     */\n    fields: string[];\n  }[];\n  /**\n   * An object mapping names of linked collections to\n   * {@link ArangoSearchViewLink} definitions.\n   */\n  links?: Dict<ArangoSearchViewLink | undefined>;\n};\n\n/**\n * Represents a View in a {@link Database}.\n *\n * See {@link ArangoSearchView} for the concrete type representing an\n * ArangoSearch View.\n */\nexport class View<\n  PropertiesOptions extends Record<string, any> = any,\n  Properties extends Record<string, any> = any\n> {\n  protected _name: string;\n  protected _db: Database;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string) {\n    this._db = db;\n    this._name = name.normalize(\"NFC\");\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB View.\n   */\n  get isArangoView(): true {\n    return true;\n  }\n\n  /**\n   * Name of the View.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Retrieves general information about the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const data = await view.get();\n   * // data contains general information about the View\n   * ```\n   */\n  get(): Promise<ViewDescription & ArangoResponseMetadata> {\n    return this._db.request(\n      { path: `/_api/view/${encodeURIComponent(this._name)}` },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Checks whether the View exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const exists = await view.exists();\n   * console.log(exists); // indicates whether the View exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === VIEW_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Creates a View with the given `options` and the instance's name.\n   *\n   * See also {@link Database.createView}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"potatoes\");\n   * await view.create();\n   * // the ArangoSearch View \"potatoes\" now exists\n   * ```\n   */\n  create(\n    options?: PropertiesOptions & { type: ViewType }\n  ): Promise<ViewDescription & Properties> {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/view\",\n        body: {\n          type: ViewType.ARANGOSEARCH_VIEW,\n          ...(options || {}),\n          name: this._name,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Renames the View and updates the instance's `name` to `newName`.\n   *\n   * Additionally removes the instance from the {@link Database}'s internal\n   * cache.\n   *\n   * **Note**: Renaming Views may not be supported when ArangoDB is\n   * running in a cluster configuration.\n   *\n   * @param newName - The new name of the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view1 = db.view(\"some-view\");\n   * await view1.rename(\"other-view\");\n   * const view2 = db.view(\"some-view\");\n   * const view3 = db.view(\"other-view\");\n   * // Note all three View instances are different objects but\n   * // view1 and view3 represent the same ArangoDB view!\n   * ```\n   */\n  async rename(\n    newName: string\n  ): Promise<ViewDescription & ArangoResponseMetadata> {\n    const result = this._db.renameView(this._name, newName);\n    this._name = newName.normalize(\"NFC\");\n    return result;\n  }\n\n  /**\n   * Retrieves the View's properties.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const data = await view.properties();\n   * // data contains the View's properties\n   * ```\n   */\n  properties(): Promise<ViewDescription & Properties & ArangoResponseMetadata> {\n    return this._db.request(\n      { path: `/_api/view/${encodeURIComponent(this._name)}/properties` },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Updates the properties of the View.\n   *\n   * @param properties - Properties of the View to update.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const result = await view.updateProperties({\n   *   consolidationIntervalMsec: 234\n   * });\n   * console.log(result.consolidationIntervalMsec); // 234\n   * ```\n   */\n  updateProperties(\n    properties?: PropertiesOptions\n  ): Promise<ViewDescription & Properties> {\n    return this._db.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n        body: properties || {},\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Replaces the properties of the View.\n   *\n   * @param properties - New properties of the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * const result = await view.replaceProperties({\n   *   consolidationIntervalMsec: 234\n   * });\n   * console.log(result.consolidationIntervalMsec); // 234\n   * ```\n   */\n  replaceProperties(\n    properties?: PropertiesOptions\n  ): Promise<ViewDescription & Properties> {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n        body: properties || {},\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Deletes the View from the database.\n   *\n   * @example\n   *\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"some-view\");\n   * await view.drop();\n   * // the View \"some-view\" no longer exists\n   * ```\n   */\n  drop(): Promise<boolean> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/view/${encodeURIComponent(this._name)}`,\n      },\n      (res) => res.body.result\n    );\n  }\n}\n\n/**\n * Represents an ArangoSearch View in a {@link Database}.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ArangoSearchView\n  extends View<\n    ArangoSearchViewPropertiesOptions,\n    ArangoSearchViewProperties & { type: ViewType.ARANGOSEARCH_VIEW }\n  > {}\n","/**\n * ```ts\n * import type {\n *   Graph,\n *   GraphVertexCollection,\n *   GraphEdgeCollection,\n * } from \"arangojs/graph\";\n * ```\n *\n * The \"graph\" module provides graph related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport {\n  ArangoCollection,\n  collectionToString,\n  DocumentCollection,\n  EdgeCollection,\n  TraversalOptions,\n} from \"./collection\";\nimport { Headers } from \"./connection\";\nimport { Database } from \"./database\";\nimport {\n  Document,\n  DocumentData,\n  DocumentMetadata,\n  DocumentSelector,\n  Edge,\n  EdgeData,\n  Patch,\n  _documentHandle,\n} from \"./documents\";\nimport { isArangoError } from \"./error\";\nimport { DOCUMENT_NOT_FOUND, GRAPH_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * Indicates whether the given value represents a {@link Graph}.\n *\n * @param graph - A value that might be a Graph.\n */\nexport function isArangoGraph(graph: any): graph is Graph {\n  return Boolean(graph && graph.isArangoGraph);\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction mungeGharialResponse(body: any, prop: \"vertex\" | \"edge\" | \"removed\") {\n  const { new: newDoc, old: oldDoc, [prop]: doc, ...meta } = body;\n  const result = { ...meta, ...doc };\n  if (typeof newDoc !== \"undefined\") result.new = newDoc;\n  if (typeof oldDoc !== \"undefined\") result.old = oldDoc;\n  return result;\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction coerceEdgeDefinition(options: EdgeDefinitionOptions): EdgeDefinition {\n  const edgeDefinition = {} as EdgeDefinition;\n  edgeDefinition.collection = collectionToString(options.collection);\n  edgeDefinition.from = Array.isArray(options.from)\n    ? options.from.map(collectionToString)\n    : [collectionToString(options.from)];\n  edgeDefinition.to = Array.isArray(options.to)\n    ? options.to.map(collectionToString)\n    : [collectionToString(options.to)];\n  return edgeDefinition;\n}\n\n/**\n * Options for retrieving a document from a graph collection.\n */\nexport type GraphCollectionReadOptions = {\n  /**\n   * If set to a document revision, the document will only be returned if its\n   * `_rev` property matches this value.\n   *\n   * See also {@link DocumentMetadata}.\n   */\n  rev?: string;\n  /**\n   * If set to `true`, `null` is returned instead of an exception being thrown\n   * if the document does not exist.\n   *\n   * Default: `false`\n   */\n  graceful?: boolean;\n  /**\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\n   * potentially dirty or stale result and arangojs will load balance the\n   * request without distinguishing between leaders and followers.\n   *\n   * Default: `false`\n   */\n  allowDirtyRead?: boolean;\n};\n\n/**\n * Options for inserting a document into a graph collection.\n */\nexport type GraphCollectionInsertOptions = {\n  /**\n   * If set to `true`, data will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `true`, the complete new document will be returned as the `new`\n   * property on the result object.\n   *\n   * Default: `false`\n   */\n  returnNew?: boolean;\n};\n\n/**\n * Options for replacing a document in a graph collection.\n */\nexport type GraphCollectionReplaceOptions = {\n  /**\n   * If set to a document revision, the document will only be modified if its\n   * `_rev` property matches this value.\n   *\n   * See also {@link DocumentMetadata}.\n   */\n  rev?: string;\n  /**\n   * If set to `true`, data will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `false`, properties with a value of `null` will be removed from\n   * the new document.\n   *\n   * Default: `true`\n   */\n  keepNull?: boolean;\n  /**\n   * If set to `true`, the complete old document will be returned as the `old`\n   * property on the result object.\n   *\n   * Default: `false`\n   */\n  returnOld?: boolean;\n  /**\n   * If set to `true`, the complete new document will be returned as the `new`\n   * property on the result object.\n   *\n   * Default: `false`\n   */\n  returnNew?: boolean;\n};\n\n/**\n * Options for removing a document from a graph collection.\n */\nexport type GraphCollectionRemoveOptions = {\n  /**\n   * If set to a document revision, the document will only be removed if its\n   * `_rev` property matches this value.\n   *\n   * See also {@link DocumentMetadata}.\n   */\n  rev?: string;\n  /**\n   * If set to `true`, data will be synchronized to disk before returning.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * If set to `true`, the complete old document will be returned as the `old`\n   * property on the result object.\n   *\n   * Default: `false`\n   */\n  returnOld?: boolean;\n};\n\n/**\n * Definition of a relation in a {@link Graph}.\n */\nexport type EdgeDefinition = {\n  /**\n   * Name of the collection containing the edges.\n   */\n  collection: string;\n  /**\n   * Array of names of collections containing the start vertices.\n   */\n  from: string[];\n  /**\n   * Array of names of collections containing the end vertices.\n   */\n  to: string[];\n};\n\n/**\n * An edge definition used to define a collection of edges in a {@link Graph}.\n */\nexport type EdgeDefinitionOptions = {\n  /**\n   * Collection containing the edges.\n   */\n  collection: string | ArangoCollection;\n  /**\n   * Collection or collections containing the start vertices.\n   */\n  from: (string | ArangoCollection)[] | string | ArangoCollection;\n  /**\n   * Collection or collections containing the end vertices.\n   */\n  to: (string | ArangoCollection)[] | string | ArangoCollection;\n};\n\n/**\n * General information about a graph.\n */\nexport type GraphInfo = {\n  /**\n   * Key of the document internally representing this graph.\n   *\n   * See {@link DocumentMetadata}.\n   *\n   * @internal\n   */\n  _key: string;\n  /**\n   * Unique identifier of the document internally representing this graph.\n   *\n   * See {@link DocumentMetadata}.\n   *\n   * @internal\n   */\n  _id: string;\n  /**\n   * Revision of the document internally representing this graph.\n   *\n   * See {@link DocumentMetadata}.\n   *\n   * @internal\n   */\n  _rev: string;\n  /**\n   * Name of the graph.\n   */\n  name: string;\n  /**\n   * Definitions for the relations of the graph.\n   */\n  edgeDefinitions: EdgeDefinition[];\n  /**\n   * Additional vertex collections. Documents within these collections do not\n   * have edges within this graph.\n   */\n  orphanCollections: string[];\n\n  /**\n   * (Cluster only.) Number of shards that is used for every collection\n   * within this graph.\n   */\n  numberOfShards?: number;\n  /**\n   * (Cluster only.) Replication factor used when initially creating\n   * collections for this graph.\n   */\n  replicationFactor?: number;\n  /**\n   * (Cluster only.) Write concern for new collections in the graph.\n   */\n  writeConcern?: number;\n  /**\n   * (Cluster only.) Write concern for new collections in the graph.\n   *\n   * @deprecated Renamed to `writeConcern` in ArangoDB 3.6.\n   */\n  minReplicationFactor?: number;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, the graph is a\n   * SatelliteGraph.\n   */\n  isSatellite?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, the graph has been\n   * created as a SmartGraph.\n   */\n  isSmart?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) Attribute containing the shard key\n   * value to use for smart sharding.\n   */\n  smartGraphAttribute?: string;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, the graph has been\n   * created as a Disjoint SmartGraph.\n   */\n  isDisjoint?: boolean;\n};\n\n/**\n * Option for creating a graph.\n */\nexport type GraphCreateOptions = {\n  /**\n   * If set to `true`, the request will wait until all modifications have been\n   * synchronized to disk before returning successfully.\n   *\n   * Default: `false`\n   */\n  waitForSync?: boolean;\n  /**\n   * Additional vertex collections. Documents within these collections do not\n   * have edges within this graph.\n   */\n  orphanCollections?: (string | ArangoCollection)[] | string | ArangoCollection;\n\n  /**\n   * (Cluster only.) Number of shards that is used for every collection\n   * within this graph.\n   *\n   * Has no effect when `replicationFactor` is set to `\"satellite\"`.\n   */\n  numberOfShards?: number;\n  /**\n   * (Cluster only.) Replication factor used when initially creating\n   * collections for this graph.\n   *\n   * Default: `1`\n   */\n  replicationFactor?: number | \"satellite\";\n  /**\n   * (Cluster only.) Write concern for new collections in the graph.\n   *\n   * Has no effect when `replicationFactor` is set to `\"satellite\"`.\n   */\n  writeConcern?: number;\n  /**\n   * (Cluster only.) Write concern for new collections in the graph.\n   *\n   * Has no effect when `replicationFactor` is set to `\"satellite\"`.\n   *\n   * @deprecated Renamed to `writeConcern` in ArangoDB 3.6.\n   */\n  minReplicationFactor?: number;\n\n  // Extra options\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, the graph will be\n   * created as a SmartGraph.\n   *\n   * Default: `false`\n   */\n  isSmart?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) Attribute containing the shard key\n   * value to use for smart sharding.\n   *\n   * **Note**: `isSmart` must be set to `true`.\n   */\n  smartGraphAttribute?: string;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, the graph will be\n   * created as a Disjoint SmartGraph.\n   *\n   * Default: `false`\n   */\n  isDisjoint?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\n   * SmartGraph.\n   */\n  satellites?: (string | ArangoCollection)[];\n};\n\nexport type AddVertexCollectionOptions = {\n  /**\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\n   * SmartGraph.\n   */\n  satellites?: (string | ArangoCollection)[];\n};\n\nexport type AddEdgeDefinitionOptions = {\n  /**\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\n   * SmartGraph.\n   */\n  satellites?: (string | ArangoCollection)[];\n};\n\nexport type ReplaceEdgeDefinitionOptions = {\n  /**\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\n   * SmartGraph.\n   */\n  satellites?: string[];\n};\n\n/**\n * Represents a {@link DocumentCollection} of vertices in a {@link Graph}.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n */\nexport class GraphVertexCollection<T extends Record<string, any> = any>\n  implements ArangoCollection\n{\n  protected _db: Database;\n  protected _name: string;\n  protected _graph: Graph;\n  protected _collection: DocumentCollection<T>;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string, graph: Graph) {\n    this._db = db;\n    this._collection = db.collection(name);\n    this._name = this._collection.name;\n    this._graph = graph;\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB collection.\n   */\n  get isArangoCollection(): true {\n    return true;\n  }\n\n  /**\n   * Name of the collection.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * A {@link DocumentCollection} instance for this vertex collection.\n   */\n  get collection() {\n    return this._collection;\n  }\n\n  /**\n   * The {@link Graph} instance this vertex collection is bound to.\n   */\n  get graph() {\n    return this._graph;\n  }\n\n  /**\n   * Checks whether a vertex matching the given key or id exists in this\n   * collection.\n   *\n   * Throws an exception when passed a vertex or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a vertex from this collection).\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * const exists = await collection.vertexExists(\"abc123\");\n   * if (!exists) {\n   *   console.log(\"Vertex does not exist\");\n   * }\n   * ```\n   */\n  async vertexExists(selector: DocumentSelector): Promise<boolean> {\n    try {\n      return await this._db.request(\n        {\n          method: \"HEAD\",\n          path: `/_api/gharial/${encodeURIComponent(\n            this.graph.name\n          )}/vertex/${encodeURI(_documentHandle(selector, this._name))}`,\n        },\n        () => true\n      );\n    } catch (err) {\n      if (err.code === 404) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieves the vertex matching the given key or id.\n   *\n   * Throws an exception when passed a vertex or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a vertex from this collection).\n   * @param options - Options for retrieving the vertex.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * try {\n   *   const vertex = await collection.vertex(\"abc123\");\n   *   console.log(vertex);\n   * } catch (e) {\n   *   console.error(\"Could not find vertex\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * const vertex = await collection.vertex(\"abc123\", { graceful: true });\n   * if (vertex) {\n   *   console.log(vertex);\n   * } else {\n   *   console.error(\"Could not find vertex\");\n   * }\n   * ```\n   */\n  async vertex(\n    selector: DocumentSelector,\n    options?: GraphCollectionReadOptions\n  ): Promise<Document<T>>;\n  /**\n   * Retrieves the vertex matching the given key or id.\n   *\n   * Throws an exception when passed a vertex or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a vertex from this collection).\n   * @param graceful - If set to `true`, `null` is returned instead of an\n   * exception being thrown if the vertex does not exist.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * try {\n   *   const vertex = await collection.vertex(\"abc123\", false);\n   *   console.log(vertex);\n   * } catch (e) {\n   *   console.error(\"Could not find vertex\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * const vertex = await collection.vertex(\"abc123\", true);\n   * if (vertex) {\n   *   console.log(vertex);\n   * } else {\n   *   console.error(\"Could not find vertex\");\n   * }\n   * ```\n   */\n  async vertex(\n    selector: DocumentSelector,\n    graceful: boolean\n  ): Promise<Document<T>>;\n  async vertex(\n    selector: DocumentSelector,\n    options: boolean | GraphCollectionReadOptions = {}\n  ): Promise<Document<T> | null> {\n    if (typeof options === \"boolean\") {\n      options = { graceful: options };\n    }\n    const {\n      allowDirtyRead = undefined,\n      graceful = false,\n      rev,\n      ...qs\n    } = options;\n    const headers: Headers = {};\n    if (rev) headers[\"if-match\"] = rev;\n    const result = this._db.request(\n      {\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/vertex/${encodeURI(_documentHandle(selector, this._name))}`,\n        headers,\n        qs,\n        allowDirtyRead,\n      },\n      (res) => res.body.vertex\n    );\n    if (!graceful) return result;\n    try {\n      return await result;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Inserts a new vertex with the given `data` into the collection.\n   *\n   * @param data - The contents of the new vertex.\n   * @param options - Options for inserting the vertex.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"friends\");\n   * const result = await collection.save(\n   *   { _key: \"a\", color: \"blue\", count: 1 },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.color, result.new.count); // \"blue\" 1\n   * ```\n   */\n  save(\n    data: DocumentData<T>,\n    options?: GraphCollectionInsertOptions\n  ): Promise<DocumentMetadata & { new?: Document<T> }>;\n  save(data: DocumentData<T>, options?: GraphCollectionInsertOptions) {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/vertex/${encodeURIComponent(this._name)}`,\n        body: data,\n        qs: options,\n      },\n      (res) => mungeGharialResponse(res.body, \"vertex\")\n    );\n  }\n\n  /**\n   * Replaces an existing vertex in the collection.\n   *\n   * Throws an exception when passed a vertex or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a vertex from this collection).\n   * @param newData - The contents of the new vertex.\n   * @param options - Options for replacing the vertex.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.collection(\"vertices\");\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\n   * const result = await collection.replace(\n   *   \"a\",\n   *   { color: \"red\" },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.color, result.new.count); // \"red\" undefined\n   * ```\n   */\n  replace(\n    selector: DocumentSelector,\n    newValue: DocumentData<T>,\n    options?: GraphCollectionReplaceOptions\n  ): Promise<DocumentMetadata & { new?: Document<T>; old?: Document<T> }>;\n  replace(\n    selector: DocumentSelector,\n    newValue: DocumentData<T>,\n    options: GraphCollectionReplaceOptions = {}\n  ) {\n    if (typeof options === \"string\") {\n      options = { rev: options };\n    }\n    const { rev, ...qs } = options;\n    const headers: Headers = {};\n    if (rev) headers[\"if-match\"] = rev;\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/vertex/${encodeURI(_documentHandle(selector, this._name))}`,\n        body: newValue,\n        qs,\n        headers,\n      },\n      (res) => mungeGharialResponse(res.body, \"vertex\")\n    );\n  }\n\n  /**\n   * Updates an existing vertex in the collection.\n   *\n   * Throws an exception when passed a vertex or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a vertex from this collection).\n   * @param newData - The data for updating the vertex.\n   * @param options - Options for updating the vertex.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.collection(\"vertices\");\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\n   * const result = await collection.update(\n   *   \"a\",\n   *   { count: 2 },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.color, result.new.count); // \"blue\" 2\n   * ```\n   */\n  update(\n    selector: DocumentSelector,\n    newValue: Patch<DocumentData<T>>,\n    options?: GraphCollectionReplaceOptions\n  ): Promise<DocumentMetadata & { new?: Document<T>; old?: Document<T> }>;\n  update(\n    selector: DocumentSelector,\n    newValue: Patch<DocumentData<T>>,\n    options: GraphCollectionReplaceOptions = {}\n  ) {\n    if (typeof options === \"string\") {\n      options = { rev: options };\n    }\n    const headers: Headers = {};\n    const { rev, ...qs } = options;\n    if (rev) headers[\"if-match\"] = rev;\n    return this._db.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/vertex/${encodeURI(_documentHandle(selector, this._name))}`,\n        body: newValue,\n        qs,\n        headers,\n      },\n      (res) => mungeGharialResponse(res.body, \"vertex\")\n    );\n  }\n\n  /**\n   * Removes an existing vertex from the collection.\n   *\n   * Throws an exception when passed a vertex or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a vertex from this collection).\n   * @param options - Options for removing the vertex.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * await collection.remove(\"abc123\");\n   * // document with key \"abc123\" deleted\n   * ```\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.vertexCollection(\"vertices\");\n   * const doc = await collection.vertex(\"abc123\");\n   * await collection.remove(doc);\n   * // document with key \"abc123\" deleted\n   * ```\n   */\n  remove(\n    selector: DocumentSelector,\n    options?: GraphCollectionRemoveOptions\n  ): Promise<DocumentMetadata & { old?: Document<T> }>;\n  remove(\n    selector: DocumentSelector,\n    options: GraphCollectionRemoveOptions = {}\n  ) {\n    if (typeof options === \"string\") {\n      options = { rev: options };\n    }\n    const headers: Headers = {};\n    const { rev, ...qs } = options;\n    if (rev) headers[\"if-match\"] = rev;\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/vertex/${encodeURI(_documentHandle(selector, this._name))}`,\n        qs,\n        headers,\n      },\n      (res) => mungeGharialResponse(res.body, \"removed\")\n    );\n  }\n}\n\n/**\n * Represents a {@link EdgeCollection} of edges in a {@link Graph}.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n */\nexport class GraphEdgeCollection<T extends Record<string, any> = any>\n  implements ArangoCollection\n{\n  protected _db: Database;\n  protected _name: string;\n  protected _graph: Graph;\n  protected _collection: EdgeCollection<T>;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string, graph: Graph) {\n    this._db = db;\n    this._collection = db.collection(name);\n    this._name = this._collection.name;\n    this._graph = graph;\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB collection.\n   */\n  get isArangoCollection(): true {\n    return true;\n  }\n\n  /**\n   * Name of the collection.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * A {@link EdgeCollection} instance for this edge collection.\n   */\n  get collection() {\n    return this._collection;\n  }\n\n  /**\n   * The {@link Graph} instance this edge collection is bound to.\n   */\n  get graph() {\n    return this._graph;\n  }\n\n  /**\n   * Checks whether a edge matching the given key or id exists in this\n   * collection.\n   *\n   * Throws an exception when passed a edge or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a edge from this collection).\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.edgeCollection(\"friends\")\n   * const exists = await collection.edgeExists(\"abc123\");\n   * if (!exists) {\n   *   console.log(\"Edge does not exist\");\n   * }\n   * ```\n   */\n  async edgeExists(selector: DocumentSelector): Promise<boolean> {\n    try {\n      return await this._db.request(\n        {\n          method: \"HEAD\",\n          path: `/_api/gharial/${encodeURIComponent(\n            this.graph.name\n          )}/edge/${encodeURI(_documentHandle(selector, this._name))}`,\n        },\n        () => true\n      );\n    } catch (err) {\n      if (err.code === 404) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieves the edge matching the given key or id.\n   *\n   * Throws an exception when passed a edge or `_id` from a different\n   * collection, or if the edge does not exist.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a edge from this collection).\n   * @param options - Options for retrieving the edge.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.edgeCollection(\"friends\")\n   * try {\n   *   const edge = await collection.edge(\"abc123\");\n   *   console.log(edge);\n   * } catch (e) {\n   *   console.error(\"Could not find edge\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.edgeCollection(\"friends\")\n   * const edge = await collection.edge(\"abc123\", { graceful: true });\n   * if (edge) {\n   *   console.log(edge);\n   * } else {\n   *   console.error(\"Edge does not exist\");\n   * }\n   * ```\n   */\n  async edge(\n    selector: DocumentSelector,\n    options?: GraphCollectionReadOptions\n  ): Promise<Edge<T>>;\n  /**\n   * Retrieves the edge matching the given key or id.\n   *\n   * Throws an exception when passed a edge or `_id` from a different\n   * collection, or if the edge does not exist.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a edge from this collection).\n   * @param graceful - If set to `true`, `null` is returned instead of an\n   * exception being thrown if the edge does not exist.\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.edgeCollection(\"friends\")\n   * try {\n   *   const edge = await collection.edge(\"abc123\", false);\n   *   console.log(edge);\n   * } catch (e) {\n   *   console.error(\"Could not find edge\");\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   * const graph = db.graph(\"some-graph\");\n   * const collection = graph.edgeCollection(\"friends\")\n   * const edge = await collection.edge(\"abc123\", true);\n   * if (edge) {\n   *   console.log(edge);\n   * } else {\n   *   console.error(\"Edge does not exist\");\n   * }\n   * ```\n   */\n  async edge(selector: DocumentSelector, graceful: boolean): Promise<Edge<T>>;\n  async edge(\n    selector: DocumentSelector,\n    options: boolean | GraphCollectionReadOptions = {}\n  ): Promise<Edge<T> | null> {\n    if (typeof options === \"boolean\") {\n      options = { graceful: options };\n    }\n    const {\n      allowDirtyRead = undefined,\n      graceful = false,\n      rev,\n      ...qs\n    } = options;\n    const headers: Headers = {};\n    if (rev) headers[\"if-match\"] = rev;\n    const result = this._db.request(\n      {\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/edge/${encodeURI(_documentHandle(selector, this._name))}`,\n        qs,\n        allowDirtyRead,\n      },\n      (res) => res.body.edge\n    );\n    if (!graceful) return result;\n    try {\n      return await result;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Inserts a new edge with the given `data` into the collection.\n   *\n   * @param data - The contents of the new edge.\n   * @param options - Options for inserting the edge.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * const result = await collection.save(\n   *   { _from: \"users/rana\", _to: \"users/mudasir\", active: false },\n   *   { returnNew: true }\n   * );\n   * ```\n   */\n  save(\n    data: EdgeData<T>,\n    options?: GraphCollectionInsertOptions\n  ): Promise<DocumentMetadata & { new?: Edge<T> }>;\n  save(data: EdgeData<T>, options?: GraphCollectionInsertOptions) {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/edge/${encodeURIComponent(this._name)}`,\n        body: data,\n        qs: options,\n      },\n      (res) => mungeGharialResponse(res.body, \"edge\")\n    );\n  }\n\n  /**\n   * Replaces an existing edge in the collection.\n   *\n   * Throws an exception when passed a edge or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a edge from this collection).\n   * @param newData - The contents of the new edge.\n   * @param options - Options for replacing the edge.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.save(\n   *   {\n   *     _key: \"musadir\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/mudasir\",\n   *     active: true,\n   *     best: true\n   *   }\n   * );\n   * const result = await collection.replace(\n   *   \"musadir\",\n   *   { active: false },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.active, result.new.best); // false undefined\n   * ```\n   */\n  replace(\n    selector: DocumentSelector,\n    newValue: EdgeData<T>,\n    options?: GraphCollectionReplaceOptions\n  ): Promise<DocumentMetadata & { new?: Edge<T>; old?: Edge<T> }>;\n  replace(\n    selector: DocumentSelector,\n    newValue: EdgeData<T>,\n    options: GraphCollectionReplaceOptions = {}\n  ) {\n    if (typeof options === \"string\") {\n      options = { rev: options };\n    }\n    const { rev, ...qs } = options;\n    const headers: Headers = {};\n    if (rev) headers[\"if-match\"] = rev;\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/edge/${encodeURI(_documentHandle(selector, this._name))}`,\n        body: newValue,\n        qs,\n        headers,\n      },\n      (res) => mungeGharialResponse(res.body, \"edge\")\n    );\n  }\n\n  /**\n   * Updates an existing edge in the collection.\n   *\n   * Throws an exception when passed a edge or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a edge from this collection).\n   * @param newData - The data for updating the edge.\n   * @param options - Options for updating the edge.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * await collection.save(\n   *   {\n   *     _key: \"musadir\",\n   *     _from: \"users/rana\",\n   *     _to: \"users/mudasir\",\n   *     active: true,\n   *     best: true\n   *   }\n   * );\n   * const result = await collection.update(\n   *   \"musadir\",\n   *   { active: false },\n   *   { returnNew: true }\n   * );\n   * console.log(result.new.active, result.new.best); // false true\n   * ```\n   */\n  update(\n    selector: DocumentSelector,\n    newValue: Patch<EdgeData<T>>,\n    options?: GraphCollectionReplaceOptions\n  ): Promise<DocumentMetadata & { new?: Edge<T>; old?: Edge<T> }>;\n  update(\n    selector: DocumentSelector,\n    newValue: Patch<EdgeData<T>>,\n    options: GraphCollectionReplaceOptions = {}\n  ) {\n    if (typeof options === \"string\") {\n      options = { rev: options };\n    }\n    const { rev, ...qs } = options;\n    const headers: Headers = {};\n    if (rev) headers[\"if-match\"] = rev;\n    return this._db.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/edge/${encodeURI(_documentHandle(selector, this._name))}`,\n        body: newValue,\n        qs,\n        headers,\n      },\n      (res) => mungeGharialResponse(res.body, \"edge\")\n    );\n  }\n\n  /**\n   * Removes an existing edge from the collection.\n   *\n   * Throws an exception when passed a edge or `_id` from a different\n   * collection.\n   *\n   * @param selector - Document `_key`, `_id` or object with either of those\n   * properties (e.g. a edge from this collection).\n   * @param options - Options for removing the edge.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"friends\");\n   * const doc = await collection.edge(\"musadir\");\n   * await collection.remove(doc);\n   * // edge with key \"musadir\" deleted\n   * ```\n   */\n  remove(\n    selector: DocumentSelector,\n    options?: GraphCollectionRemoveOptions\n  ): Promise<DocumentMetadata & { old?: Edge<T> }>;\n  remove(\n    selector: DocumentSelector,\n    options: GraphCollectionRemoveOptions = {}\n  ) {\n    if (typeof options === \"string\") {\n      options = { rev: options };\n    }\n    const { rev, ...qs } = options;\n    const headers: Headers = {};\n    if (rev) headers[\"if-match\"] = rev;\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this.graph.name\n        )}/edge/${encodeURI(_documentHandle(selector, this._name))}`,\n        qs,\n        headers,\n      },\n      (res) => mungeGharialResponse(res.body, \"removed\")\n    );\n  }\n}\n\n/**\n * Represents a graph in a {@link Database}.\n */\nexport class Graph {\n  protected _name: string;\n\n  protected _db: Database;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string) {\n    this._name = name.normalize(\"NFC\");\n    this._db = db;\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB Graph.\n   */\n  get isArangoGraph(): true {\n    return true;\n  }\n\n  /**\n   * Name of the graph.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Checks whether the graph exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const result = await graph.exists();\n   * // result indicates whether the graph exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === GRAPH_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieves general information about the graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const data = await graph.get();\n   * // data contains general information about the graph\n   * ```\n   */\n  get(): Promise<GraphInfo> {\n    return this._db.request(\n      { path: `/_api/gharial/${encodeURIComponent(this._name)}` },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Creates a graph with the given `edgeDefinitions` and `options` for this\n   * graph's name.\n   *\n   * @param edgeDefinitions - Definitions for the relations of the graph.\n   * @param options - Options for creating the graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * // graph now exists\n   * ```\n   */\n  create(\n    edgeDefinitions: EdgeDefinitionOptions[],\n    options?: GraphCreateOptions\n  ): Promise<GraphInfo> {\n    const {\n      orphanCollections,\n      satellites,\n      waitForSync,\n      isSmart,\n      isDisjoint,\n      ...opts\n    } = options ?? {};\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/gharial\",\n        body: {\n          orphanCollections:\n            orphanCollections &&\n            (Array.isArray(orphanCollections)\n              ? orphanCollections.map(collectionToString)\n              : [collectionToString(orphanCollections)]),\n          edgeDefinitions: edgeDefinitions.map(coerceEdgeDefinition),\n          isSmart,\n          isDisjoint,\n          name: this._name,\n          options: { ...opts, satellites: satellites?.map(collectionToString) },\n        },\n        qs: { waitForSync },\n      },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Deletes the graph from the database.\n   *\n   * @param dropCollections - If set to `true`, the collections associated with\n   * the graph will also be deleted.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * await graph.drop();\n   * // the graph \"some-graph\" no longer exists\n   * ```\n   */\n  drop(dropCollections: boolean = false): Promise<boolean> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${encodeURIComponent(this._name)}`,\n        qs: { dropCollections },\n      },\n      (res) => res.body.removed\n    );\n  }\n\n  /**\n   * Returns a {@link GraphVertexCollection} instance for the given collection\n   * name representing the collection in this graph.\n   *\n   * @param T - Type to use for document data. Defaults to `any`.\n   * @param collection - Name of the vertex collection.\n   */\n  vertexCollection<T extends Record<string, any> = any>(\n    collection: string | ArangoCollection\n  ): GraphVertexCollection<T> {\n    return new GraphVertexCollection<T>(\n      this._db,\n      collectionToString(collection),\n      this\n    );\n  }\n\n  /**\n   * Fetches all vertex collections of this graph from the database and returns\n   * an array of their names.\n   *\n   * See also {@link Graph.vertexCollections}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * const vertexCollectionNames = await graph.listVertexCollections();\n   * // [\"start-vertices\", \"end-vertices\"]\n   * ```\n   */\n  listVertexCollections(): Promise<string[]> {\n    return this._db.request(\n      { path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex` },\n      (res) => res.body.collections\n    );\n  }\n\n  /**\n   * Fetches all vertex collections of this graph from the database and returns\n   * an array of {@link GraphVertexCollection} instances.\n   *\n   * See also {@link Graph.listVertexCollections}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * const vertexCollections = await graph.vertexCollections();\n   * for (const vertexCollection of vertexCollections) {\n   *   console.log(vertexCollection.name);\n   *   // \"start-vertices\"\n   *   // \"end-vertices\"\n   * }\n   * ```\n   */\n  async vertexCollections(): Promise<GraphVertexCollection[]> {\n    const names = await this.listVertexCollections();\n    return names.map((name) => new GraphVertexCollection(this._db, name, this));\n  }\n\n  /**\n   * Adds the given collection to this graph as a vertex collection.\n   *\n   * @param collection - Collection to add to the graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * await graph.addVertexCollection(\"more-vertices\");\n   * // The collection \"more-vertices\" has been added to the graph\n   * const extra = db.collection(\"extra-vertices\");\n   * await graph.addVertexCollection(extra);\n   * // The collection \"extra-vertices\" has been added to the graph\n   * ```\n   */\n  addVertexCollection(\n    collection: string | ArangoCollection,\n    options?: AddVertexCollectionOptions\n  ): Promise<GraphInfo> {\n    const { satellites, ...opts } = options ?? {};\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex`,\n        body: {\n          collection: collectionToString(collection),\n          options: { ...opts, satellites: satellites?.map(collectionToString) },\n        },\n      },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Removes the given collection from this graph as a vertex collection.\n   *\n   * @param collection - Collection to remove from the graph.\n   * @param dropCollection - If set to `true`, the collection will also be\n   * deleted from the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * await graph.removeVertexCollection(\"start-vertices\");\n   * // The collection \"start-vertices\" is no longer part of the graph.\n   * ```\n   */\n  removeVertexCollection(\n    collection: string | ArangoCollection,\n    dropCollection: boolean = false\n  ): Promise<GraphInfo> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this._name\n        )}/vertex/${encodeURIComponent(collectionToString(collection))}`,\n        qs: {\n          dropCollection,\n        },\n      },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Returns a {@link GraphEdgeCollection} instance for the given collection\n   * name representing the collection in this graph.\n   *\n   * @param T - Type to use for document data. Defaults to `any`.\n   * @param collection - Name of the edge collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * const graphEdgeCollection = graph.edgeCollection(\"edges\");\n   * // Access the underlying EdgeCollection API:\n   * const edgeCollection = graphEdgeCollection.collection;\n   * ```\n   */\n  edgeCollection<T extends Record<string, any> = any>(\n    collection: string | ArangoCollection\n  ): GraphEdgeCollection<T> {\n    return new GraphEdgeCollection<T>(\n      this._db,\n      collectionToString(collection),\n      this\n    );\n  }\n\n  /**\n   * Fetches all edge collections of this graph from the database and returns\n   * an array of their names.\n   *\n   * See also {@link Graph.edgeCollections}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * const edgeCollectionNames = await graph.listEdgeCollections();\n   * // [\"edges\"]\n   * ```\n   */\n  listEdgeCollections(): Promise<string[]> {\n    return this._db.request(\n      { path: `/_api/gharial/${encodeURIComponent(this._name)}/edge` },\n      (res) => res.body.collections\n    );\n  }\n\n  /**\n   * Fetches all edge collections of this graph from the database and returns\n   * an array of {@link GraphEdgeCollection} instances.\n   *\n   * See also {@link Graph.listEdgeCollections}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * const graphEdgeCollections = await graph.edgeCollections();\n   * for (const collection of graphEdgeCollection) {\n   *   console.log(collection.name);\n   *   // \"edges\"\n   * }\n   * ```\n   */\n  async edgeCollections(): Promise<GraphEdgeCollection[]> {\n    const names = await this.listEdgeCollections();\n    return names.map((name) => new GraphEdgeCollection(this._db, name, this));\n  }\n\n  /**\n   * Adds an edge definition to this graph.\n   *\n   * @param edgeDefinition - Definition of a relation in this graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * await graph.addEdgeDefinition({\n   *   collection: \"edges\",\n   *   from: [\"start-vertices\"],\n   *   to: [\"end-vertices\"],\n   * });\n   * // The edge definition has been added to the graph\n   * ```\n   */\n  addEdgeDefinition(\n    edgeDefinition: EdgeDefinitionOptions,\n    options?: AddEdgeDefinitionOptions\n  ): Promise<GraphInfo> {\n    const { satellites, ...opts } = options ?? {};\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${encodeURIComponent(this._name)}/edge`,\n        body: {\n          ...coerceEdgeDefinition(edgeDefinition),\n          options: { ...opts, satellites: satellites?.map(collectionToString) },\n        },\n      },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Replaces an edge definition in this graph. The existing edge definition\n   * for the given edge collection will be overwritten.\n   *\n   * @param edgeDefinition - Definition of a relation in this graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * await graph.replaceEdgeDefinition({\n   *   collection: \"edges\",\n   *   from: [\"start-vertices\"],\n   *   to: [\"other-vertices\"],\n   * });\n   * // The edge definition for \"edges\" has been replaced\n   * ```\n   */\n  replaceEdgeDefinition(\n    edgeDefinition: EdgeDefinitionOptions,\n    options?: ReplaceEdgeDefinitionOptions\n  ): Promise<GraphInfo>;\n  /**\n   * Replaces an edge definition in this graph. The existing edge definition\n   * for the given edge collection will be overwritten.\n   *\n   * @param collection - Edge collection for which to replace the definition.\n   * @param edgeDefinition - Definition of a relation in this graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * await graph.replaceEdgeDefinition(\"edges\", {\n   *   collection: \"edges\",\n   *   from: [\"start-vertices\"],\n   *   to: [\"other-vertices\"],\n   * });\n   * // The edge definition for \"edges\" has been replaced\n   * ```\n   */\n  replaceEdgeDefinition(\n    collection: string | ArangoCollection,\n    edgeDefinition: EdgeDefinitionOptions,\n    options?: ReplaceEdgeDefinitionOptions\n  ): Promise<GraphInfo>;\n  replaceEdgeDefinition(\n    collectionOrEdgeDefinitionOptions:\n      | string\n      | ArangoCollection\n      | EdgeDefinitionOptions,\n    edgeDefinitionOrOptions?:\n      | EdgeDefinitionOptions\n      | ReplaceEdgeDefinitionOptions,\n    options?: ReplaceEdgeDefinitionOptions\n  ) {\n    let collection = collectionOrEdgeDefinitionOptions as\n      | string\n      | ArangoCollection;\n    let edgeDefinition = edgeDefinitionOrOptions as EdgeDefinitionOptions;\n    if (\n      edgeDefinitionOrOptions &&\n      !edgeDefinitionOrOptions.hasOwnProperty(\"collection\")\n    ) {\n      options = edgeDefinitionOrOptions as ReplaceEdgeDefinitionOptions;\n      edgeDefinitionOrOptions = undefined;\n    }\n    if (!edgeDefinitionOrOptions) {\n      edgeDefinition =\n        collectionOrEdgeDefinitionOptions as EdgeDefinitionOptions;\n      collection = edgeDefinition.collection;\n    }\n    const { satellites, ...opts } = options ?? {};\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this._name\n        )}/edge/${encodeURIComponent(collectionToString(collection))}`,\n        body: {\n          ...coerceEdgeDefinition(edgeDefinition),\n          options: { ...opts, satellites: satellites?.map(collectionToString) },\n        },\n      },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Removes the edge definition for the given edge collection from this graph.\n   *\n   * @param collection - Edge collection for which to remove the definition.\n   * @param dropCollection - If set to `true`, the collection will also be\n   * deleted from the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * const info = await graph.create([\n   *   {\n   *     collection: \"edges\",\n   *     from: [\"start-vertices\"],\n   *     to: [\"end-vertices\"],\n   *   },\n   * ]);\n   * await graph.removeEdgeDefinition(\"edges\");\n   * // The edge definition for \"edges\" has been replaced\n   * ```\n   */\n  removeEdgeDefinition(\n    collection: string | ArangoCollection,\n    dropCollection: boolean = false\n  ): Promise<GraphInfo> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${encodeURIComponent(\n          this._name\n        )}/edge/${encodeURIComponent(collectionToString(collection))}`,\n        qs: {\n          dropCollection,\n        },\n      },\n      (res) => res.body.graph\n    );\n  }\n\n  /**\n   * Performs a traversal starting from the given `startVertex` and following\n   * edges contained in this graph.\n   *\n   * See also {@link EdgeCollection.traversal}.\n   *\n   * @param startVertex - Document `_id` of a vertex in this graph.\n   * @param options - Options for performing the traversal.\n   *\n   * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n   * replaced with AQL queries.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"my-graph\");\n   * const collection = graph.edgeCollection(\"edges\").collection;\n   * await collection.import([\n   *   [\"_key\", \"_from\", \"_to\"],\n   *   [\"x\", \"vertices/a\", \"vertices/b\"],\n   *   [\"y\", \"vertices/b\", \"vertices/c\"],\n   *   [\"z\", \"vertices/c\", \"vertices/d\"],\n   * ]);\n   * const result = await graph.traversal(\"vertices/a\", {\n   *   direction: \"outbound\",\n   *   init: \"result.vertices = [];\",\n   *   visitor: \"result.vertices.push(vertex._key);\",\n   * });\n   * console.log(result.vertices); // [\"a\", \"b\", \"c\", \"d\"]\n   * ```\n   */\n  traversal(startVertex: string, options?: TraversalOptions): Promise<any> {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: `/_api/traversal`,\n        body: {\n          ...options,\n          startVertex,\n          graphName: this._name,\n        },\n      },\n      (res) => res.body.result\n    );\n  }\n}\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Represents an Item within LinkedList.\r\n * An item holds a value and the links to other LinkedListItem's\r\n * LinkedListItem's can only be attached behind.\r\n * Theirfor, to add one before, before has to add one behind.\r\n */\r\nclass LinkedListItem {\r\n    /**\r\n     * @param value Value to be held\r\n     * @param unlinkCleanup Function to run on unlink() call. Usually used by LinkedList to fix first and last pointers and reduce length.\r\n     */\r\n    constructor(value, \r\n    /**\r\n     *\r\n     */\r\n    unlinkCleanup) {\r\n        this.value = value;\r\n        this.unlinkCleanup = unlinkCleanup;\r\n    }\r\n    /**\r\n     * This will link given LinkListItem behind this item.\r\n     * If there's already a LinkedListItem linked behind, it will be relinked accordingly\r\n     * @param item LinkListItem to be inserted behind this one\r\n     */\r\n    insertBehind(item) {\r\n        item.insertBefore(this);\r\n        if (this.behind) {\r\n            let itemChainEnd = item;\r\n            while (itemChainEnd.behind)\r\n                itemChainEnd = itemChainEnd.behind;\r\n            this.behind.insertBefore(itemChainEnd);\r\n            itemChainEnd.insertBehind(this.behind);\r\n        }\r\n        this.behind = item;\r\n    }\r\n    /**\r\n     * Unlinks this LinkedListItem and calls unlinkCleanup\r\n     * @param unchain If true, additionally removes the reference to the item before and behind\r\n     * @see LinkedListItem#unlinkCleanup\r\n     */\r\n    unlink(unchain = false) {\r\n        if (this.before)\r\n            this.before.behind = this.behind;\r\n        if (this.behind) {\r\n            this.behind.before = this.before;\r\n        }\r\n        if (this.unlinkCleanup) {\r\n            this.unlinkCleanup(this);\r\n        }\r\n        this.unlinkCleanup = undefined;\r\n        if (unchain) {\r\n            this.before = this.behind = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Item given will be inserted before this item.\r\n     * unlinkCleanup will be copied if neccessary.\r\n     * This function is protected, because LinkedListItem's can only be attached behind.\r\n     *\r\n     * @param before\r\n     * @see insertBehind\r\n     */\r\n    insertBefore(before) {\r\n        this.before = before;\r\n        if (!this.unlinkCleanup) {\r\n            this.unlinkCleanup = before.unlinkCleanup;\r\n        }\r\n    }\r\n}\r\nexports.LinkedListItem = LinkedListItem;\r\n//# sourceMappingURL=LinkedListItem.js.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-var-requires */\n\"use strict\";\nconst { aql } = require(\"./aql\");\nconst { CollectionStatus, CollectionType } = require(\"./collection\");\nconst { ViewType } = require(\"./view\");\nconst { Database } = require(\"./database\");\n\nmodule.exports = exports = arangojs;\n\nfunction arangojs(config) {\n  if (typeof config === \"string\" || Array.isArray(config)) {\n    const url = config;\n    return new Database(url);\n  }\n  return new Database(config);\n}\n\nObject.assign(arangojs, {\n  aql,\n  arangojs,\n  CollectionStatus,\n  CollectionType,\n  Database,\n  ViewType,\n});\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst LinkedListItem_1 = require(\"./LinkedListItem\");\r\n/**\r\n * Implements a linked list structure\r\n * @typeparam T Type of values within this LinkedList\r\n */\r\nclass LinkedList {\r\n    /**\r\n     * @param values Values to be added upfront into list\r\n     */\r\n    constructor(values) {\r\n        /**\r\n         * Current length of this LinkedList.\r\n         * Note that this does not work anymore if you for some reason add your own LinkedListItems to LinkedList by hand\r\n         */\r\n        this.length = 0;\r\n        /**\r\n         * Given to own LinkedListItem's for following jobs regarding an unlink:\r\n         * - If item is first item, set the next item as first item\r\n         * - If item is last item, set the previous item as last item\r\n         * - Decrease length\r\n         * @param item Item that has been unlinked\r\n         */\r\n        this.unlinkCleanup = (item) => {\r\n            if (this.first === item) {\r\n                this.first = this.first.behind;\r\n            }\r\n            if (this.last === item) {\r\n                this.last = this.last.before;\r\n            }\r\n            this.length--;\r\n        };\r\n        if (values) {\r\n            if (values instanceof LinkedList)\r\n                values = values.values();\r\n            for (const value of values) {\r\n                this.push(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Clears this LinkedList.\r\n     * The default complexity is O(1), because it only removes links to the first and last item and resets the length.\r\n     * Note that if any LinkedListItem is still referenced outside the LinkedList, their before and behind fields might\r\n     * still reference the chain, not freeing space.\r\n     * You can set the unchain parameter to true, so every item in the linked list will be unchained,\r\n     * meaning all references to before and behind items will be removed.\r\n     * This increases complexity to O(n), but removes accidental outside references to the full chain.\r\n     * @param unchain If `true`, remove link info from every item. Changes complexity to O(n)!\r\n     */\r\n    clear(unchain = false) {\r\n        if (unchain) {\r\n            while (this.first) {\r\n                this.first.unlink(true);\r\n            }\r\n        }\r\n        this.first = this.last = undefined;\r\n        this.length = 0;\r\n    }\r\n    /**\r\n     * As Array#every() given callback is called for every element until one call returns falsy or all elements had been processed\r\n     * @returns `false` if there was a falsy response from the callback, `true` if all elements have been processed \"falselesly\"\r\n     * @see Array#every\r\n     */\r\n    every(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const item of this.keys()) {\r\n            if (!callback(item.value, item, this)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Filters values into a new LinkedList\r\n     * @param callback decides wether given element should be part of new LinkedList\r\n     * @see Array#filter\r\n     */\r\n    filter(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        const newList = new LinkedList();\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                newList.push(value);\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n    /**\r\n     * Returns value for which given callback returns truthy\r\n     * @param callback runs for every value in LinkedList. If it returns truthy, current value is returned.\r\n     * @see Array#find\r\n     */\r\n    find(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the LinkedListItem for which given callback returns truthy\r\n     * @param callback runs for every LinkedListItem in LinkedList. If it returns truthy, current LinkedListItem is returned.\r\n     * @see Array#findIndex\r\n     */\r\n    findItem(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterates this LinkedList's items and values\r\n     * @param callback Gets every value in LinkedList once with corresponding LinkedListItem and LinkedList\r\n     * @param thisArg If given, callback will be bound here\r\n     * @see Array#forEach\r\n     */\r\n    forEach(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            callback(value, item, this);\r\n        }\r\n    }\r\n    /**\r\n     * Checks if value can be found within LinkedList, starting from fromIndex, if given.\r\n     * @param value value to be found in this\r\n     * @param fromIndex Starting index. Supports negative values for which `this.size - 1 + fromIndex` will be used as starting point.\r\n     * @returns true if value could be found in LinkedList (respecting fromIndex), false otherwhise\r\n     * @see Array#includes\r\n     */\r\n    includes(value, fromIndex = 0) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === value) {\r\n                return true;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Searches forward for given value and returns the first corresponding LinkedListItem found\r\n     * @param searchedValue Value to be found\r\n     * @param fromIndex Index to start from\r\n     * @see Array#indexOf\r\n     */\r\n    itemOf(searchedValue, fromIndex = 0) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === searchedValue) {\r\n                return current;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * Searches backwards for given value and returns the first corresponding LinkedListItem found\r\n     * @param searchedValue Value to be found\r\n     * @param fromIndex Index to start from\r\n     * @see Array#indexOf\r\n     */\r\n    lastItemOf(searchedValue, fromIndex = -1) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === searchedValue) {\r\n                return current;\r\n            }\r\n            current = current.before;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * Creates a new LinkedList with each of its itesm representing the output of the callback with each item in current LinkedList.\r\n     * @param callback Gets value, LinkedListeItem and LinkedList. The response will be used as value in the new LinkedList\r\n     * @param thisArg If given, callback is bound to thisArg\r\n     * @see Array#map\r\n     */\r\n    map(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        const newList = new LinkedList();\r\n        for (const [item, value] of this) {\r\n            newList.push(callback(value, item, this));\r\n        }\r\n        return newList;\r\n    }\r\n    reduce(callback, initialValue) {\r\n        let current = this.first;\r\n        if (!current) {\r\n            if (!initialValue) {\r\n                throw new TypeError(\"Empty accumulator on empty LinkedList is not allowed.\");\r\n            }\r\n            return initialValue;\r\n        }\r\n        if (initialValue === undefined) {\r\n            initialValue = current.value;\r\n            if (!current.behind) {\r\n                return initialValue;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        do {\r\n            initialValue = callback(initialValue, current.value, current, this);\r\n            current = current.behind;\r\n        } while (current);\r\n        return initialValue;\r\n    }\r\n    reduceRight(callback, initialValue) {\r\n        let current = this.last;\r\n        if (!current) {\r\n            if (!initialValue) {\r\n                throw new TypeError(\"Empty accumulator on empty LinkedList is not allowed.\");\r\n            }\r\n            return initialValue;\r\n        }\r\n        // let accumulator: V | T;\r\n        if (initialValue === undefined) {\r\n            initialValue = current.value;\r\n            if (!current.before) {\r\n                return initialValue;\r\n            }\r\n            current = current.before;\r\n        }\r\n        do {\r\n            initialValue = callback(initialValue, current.value, current, this);\r\n            current = current.before;\r\n        } while (current);\r\n        return initialValue;\r\n    }\r\n    /**\r\n     * Runs callback for every entry and returns true immediately if call of callback returns truthy.\r\n     * @param callback called for every element. If response is truthy, iteration\r\n     * @param thisArg If set, callback is bound to this\r\n     * @returns `true` once a callback call returns truthy, `false` if none returned truthy.\r\n     */\r\n    some(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Joins values within this by given separator. Uses Array#join directly.\r\n     * @param separator separator to be used\r\n     * @see Array#join\r\n     */\r\n    join(separator) {\r\n        return [...this.values()].join(separator);\r\n    }\r\n    /**\r\n     * Concats given values and returns a new LinkedList with all given values.\r\n     * If LinkedList's are given, they will be spread.\r\n     * @param others Other values or lists to be concat'ed together\r\n     * @see Array#concat\r\n     */\r\n    concat(...others) {\r\n        const newList = new LinkedList(this);\r\n        for (const other of others) {\r\n            if (other instanceof LinkedList) {\r\n                newList.push(...other.values());\r\n            }\r\n            else {\r\n                newList.push(other);\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n    /**\r\n     * Removes the last LinkedListItem and returns its inner value\r\n     */\r\n    pop() {\r\n        if (!this.last) {\r\n            return;\r\n        }\r\n        const item = this.last;\r\n        item.unlink();\r\n        return item.value;\r\n    }\r\n    /**\r\n     * Adds given values on the end of this LinkedList\r\n     * @param values Values to be added\r\n     */\r\n    push(...values) {\r\n        for (const value of values) {\r\n            const item = new LinkedListItem_1.LinkedListItem(value, this.unlinkCleanup);\r\n            if (!this.first || !this.last) {\r\n                this.first = this.last = item;\r\n            }\r\n            else {\r\n                this.last.insertBehind(item);\r\n                this.last = item;\r\n            }\r\n            this.length++;\r\n        }\r\n        return this.length;\r\n    }\r\n    /**\r\n     * Adds given values to the beginning of this LinkedList\r\n     * @param values Values to be added\r\n     */\r\n    unshift(...values) {\r\n        for (const value of values) {\r\n            const item = new LinkedListItem_1.LinkedListItem(value, this.unlinkCleanup);\r\n            if (!this.last || !this.first) {\r\n                this.first = this.last = item;\r\n            }\r\n            else {\r\n                item.insertBehind(this.first);\r\n                this.first = item;\r\n            }\r\n            this.length++;\r\n        }\r\n        return this.length;\r\n    }\r\n    /**\r\n     * Removes first occurrence of value found.\r\n     * @param value value to remove from LinkedList\r\n     */\r\n    remove(value) {\r\n        for (const item of this.keys()) {\r\n            if (item.value === value) {\r\n                item.unlink();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Removes every occurrance of value within this.\r\n     * @param value value to remove from LinkedList\r\n     */\r\n    removeAllOccurrences(value) {\r\n        let foundSomethingToDelete = false;\r\n        for (const item of this.keys()) {\r\n            if (item.value === value) {\r\n                item.unlink();\r\n                foundSomethingToDelete = true;\r\n            }\r\n        }\r\n        return foundSomethingToDelete;\r\n    }\r\n    /**\r\n     * Returns and removes first element from LinkedList\r\n     */\r\n    shift() {\r\n        if (!this.first) {\r\n            return;\r\n        }\r\n        const item = this.first;\r\n        item.unlink();\r\n        return item.value;\r\n    }\r\n    /**\r\n     * Returns LinkedListItem and value for every entry of this LinkedList\r\n     */\r\n    *[Symbol.iterator]() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield [current, current.value];\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns LinkedListItem and value for every entry of this LinkedList\r\n     * @see LinkedList#Symbol.iterator\r\n     */\r\n    entries() {\r\n        return this[Symbol.iterator]();\r\n    }\r\n    /**\r\n     * Iterates the LinkedListItem's of this LinkedList\r\n     */\r\n    *keys() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield current;\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns a value for every entry of this LinkedList\r\n     */\r\n    *values() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield current.value;\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns the item by given index.\r\n     * Supports negative values and will return the item at `LinkedList.size - 1 + index` in that case.\r\n     * @param index Index of item to get from list\r\n     */\r\n    getItemByIndex(index) {\r\n        if (index === undefined) {\r\n            throw new Error(\"index must be a number!\");\r\n        }\r\n        if (!this.first) {\r\n            return;\r\n        }\r\n        let current;\r\n        if (index > 0) {\r\n            current = this.first;\r\n            while (current && index--) {\r\n                current = current.behind;\r\n            }\r\n        }\r\n        else if (index < 0) {\r\n            current = this.last;\r\n            while (current && ++index) {\r\n                current = current.before;\r\n            }\r\n        }\r\n        else {\r\n            return this.first;\r\n        }\r\n        return current;\r\n    }\r\n}\r\nexports.LinkedList = LinkedList;\r\n//# sourceMappingURL=LinkedList.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    cls.apply(this, arguments);\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nvar ExtendableError = function (_extendableBuiltin2) {\n  _inherits(ExtendableError, _extendableBuiltin2);\n\n  function ExtendableError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, ExtendableError);\n\n    // extending Error is weird and does not propagate `message`\n    var _this = _possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));\n\n    Object.defineProperty(_this, 'message', {\n      configurable: true,\n      enumerable: false,\n      value: message,\n      writable: true\n    });\n\n    Object.defineProperty(_this, 'name', {\n      configurable: true,\n      enumerable: false,\n      value: _this.constructor.name,\n      writable: true\n    });\n\n    if (Error.hasOwnProperty('captureStackTrace')) {\n      Error.captureStackTrace(_this, _this.constructor);\n      return _possibleConstructorReturn(_this);\n    }\n\n    Object.defineProperty(_this, 'stack', {\n      configurable: true,\n      enumerable: false,\n      value: new Error(message).stack,\n      writable: true\n    });\n    return _this;\n  }\n\n  return ExtendableError;\n}(_extendableBuiltin(Error));\n\nexport default ExtendableError;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\n    try {\n        if (xhr.responseType === \"document\") {\n            return xhr.responseXML\n        }\n        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n            return xhr.responseXML\n        }\n    } catch (e) {}\n\n    return null\n}\n\nfunction noop() {}\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  if (!fn) {\n    return false\n  }\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","/**\n * ```ts\n * import type { Analyzer } from \"arangojs/analyzer\";\n * ```\n *\n * The \"analyzer\" module provides analyzer related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ArangoResponseMetadata } from \"./connection\";\nimport { Database } from \"./database\";\nimport { isArangoError } from \"./error\";\nimport { ANALYZER_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * Indicates whether the given value represents an {@link Analyzer}.\n *\n * @param analyzer - A value that might be an Analyzer.\n */\nexport function isArangoAnalyzer(analyzer: any): analyzer is Analyzer {\n  return Boolean(analyzer && analyzer.isArangoAnalyzer);\n}\n\n/**\n * Name of a feature enabled for an Analyzer.\n */\nexport type AnalyzerFeature = \"frequency\" | \"norm\" | \"position\";\n\n/**\n * An object describing an Analyzer.\n */\nexport type AnalyzerDescription = AnalyzerInfo & {\n  name: string;\n  features: AnalyzerFeature[];\n};\n\n/**\n * Options for creating an Analyzer.\n */\nexport type CreateAnalyzerOptions = AnalyzerInfo & {\n  /**\n   * Features to enable for this Analyzer.\n   */\n  features?: AnalyzerFeature[];\n};\n\n/**\n * Analyzer type and its type-specific properties.\n */\nexport type AnalyzerInfo =\n  | IdentityAnalyzerInfo\n  | DelimiterAnalyzerInfo\n  | StemAnalyzerInfo\n  | NormAnalyzerInfo\n  | NgramAnalyzerInfo\n  | TextAnalyzerInfo\n  | PipelineAnalyzer\n  | AqlAnalyzer\n  | GeoJsonAnalyzer\n  | GeoPointAnalyzer\n  | StopwordsAnalyzer\n  | SegmentationAnalyzer\n  | CollationAnalyzer;\n\n/**\n * Analyzer type and type-specific properties for an Identity Analyzer.\n */\nexport type IdentityAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"identity\";\n  /**\n   * Additional properties for the Analyzer.\n   *\n   * The `identity` Analyzer does not take additional properties.\n   */\n  properties?: null;\n};\n\n/**\n * Analyzer type and type-specific properties for a Delimiter Analyzer.\n */\nexport type DelimiterAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"delimiter\";\n  /**\n   * Additional properties for the Analyzer.\n   *\n   * The value will be used as delimiter to split text into tokens as specified\n   * in RFC 4180, without starting new records on newlines.\n   */\n  properties: string | { delimiter: string };\n};\n\n/**\n * Analyzer type and type-specific properties for a Stem Analyzer.\n */\nexport type StemAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"stem\";\n  /**\n   * Additional properties for the Analyzer.\n   *\n   * The value defines the text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  properties: { locale: string };\n};\n\n/**\n * Properties of a Norm Analyzer.\n */\nexport type NormAnalyzerProperties = {\n  /**\n   * Text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  locale: string;\n  /**\n   * Case conversion.\n   *\n   * Default: `\"lower\"`\n   */\n  case?: \"lower\" | \"none\" | \"upper\";\n  /**\n   * Preserve accents in returned words.\n   *\n   * Default: `false`\n   */\n  accent?: boolean;\n};\n\n/**\n * Analyzer type and type-specific properties for a Norm Analyzer.\n */\nexport type NormAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"norm\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: NormAnalyzerProperties;\n};\n\n/**\n * Properties of an Ngram Analyzer.\n */\nexport type NgramAnalyzerProperties = {\n  /**\n   * Maximum n-gram length.\n   */\n  max: number;\n  /**\n   * Minimum n-gram length.\n   */\n  min: number;\n  /**\n   * Output the original value as well.\n   */\n  preserveOriginal: boolean;\n};\n\n/**\n * Analyzer type and type-specific properties for an Ngram Analyzer.\n */\nexport type NgramAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"ngram\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: NgramAnalyzerProperties;\n};\n\n/**\n * Properties of a Text Analyzer.\n */\nexport type TextAnalyzerProperties = {\n  /**\n   * Text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  locale: string;\n  /**\n   * Case conversion.\n   *\n   * Default: `\"lower\"`\n   */\n  case?: \"lower\" | \"none\" | \"upper\";\n  /**\n   * Words to omit from result.\n   *\n   * Defaults to the words loaded from the file at `stopwordsPath`.\n   */\n  stopwords?: string[];\n  /**\n   * Path with a `language` sub-directory containing files with words to omit.\n   *\n   * Defaults to the path specified in the server-side environment variable\n   * `IRESEARCH_TEXT_STOPWORD_PATH` or the current working directory of the\n   * ArangoDB process.\n   */\n  stopwordsPath?: string;\n  /**\n   * Preserve accents in returned words.\n   *\n   * Default: `false`\n   */\n  accent?: boolean;\n  /**\n   * Apply stemming on returned words.\n   *\n   * Default: `true`\n   */\n  stemming?: boolean;\n  /**\n   * If present, then edge n-grams are generated for each token (word).\n   */\n  edgeNgram?: { min?: number; max?: number; preserveOriginal?: boolean };\n};\n\n/**\n * Analyzer type and type-specific properties for a Text Analyzer.\n */\nexport type TextAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"text\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: TextAnalyzerProperties;\n};\n\n/**\n * Properties of a Pipeline Analyzer.\n */\nexport type PipelineAnalyzerProperties = {\n  /**\n   * Definitions for Analyzers to chain in this Pipeline Analyzer.\n   */\n  pipeline: AnalyzerInfo[];\n};\n\n/**\n * Analyzer type and type-specific properties for a Pipeline Analyzer\n */\nexport type PipelineAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"pipeline\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: PipelineAnalyzerProperties;\n};\n\n/**\n * Properties of an AQL Analyzer.\n */\nexport type AqlAnalyzerProperties = {\n  /**\n   * AQL query to be executed.\n   */\n  queryString: string;\n  /**\n   * If set to `true`, the position is set to `0` for all members of the query result array.\n   *\n   * Default: `false`\n   */\n  collapsePositions?: boolean;\n  /**\n   * If set to `false`, `null` values will be discarded from the View index.\n   *\n   * Default: `true`\n   */\n  keepNull?: boolean;\n  /**\n   * Number between `1` and `1000` that determines the batch size for reading\n   * data from the query.\n   *\n   * Default: `1`\n   */\n  batchSize?: number;\n  /**\n   * Memory limit for query execution in bytes.\n   *\n   * Default: `1048576` (1 MiB)\n   */\n  memoryLimit?: number;\n  /**\n   * Data type of the returned tokens.\n   *\n   * Default: `\"string\"`\n   */\n  returnType?: \"string\" | \"number\" | \"bool\";\n};\n\n/**\n * Analyzer type and type-specific properties for an AQL Analyzer\n */\nexport type AqlAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"aql\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: AqlAnalyzerProperties;\n};\n\n/**\n * Properties of a GeoJSON Analyzer.\n */\nexport type GeoJsonAnalyzerProperties = {\n  /**\n   * If set to `\"centroid\"`, only the centroid of the input geometry will be\n   * computed and indexed.\n   *\n   * If set to `\"point\"` only GeoJSON objects of type Point will be indexed and\n   * all other geometry types will be ignored.\n   *\n   * Default: `\"shape\"`\n   */\n  type?: \"shape\" | \"centroid\" | \"point\";\n  /**\n   * Options for fine-tuning geo queries.\n   *\n   * Default: `{ maxCells: 20, minLevel: 4, maxLevel: 23 }`\n   */\n  options?: { maxCells?: number; minLevel?: number; maxLevel?: number };\n};\n\n/**\n * Analyzer type and type-specific properties for a GeoJSON Analyzer\n */\nexport type GeoJsonAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"geojson\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: GeoJsonAnalyzerProperties;\n};\n\n/**\n * Properties of a GeoPoint Analyzer.\n */\nexport type GeoPointAnalyzerProperties = {\n  /**\n   * Attribute paths of the latitude value relative to the field for which the\n   * Analyzer is defined in the View.\n   */\n  latitude?: string[];\n  /**\n   * Attribute paths of the longitude value relative to the field for which the\n   * Analyzer is defined in the View.\n   */\n  longitude?: string[];\n  /**\n   * Options for fine-tuning geo queries.\n   *\n   * Default: `{ maxCells: 20, minLevel: 4, maxLevel: 23 }`\n   */\n  options?: { minCells?: number; minLevel?: number; maxLevel?: number };\n};\n\n/**\n * Analyzer type and type-specific properties for a GeoPoint Analyzer\n */\nexport type GeoPointAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"geopoint\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: GeoPointAnalyzerProperties;\n};\n\n/**\n * Properties of a Stopwords Analyzer.\n */\nexport type StopwordsAnalyzerProperties = {\n  /**\n   * Array of strings that describe the tokens to be discarded.\n   */\n  stopwords: string[];\n  /**\n   * Whether stopword values should be interpreted as hex-encoded strings.\n   *\n   * Default: `false`\n   */\n  hex?: boolean;\n};\n\n/**\n * Analyzer type and type-specific properties for a Stopwords Analyzer\n */\nexport type StopwordsAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"stopwords\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: StopwordsAnalyzerProperties;\n};\n\n/**\n * Properties of a Segmentation Analyzer.\n */\nexport type SegmentationAnalyzerProperties = {\n  /**\n   * Which tokens should be returned.\n   *\n   * Default: `\"alpha\"`\n   */\n  break?: \"all\" | \"alpha\" | \"graphic\";\n  /**\n   * What case all returned tokens should be converted to if applicable.\n   *\n   * Default: `\"none\"`\n   */\n  case?: \"lower\" | \"upper\" | \"none\";\n};\n\n/**\n * Analyzer type and type-specific properties for a Segmentation Analyzer\n */\nexport type SegmentationAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"segmentation\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: SegmentationAnalyzerProperties;\n};\n\n/**\n * Properties of a Collation Analyzer.\n */\nexport type CollationAnalyzerProperties = {\n  /**\n   * Text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  locale: string;\n};\n\n/**\n * Analyzer type and type-specific properties for a Collation Analyzer\n */\nexport type CollationAnalyzer = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"collation\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: CollationAnalyzerProperties;\n};\n\n/**\n * Represents an Analyzer in a {@link Database}.\n */\nexport class Analyzer {\n  protected _name: string;\n  protected _db: Database;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string) {\n    this._db = db;\n    this._name = name.normalize(\"NFC\");\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB Analyzer.\n   */\n  get isArangoAnalyzer(): true {\n    return true;\n  }\n\n  /**\n   * Name of this Analyzer.\n   *\n   * See also {@link Database.analyzer}.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Checks whether the Analyzer exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * const result = await analyzer.exists();\n   * // result indicates whether the Analyzer exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === ANALYZER_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieves the Analyzer definition for the Analyzer.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * const definition = await analyzer.get();\n   * // definition contains the Analyzer definition\n   * ```\n   */\n  get(): Promise<ArangoResponseMetadata & AnalyzerDescription> {\n    return this._db.request(\n      { path: `/_api/analyzer/${encodeURIComponent(this._name)}` },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Creates a new Analyzer with the given `options` and the instance's name.\n   *\n   * See also {@link Database.createAnalyzer}.\n   *\n   * @param options - Options for creating the Analyzer.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"potatoes\");\n   * await analyzer.create({ type: \"identity\" });\n   * // the identity Analyzer \"potatoes\" now exists\n   * ```\n   */\n  create(options: CreateAnalyzerOptions): Promise<AnalyzerDescription> {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/analyzer\",\n        body: { name: this._name, ...options },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Deletes the Analyzer from the database.\n   *\n   * @param force - Whether the Analyzer should still be deleted even if it\n   * is currently in use.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * await analyzer.drop();\n   * // the Analyzer \"some-analyzer\" no longer exists\n   * ```\n   */\n  drop(\n    force: boolean = false\n  ): Promise<ArangoResponseMetadata & { name: string }> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/analyzer/${encodeURIComponent(this._name)}`,\n        qs: { force },\n      },\n      (res) => res.body\n    );\n  }\n}\n","/**\n * Wrapper around browser `btoa` function to allow substituting a\n * Node.js-specific implementation.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\ndeclare const window: any;\n\n/**\n * @internal\n * @hidden\n */\nexport function btoa(str: string): string {\n  return window.btoa(str);\n}\n","/**\n * Wrapper around the `xhr` module for HTTP(S) requests in the browser.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\nimport { ClientRequest } from \"http\";\nimport { Errback } from \"./errback\";\n\n/**\n * @internal\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport default require(\"xhr\") as (\n  options: any,\n  cb: Errback<any>\n) => ClientRequest;\n","/**\n * Node.js implementation of the HTTP(S) request function.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\nimport { format as formatUrl, parse as parseUrl } from \"url\";\nimport { RequestInterceptors, XhrOptions } from \"../connection\";\nimport { btoa } from \"./btoa\";\nimport { Errback } from \"./errback\";\nimport { joinPath } from \"./joinPath\";\nimport { omit } from \"./omit\";\nimport {\n  ArangojsError,\n  ArangojsResponse,\n  RequestOptions,\n} from \"./request.node\";\nimport xhr from \"./xhr\";\n\nexport const isBrowser = true;\n\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param agentOptions - Options to use for performing requests.\n *\n * @param baseUrl\n * @param agentOptions\n *\n * @internal\n * @hidden\n */\nexport function createRequest(\n  baseUrl: string,\n  agentOptions: XhrOptions & RequestInterceptors\n) {\n  const { auth, ...baseUrlParts } = parseUrl(baseUrl);\n  const options = omit(agentOptions, [\"maxSockets\"]);\n  return function request(\n    { method, url, headers, body, timeout, expectBinary }: RequestOptions,\n    cb: Errback<ArangojsResponse>\n  ) {\n    const urlParts = {\n      ...baseUrlParts,\n      pathname: url.pathname\n        ? baseUrlParts.pathname\n          ? joinPath(baseUrlParts.pathname, url.pathname)\n          : url.pathname\n        : baseUrlParts.pathname,\n      search: url.search\n        ? baseUrlParts.search\n          ? `${baseUrlParts.search}&${url.search.slice(1)}`\n          : url.search\n        : baseUrlParts.search,\n    };\n    if (!headers[\"authorization\"]) {\n      headers[\"authorization\"] = `Basic ${btoa(auth || \"root:\")}`;\n    }\n\n    let callback: Errback<ArangojsResponse> = (err, res) => {\n      callback = () => undefined;\n      cb(err, res);\n    };\n    const req = xhr(\n      {\n        useXDR: true,\n        withCredentials: true,\n        ...options,\n        responseType: expectBinary ? \"blob\" : \"text\",\n        url: formatUrl(urlParts),\n        body,\n        method,\n        headers,\n        timeout,\n      },\n      (err: Error | null, res?: any) => {\n        if (!err) {\n          const response = res as ArangojsResponse;\n          response.request = req;\n          if (!response.body) response.body = \"\";\n          if (options.after) {\n            options.after(null, response);\n          }\n          callback(null, response as ArangojsResponse);\n        } else {\n          const error = err as ArangojsError;\n          error.request = req;\n          if (options.after) {\n            options.after(error);\n          }\n          callback(error);\n        }\n      }\n    );\n    if (options.before) {\n      options.before(req);\n    }\n  };\n}\n","/**\n * Utility function for omitting properties by key.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\n/**\n * @internal\n * @hidden\n */\nexport function omit<T>(obj: T, keys: (keyof T)[]): T {\n  const result = {} as T;\n  for (const key of Object.keys(obj)) {\n    if (keys.includes(key as keyof T)) continue;\n    result[key as keyof T] = obj[key as keyof T];\n  }\n  return result;\n}\n","/**\n * ```ts\n * import type { Config } from \"arangojs/connection\";\n * ```\n *\n * The \"connection\" module provides connection and configuration related types\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ClientRequest } from \"http\";\nimport { AgentOptions as NodeAgentOptions } from \"https\";\nimport { stringify as querystringify } from \"querystring\";\nimport { LinkedList } from \"x3-linkedlist\";\nimport { Database } from \"./database\";\nimport {\n  ArangoError,\n  HttpError,\n  isArangoErrorResponse,\n  isSystemError,\n} from \"./error\";\nimport { btoa } from \"./lib/btoa\";\nimport { Errback } from \"./lib/errback\";\nimport { normalizeUrl } from \"./lib/normalizeUrl\";\nimport {\n  ArangojsError,\n  ArangojsResponse,\n  createRequest,\n  isBrowser,\n  RequestFunction,\n} from \"./lib/request\";\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\n\n/**\n * Generic type representing an object with values of a given value type.\n *\n * @param T - Type of the object's property values.\n */\nexport type Dict<T> = { [key: string]: T };\n\n/**\n * Determines the behavior when multiple URLs are used:\n *\n * - `\"NONE\"`: No load balancing. All requests will be handled by the first\n *   URL in the list until a network error is encountered. On network error,\n *   arangojs will advance to using the next URL in the list.\n *\n * - `\"ONE_RANDOM\"`: Randomly picks one URL from the list initially, then\n *   behaves like `\"NONE\"`.\n *\n * - `\"ROUND_ROBIN\"`: Every sequential request uses the next URL in the list.\n */\nexport type LoadBalancingStrategy = \"NONE\" | \"ROUND_ROBIN\" | \"ONE_RANDOM\";\n\n/**\n * An arbitrary object with string values representing HTTP headers and their\n * values.\n *\n * Header names should always be lowercase.\n */\nexport type Headers = Dict<string>;\n\n/**\n * An arbitrary object with scalar values representing query string parameters\n * and their values.\n */\nexport type Params = Dict<any>;\n\n/**\n * Generic properties shared by all ArangoDB HTTP API responses.\n */\nexport type ArangoResponseMetadata = {\n  /**\n   * Indicates that the request was successful.\n   */\n  error: false;\n  /**\n   * Response status code, typically `200`.\n   */\n  code: number;\n};\n\nfunction clean<T>(obj: T) {\n  const result = {} as typeof obj;\n  for (const key of Object.keys(obj)) {\n    const value = (obj as any)[key];\n    if (value === undefined) continue;\n    (result as any)[key] = value;\n  }\n  return result;\n}\n\n/**\n * Credentials for HTTP Basic authentication.\n */\nexport type BasicAuthCredentials = {\n  /**\n   * Username to use for authentication, e.g. `\"root\"`.\n   */\n  username: string;\n  /**\n   * Password to use for authentication. Defaults to an empty string.\n   */\n  password?: string;\n};\n\n/**\n * Credentials for HTTP Bearer token authentication.\n */\nexport type BearerAuthCredentials = {\n  /**\n   * Bearer token to use for authentication.\n   */\n  token: string;\n};\n\nfunction isBearerAuth(auth: any): auth is BearerAuthCredentials {\n  return auth.hasOwnProperty(\"token\");\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction generateStackTrace() {\n  let err = new Error();\n  if (!err.stack) {\n    try {\n      throw err;\n    } catch (e) {\n      err = e;\n    }\n  }\n  return err;\n}\n\n/**\n * @internal\n * @hidden\n */\ntype UrlInfo = {\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | Params;\n};\n\n/**\n * Options of the `xhr` module that can be set using `agentOptions` when using\n * arangojs in the browser. Additionally `maxSockets` can be used to control\n * the maximum number of parallel requests.\n *\n * See also: {@link https://www.npmjs.com/package/xhr | `xhr` on npm }.\n */\nexport type XhrOptions = {\n  /**\n   * Maximum number of parallel requests arangojs will perform. If any\n   * additional requests are attempted, they will be enqueued until one of the\n   * active requests has completed.\n   */\n  maxSockets?: number;\n  /**\n   * Number of milliseconds to wait for a response.\n   *\n   * Default: `0` (disabled)\n   */\n  timeout?: number;\n  /**\n   * Callback that will be invoked immediately before the `send` method of the\n   * request is called.\n   *\n   * See also {@link RequestInterceptors}.\n   */\n  beforeSend?: (xhrObject: any) => void;\n  /**\n   * `XMLHttpRequest` object to use instead of the native implementation.\n   */\n  xhr?: any;\n  /**\n   * (Internet Explorer 10 and lower only.) Whether `XDomainRequest` should be\n   * used instead of `XMLHttpRequest`. Only required for performing\n   * cross-domain requests in older versions of Internet Explorer.\n   */\n  useXdr?: boolean;\n  /**\n   * Specifies whether browser credentials (e.g. cookies) should be sent if\n   * performing a cross-domain request.\n   *\n   * See {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials | `XMLHttpRequest.withCredentials`}.\n   */\n  withCredentials?: boolean;\n};\n\n/**\n * Additional options for intercepting the request/response. These methods\n * are primarily intended for tracking network related metrics.\n */\nexport type RequestInterceptors = {\n  /**\n   * Callback that will be invoked with the finished request object before it\n   * is finalized. In the browser the request may already have been sent.\n   *\n   * @param req - Request object or XHR instance used for this request.\n   */\n  before?: (req: ClientRequest) => void;\n  /**\n   * Callback that will be invoked when the server response has been received\n   * and processed or when the request has been failed without a response.\n   *\n   * The originating request will be available as the `request` property\n   * on either the error or response object.\n   *\n   * @param err - Error encountered when handling this request or `null`.\n   * @param res - Response object for this request, if no error occurred.\n   */\n  after?: (err: ArangojsError | null, res?: ArangojsResponse) => void;\n};\n\n/**\n * Options for performing a request with arangojs.\n */\nexport type RequestOptions = {\n  /**\n   * @internal\n   *\n   * Identifier of a specific ArangoDB host to use when more than one is known.\n   */\n  host?: number;\n  /**\n   * HTTP method to use in order to perform the request.\n   *\n   * Default: `\"GET\"`\n   */\n  method?: string;\n  /**\n   * Request body data.\n   */\n  body?: any;\n  /**\n   * If set to `true`, the response body will not be interpreted as JSON and\n   * instead passed as-is.\n   */\n  expectBinary?: boolean;\n  /**\n   * If set to `true`, the request body will not be converted to JSON and\n   * instead passed as-is.\n   */\n  isBinary?: boolean;\n  /**\n   * Whether ArangoDB is allowed to perform a dirty read to respond to this\n   * request. If set to `true`, the response may reflect a dirty state from\n   * a non-authoritative server.\n   */\n  allowDirtyRead?: boolean;\n  /**\n   * HTTP headers to pass along with this request in addition to the default\n   * headers generated by arangojs.\n   */\n  headers?: Headers;\n  /**\n   * Time in milliseconds after which arangojs will abort the request if the\n   * socket has not already timed out.\n   *\n   * See also `agentOptions.timeout` in {@link Config}.\n   */\n  timeout?: number;\n  /**\n   * Optional prefix path to prepend to the `path`.\n   */\n  basePath?: string;\n  /**\n   * URL path, relative to the `basePath` and server domain.\n   */\n  path?: string;\n  /**\n   * URL parameters to pass as part of the query string.\n   */\n  qs?: string | Params;\n};\n\n/**\n * @internal\n * @hidden\n */\ntype Task = {\n  host?: number;\n  stack?: () => string;\n  allowDirtyRead: boolean;\n  resolve: (res: ArangojsResponse) => void;\n  reject: (error: Error) => void;\n  retries: number;\n  options: {\n    method: string;\n    expectBinary: boolean;\n    timeout?: number;\n    url: { pathname: string; search?: string };\n    headers: Headers;\n    body: any;\n  };\n};\n\n/**\n * Options for creating the Node.js `http.Agent` or `https.Agent`.\n *\n * In browser environments this option can be used to pass additional options\n * to the underlying calls of the\n * {@link https://www.npmjs.com/package/xhr | xhr module}.\n *\n * See also {@link https://nodejs.org/api/http.html#http_new_agent_options | `http.Agent`}\n * and {@link https://nodejs.org/api/https.html#https_new_agent_options | `https.Agent`}\n * (when using TLS).\n */\nexport type AgentOptions = NodeAgentOptions | XhrOptions;\n\n/**\n * Options for configuring arangojs.\n */\nexport type Config = {\n  /**\n   * Name of the database to use.\n   *\n   * Default: `\"_system\"`\n   */\n  databaseName?: string;\n  /**\n   * Base URL of the ArangoDB server or list of server URLs.\n   *\n   * When working with a cluster or a single server with leader/follower\n   * failover, the method {@link Database.acquireHostList} can be used to\n   * automatically pick up additional coordinators/followers at any point.\n   *\n   * When running ArangoDB on a unix socket, e.g. `/tmp/arangodb.sock`, the\n   * following URL formats are supported for unix sockets:\n   *\n   * - `unix:///tmp/arangodb.sock` (no SSL)\n   * - `http+unix:///tmp/arangodb.sock` (or `https+unix://` for SSL)\n   * - `http://unix:/tmp/arangodb.sock` (or `https://unix:` for SSL)\n   *\n   * Additionally `ssl` and `tls` are treated as synonymous with `https` and\n   * `tcp` is treated as synonymous with `http`, so the following URLs are\n   * considered identical:\n   *\n   * - `tcp://localhost:8529` and `http://localhost:8529`\n   * - `ssl://localhost:8529` and `https://localhost:8529`\n   * - `tcp+unix:///tmp/arangodb.sock` and `http+unix:///tmp/arangodb.sock`\n   * - `ssl+unix:///tmp/arangodb.sock` and `https+unix:///tmp/arangodb.sock`\n   * - `tcp://unix:/tmp/arangodb.sock` and `http://unix:/tmp/arangodb.sock`\n   * - `ssl://unix:/tmp/arangodb.sock` and `https://unix:/tmp/arangodb.sock`\n   *\n   * See also `auth` for passing authentication credentials.\n   *\n   * Default: `\"http://localhost:8529\"`\n   */\n  url?: string | string[];\n  /**\n   * Credentials to use for authentication.\n   *\n   * See also {@link Database.useBasicAuth} and {@link Database.useBearerAuth}.\n   *\n   * Default: `{ username: \"root\", password: \"\" }`\n   */\n  auth?: BasicAuthCredentials | BearerAuthCredentials;\n  /**\n   * Numeric representation of the ArangoDB version the driver should expect.\n   * The format is defined as `XYYZZ` where `X` is the major version, `Y` is\n   * the zero-filled two-digit minor version and `Z` is the zero-filled two-digit\n   * bugfix version, e.g. `30102` for 3.1.2, `20811` for 2.8.11.\n   *\n   * Depending on this value certain methods may become unavailable or change\n   * their behavior to remain compatible with different versions of ArangoDB.\n   *\n   * Default: `30400`\n   */\n  arangoVersion?: number;\n  /**\n   * Determines the behavior when multiple URLs are provided:\n   *\n   * - `\"NONE\"`: No load balancing. All requests will be handled by the first\n   *   URL in the list until a network error is encountered. On network error,\n   *   arangojs will advance to using the next URL in the list.\n   *\n   * - `\"ONE_RANDOM\"`: Randomly picks one URL from the list initially, then\n   *   behaves like `\"NONE\"`.\n   *\n   * - `\"ROUND_ROBIN\"`: Every sequential request uses the next URL in the list.\n   *\n   * Default: `\"NONE\"`\n   */\n  loadBalancingStrategy?: LoadBalancingStrategy;\n  /**\n   * Determines the behavior when a request fails because the underlying\n   * connection to the server could not be opened\n   * (i.e. {@link https://nodejs.org/api/errors.html#errors_common_system_errors | `ECONNREFUSED` in Node.js}):\n   *\n   * - `false`: the request fails immediately.\n   *\n   * - `0`: the request is retried until a server can be reached but only a\n   *   total number of times matching the number of known servers (including\n   *   the initial failed request).\n   *\n   * - any other number: the request is retried until a server can be reached\n   *   the request has been retried a total of `maxRetries` number of times\n   *   (not including the initial failed request).\n   *\n   * When working with a single server without leader/follower failover, the\n   * retries (if any) will be made to the same server.\n   *\n   * This setting currently has no effect when using arangojs in a browser.\n   *\n   * **Note**: Requests bound to a specific server (e.g. fetching query results)\n   * will never be retried automatically and ignore this setting.\n   *\n   * Default: `0`\n   */\n  maxRetries?: false | number;\n  /**\n   * An http `Agent` instance to use for connections.\n   *\n   * By default a new `Agent` instance will be created using the `agentOptions`.\n   *\n   * This option has no effect when using the browser version of arangojs.\n   *\n   * See also: {@link https://nodejs.org/api/http.html#http_new_agent_options | `http.Agent`}\n   * and {@link https://nodejs.org/api/https.html#https_new_agent_options | `https.Agent`}\n   * (when using TLS).\n   */\n  agent?: any;\n  /**\n   * Options used to create that underlying HTTP/HTTPS `Agent` (or the `xhr`\n   * module when using arangojs in the browser). This will be ignored if\n   * `agent` is also provided.\n   *\n   * The option `maxSockets` is also used to limit how many requests\n   * arangojs will perform concurrently. The maximum number of requests is\n   * equal to `maxSockets`.\n   *\n   * **Note:** arangojs will limit the number of concurrent requests based on\n   * this value even if an `agent` is provided.\n   *\n   * **Note:** when using `ROUND_ROBIN` load balancing and passing an array of\n   * URLs in the `url` option, the default value of `maxSockets` will be set\n   * to `3 * url.length` instead of `3`.\n   *\n   * Default (Node.js): `{ maxSockets: 3, keepAlive: true, keepAliveMsecs: 1000 }`\n   *\n   * Default (browser): `{ maxSockets: 3, useXDR: true, withCredentials: true }`\n   */\n  agentOptions?: AgentOptions & RequestInterceptors;\n  /**\n   * An object with additional headers to send with every request.\n   *\n   * If an `\"authorization\"` header is provided, it will be overridden when\n   * using {@link Database.useBasicAuth}, {@link Database.useBearerAuth} or\n   * the `auth` configuration option.\n   */\n  headers?: Headers;\n  /**\n   * If set to `true`, arangojs will generate stack traces every time a request\n   * is initiated and augment the stack traces of any errors it generates.\n   *\n   * **Warning**: This will cause arangojs to generate stack traces in advance\n   * even if the request does not result in an error. Generating stack traces\n   * may negatively impact performance.\n   */\n  precaptureStackTraces?: boolean;\n  /**\n   * Limits the number of values of server-reported response queue times that\n   * will be stored and accessible using {@link Database.queueTime}. If set to\n   * a finite value, older values will be discarded to make room for new values\n   * when that limit is reached.\n   *\n   * Default: `10`\n   */\n  responseQueueTimeSamples?: number;\n};\n\n/**\n * Indicates whether the given value represents a {@link Connection}.\n *\n * @param connection - A value that might be a connection.\n *\n * @internal\n * @hidden\n */\nexport function isArangoConnection(connection: any): connection is Connection {\n  return Boolean(connection && connection.isArangoConnection);\n}\n\n/**\n * Represents a connection pool shared by one or more databases.\n *\n * @internal\n * @hidden\n */\nexport class Connection {\n  protected _activeTasks: number = 0;\n  protected _agent?: any;\n  protected _agentOptions: { [key: string]: any };\n  protected _arangoVersion: number = 30400;\n  protected _headers: Headers;\n  protected _loadBalancingStrategy: LoadBalancingStrategy;\n  protected _useFailOver: boolean;\n  protected _shouldRetry: boolean;\n  protected _maxRetries: number;\n  protected _maxTasks: number;\n  protected _queue = new LinkedList<Task>();\n  protected _databases = new Map<string, Database>();\n  protected _hosts: RequestFunction[] = [];\n  protected _urls: string[] = [];\n  protected _activeHost: number;\n  protected _activeDirtyHost: number;\n  protected _transactionId: string | null = null;\n  protected _precaptureStackTraces: boolean;\n  protected _responseQueueTimeSamples: number;\n  protected _queueTimes = new LinkedList<[number, number]>();\n\n  /**\n   * @internal\n   *\n   * Creates a new `Connection` instance.\n   *\n   * @param config - An object with configuration options.\n   *\n   * @hidden\n   */\n  constructor(config: Omit<Config, \"databaseName\"> = {}) {\n    const URLS = config.url\n      ? Array.isArray(config.url)\n        ? config.url\n        : [config.url]\n      : [\"http://localhost:8529\"];\n    const MAX_SOCKETS =\n      3 * (config.loadBalancingStrategy === \"ROUND_ROBIN\" ? URLS.length : 1);\n\n    if (config.arangoVersion !== undefined) {\n      this._arangoVersion = config.arangoVersion;\n    }\n    this._agent = config.agent;\n    this._agentOptions = isBrowser\n      ? { maxSockets: MAX_SOCKETS, ...config.agentOptions }\n      : {\n          maxSockets: MAX_SOCKETS,\n          keepAlive: true,\n          keepAliveMsecs: 1000,\n          scheduling: \"lifo\",\n          ...config.agentOptions,\n        };\n    this._maxTasks = this._agentOptions.maxSockets;\n    this._headers = { ...config.headers };\n    this._loadBalancingStrategy = config.loadBalancingStrategy ?? \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n    this._precaptureStackTraces = Boolean(config.precaptureStackTraces);\n    this._responseQueueTimeSamples = config.responseQueueTimeSamples ?? 10;\n    if (this._responseQueueTimeSamples < 0) {\n      this._responseQueueTimeSamples = Infinity;\n    }\n    if (config.maxRetries === false) {\n      this._shouldRetry = false;\n      this._maxRetries = 0;\n    } else {\n      this._shouldRetry = true;\n      this._maxRetries = config.maxRetries ?? 0;\n    }\n\n    this.addToHostList(URLS);\n\n    if (config.auth) {\n      if (isBearerAuth(config.auth)) {\n        this.setBearerAuth(config.auth);\n      } else {\n        this.setBasicAuth(config.auth);\n      }\n    }\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n      this._activeDirtyHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n      this._activeDirtyHost = 0;\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB connection.\n   */\n  get isArangoConnection(): true {\n    return true;\n  }\n\n  get queueTime() {\n    return {\n      getLatest: () => this._queueTimes.last?.value[1],\n      getValues: () => Array.from(this._queueTimes.values()),\n      getAvg: () => {\n        let avg = 0;\n        for (const [, [, value]] of this._queueTimes) {\n          avg += value / this._queueTimes.length;\n        }\n        return avg;\n      },\n    };\n  }\n\n  protected _runQueue() {\n    if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n    const task = this._queue.shift()!;\n    let host = this._activeHost;\n    if (task.host !== undefined) {\n      host = task.host;\n    } else if (task.allowDirtyRead) {\n      host = this._activeDirtyHost;\n      this._activeDirtyHost = (this._activeDirtyHost + 1) % this._hosts.length;\n      task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n    } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n      this._activeHost = (this._activeHost + 1) % this._hosts.length;\n    }\n    this._activeTasks += 1;\n    const callback: Errback<ArangojsResponse> = (err, res) => {\n      this._activeTasks -= 1;\n      if (err) {\n        if (\n          !task.allowDirtyRead &&\n          this._hosts.length > 1 &&\n          this._activeHost === host &&\n          this._useFailOver\n        ) {\n          this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n        if (\n          !task.host &&\n          this._shouldRetry &&\n          task.retries < (this._maxRetries || this._hosts.length - 1) &&\n          isSystemError(err) &&\n          err.syscall === \"connect\" &&\n          err.code === \"ECONNREFUSED\"\n        ) {\n          task.retries += 1;\n          this._queue.push(task);\n        } else {\n          if (task.stack) {\n            err.stack += task.stack();\n          }\n          task.reject(err);\n        }\n      } else {\n        const response = res!;\n        if (\n          response.statusCode === 503 &&\n          response.headers[LEADER_ENDPOINT_HEADER]\n        ) {\n          const url = response.headers[LEADER_ENDPOINT_HEADER]!;\n          const [index] = this.addToHostList(url);\n          task.host = index;\n          if (this._activeHost === host) {\n            this._activeHost = index;\n          }\n          this._queue.push(task);\n        } else {\n          response.arangojsHostId = host;\n          task.resolve(response);\n        }\n      }\n      this._runQueue();\n    };\n    try {\n      this._hosts[host](task.options, callback);\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  protected _buildUrl({ basePath, path, qs }: UrlInfo) {\n    const pathname = `${basePath || \"\"}${path || \"\"}`;\n    let search;\n    if (qs) {\n      if (typeof qs === \"string\") search = `?${qs}`;\n      else search = `?${querystringify(clean(qs))}`;\n    }\n    return search ? { pathname, search } : { pathname };\n  }\n\n  setBearerAuth(auth: BearerAuthCredentials) {\n    this.setHeader(\"authorization\", `Bearer ${auth.token}`);\n  }\n\n  setBasicAuth(auth: BasicAuthCredentials) {\n    this.setHeader(\n      \"authorization\",\n      `Basic ${btoa(`${auth.username}:${auth.password}`)}`\n    );\n  }\n\n  setResponseQueueTimeSamples(responseQueueTimeSamples: number) {\n    if (responseQueueTimeSamples < 0) {\n      responseQueueTimeSamples = Infinity;\n    }\n    this._responseQueueTimeSamples = responseQueueTimeSamples;\n    while (this._responseQueueTimeSamples < this._queueTimes.length) {\n      this._queueTimes.shift();\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Fetches a {@link Database} instance for the given database name from the\n   * internal cache, if available.\n   *\n   * @param databaseName - Name of the database.\n   */\n  database(databaseName: string): Database | undefined;\n  /**\n   * @internal\n   *\n   * Adds a {@link Database} instance for the given database name to the\n   * internal cache.\n   *\n   * @param databaseName - Name of the database.\n   * @param database - Database instance to add to the cache.\n   */\n  database(databaseName: string, database: Database): Database;\n  /**\n   * @internal\n   *\n   * Clears any {@link Database} instance stored for the given database name\n   * from the internal cache, if present.\n   *\n   * @param databaseName - Name of the database.\n   * @param database - Must be `null`.\n   */\n  database(databaseName: string, database: null): undefined;\n  database(\n    databaseName: string,\n    database?: Database | null\n  ): Database | undefined {\n    if (database === null) {\n      this._databases.delete(databaseName);\n      return undefined;\n    }\n    if (!database) {\n      return this._databases.get(databaseName);\n    }\n    this._databases.set(databaseName, database);\n    return database;\n  }\n\n  /**\n   * @internal\n   *\n   * Adds the given URL or URLs to the host list.\n   *\n   * See {@link Connection.acquireHostList}.\n   *\n   * @param urls - URL or URLs to add.\n   */\n  addToHostList(urls: string | string[]): number[] {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map((url) =>\n      normalizeUrl(url)\n    );\n    const newUrls = cleanUrls.filter((url) => this._urls.indexOf(url) === -1);\n    this._urls.push(...newUrls);\n    this._hosts.push(\n      ...newUrls.map((url: string) =>\n        createRequest(url, this._agentOptions, this._agent)\n      )\n    );\n    return cleanUrls.map((url) => this._urls.indexOf(url));\n  }\n\n  /**\n   * @internal\n   *\n   * Sets the connection's active `transactionId`.\n   *\n   * While set, all requests will use this ID, ensuring the requests are executed\n   * within the transaction if possible. Setting the ID manually may cause\n   * unexpected behavior.\n   *\n   * See also {@link Connection.clearTransactionId}.\n   *\n   * @param transactionId - ID of the active transaction.\n   */\n  setTransactionId(transactionId: string) {\n    this._transactionId = transactionId;\n  }\n\n  /**\n   * @internal\n   *\n   * Clears the connection's active `transactionId`.\n   */\n  clearTransactionId() {\n    this._transactionId = null;\n  }\n\n  /**\n   * @internal\n   *\n   * Sets the header `headerName` with the given `value` or clears the header if\n   * `value` is `null`.\n   *\n   * @param headerName - Name of the header to set.\n   * @param value - Value of the header.\n   */\n  setHeader(headerName: string, value: string | null) {\n    if (value === null) {\n      delete this._headers[headerName];\n    } else {\n      this._headers[headerName] = value;\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Closes all open connections.\n   *\n   * See {@link Database.close}.\n   */\n  close() {\n    for (const host of this._hosts) {\n      if (host.close) host.close();\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Waits for propagation.\n   *\n   * See {@link Database.waitForPropagation}.\n   *\n   * @param request - Request to perform against each coordinator.\n   * @param timeout - Maximum number of milliseconds to wait for propagation.\n   */\n  async waitForPropagation(request: RequestOptions, timeout = Infinity) {\n    const numHosts = this._hosts.length;\n    const propagated = [] as number[];\n    const started = Date.now();\n    let host = 0;\n    while (true) {\n      if (propagated.length === numHosts) {\n        return;\n      }\n      while (propagated.includes(host)) {\n        host = (host + 1) % numHosts;\n      }\n      try {\n        await this.request({ ...request, host });\n      } catch (e) {\n        if (started + timeout < Date.now()) {\n          throw e;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        continue;\n      }\n      if (!propagated.includes(host)) {\n        propagated.push(host);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Performs a request using the arangojs connection pool.\n   */\n  request<T = ArangojsResponse>(\n    {\n      host,\n      method = \"GET\",\n      body,\n      expectBinary = false,\n      isBinary = false,\n      allowDirtyRead = false,\n      timeout = 0,\n      headers,\n      ...urlInfo\n    }: RequestOptions,\n    transform?: (res: ArangojsResponse) => T\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let contentType = \"text/plain\";\n      if (isBinary) {\n        contentType = \"application/octet-stream\";\n      } else if (body) {\n        if (typeof body === \"object\") {\n          body = JSON.stringify(body);\n          contentType = \"application/json\";\n        } else {\n          body = String(body);\n        }\n      }\n\n      const extraHeaders: Headers = {\n        ...this._headers,\n        \"content-type\": contentType,\n        \"x-arango-version\": String(this._arangoVersion),\n      };\n\n      if (this._transactionId) {\n        extraHeaders[\"x-arango-trx-id\"] = this._transactionId;\n      }\n\n      const task: Task = {\n        retries: 0,\n        host,\n        allowDirtyRead,\n        options: {\n          url: this._buildUrl(urlInfo),\n          headers: { ...extraHeaders, ...headers },\n          timeout,\n          method,\n          expectBinary,\n          body,\n        },\n        reject,\n        resolve: (res: ArangojsResponse) => {\n          const contentType = res.headers[\"content-type\"];\n          const queueTime = res.headers[\"x-arango-queue-time-seconds\"];\n          if (queueTime) {\n            this._queueTimes.push([Date.now(), Number(queueTime)]);\n            while (this._responseQueueTimeSamples < this._queueTimes.length) {\n              this._queueTimes.shift();\n            }\n          }\n          let parsedBody: any = undefined;\n          if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n            try {\n              parsedBody = res.body;\n              parsedBody = JSON.parse(parsedBody);\n            } catch (e) {\n              if (!expectBinary) {\n                if (typeof parsedBody !== \"string\") {\n                  parsedBody = res.body.toString(\"utf-8\");\n                }\n                e.response = res;\n                if (task.stack) {\n                  e.stack += task.stack();\n                }\n                reject(e);\n                return;\n              }\n            }\n          } else if (res.body && !expectBinary) {\n            parsedBody = res.body.toString(\"utf-8\");\n          } else {\n            parsedBody = res.body;\n          }\n          if (isArangoErrorResponse(parsedBody)) {\n            res.body = parsedBody;\n            const err = new ArangoError(res);\n            if (task.stack) {\n              err.stack += task.stack();\n            }\n            reject(err);\n          } else if (res.statusCode && res.statusCode >= 400) {\n            res.body = parsedBody;\n            const err = new HttpError(res);\n            if (task.stack) {\n              err.stack += task.stack();\n            }\n            reject(err);\n          } else {\n            if (!expectBinary) res.body = parsedBody;\n            resolve(transform ? transform(res) : (res as any));\n          }\n        },\n      };\n\n      if (this._precaptureStackTraces) {\n        if (typeof Error.captureStackTrace === \"function\") {\n          const capture = {} as { readonly stack: string };\n          Error.captureStackTrace(capture);\n          task.stack = () =>\n            `\\n${capture.stack.split(\"\\n\").slice(3).join(\"\\n\")}`;\n        } else {\n          const capture = generateStackTrace() as { readonly stack: string };\n          if (Object.prototype.hasOwnProperty.call(capture, \"stack\")) {\n            task.stack = () =>\n              `\\n${capture.stack.split(\"\\n\").slice(4).join(\"\\n\")}`;\n          }\n        }\n      }\n\n      this._queue.push(task);\n      this._runQueue();\n    });\n  }\n}\n","/**\n * Utility function for normalizing URLs.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\n/**\n * @internal\n * @hidden\n */\nexport function normalizeUrl(url: string): string {\n  const raw = url.match(/^(tcp|ssl|tls)((?::|\\+).+)/);\n  if (raw) url = (raw[1] === \"tcp\" ? \"http\" : \"https\") + raw[2];\n  const unix = url.match(/^(?:(http|https)\\+)?unix:\\/\\/(\\/.+)/);\n  if (unix) url = `${unix[1] || \"http\"}://unix:${unix[2]}`;\n  return url;\n}\n","/**\n * Utility function for constructing a multipart form in the browser.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\n\nimport { Errback } from \"./errback\";\nimport { Fields, MultipartRequest } from \"./multipart\";\n\ndeclare const FormData: any;\ndeclare const Blob: any;\n\n/**\n * @internal\n * @hidden\n */\nexport function toForm(fields: Fields, callback: Errback<MultipartRequest>) {\n  let form;\n  try {\n    form = new FormData();\n    for (const key of Object.keys(fields)) {\n      let value = fields[key];\n      if (value === undefined) continue;\n      if (\n        !(value instanceof Blob) &&\n        (typeof value === \"object\" || typeof value === \"function\")\n      ) {\n        value = JSON.stringify(value);\n      }\n      form.append(key, value);\n    }\n  } catch (e) {\n    callback(e);\n    return;\n  }\n  callback(null, { body: form });\n}\n","/**\n * ```ts\n * import type { Route } from \"arangojs/route\";\n * ```\n *\n * The \"route\" module provides route related types and interfaces for TypeScript.\n *\n * @packageDocumentation\n */\nimport { Headers, Params, RequestOptions } from \"./connection\";\nimport { Database } from \"./database\";\nimport { ArangojsResponse } from \"./lib/request\";\n\n/**\n * Represents an arbitrary route relative to an ArangoDB database.\n */\nexport class Route {\n  protected _db: Database;\n  protected _path: string;\n  protected _headers: Headers;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, path: string = \"\", headers: Headers = {}) {\n    if (!path) path = \"\";\n    else if (path.charAt(0) !== \"/\") path = `/${path}`;\n    this._db = db;\n    this._path = path;\n    this._headers = headers;\n  }\n\n  /**\n   * Creates a new route relative to this route that inherits any of its default\n   * HTTP headers.\n   *\n   * @param path - Path relative to this route.\n   * @param headers - Additional headers that will be sent with each request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * ```\n   */\n  route(path: string, headers?: Headers) {\n    if (!path) path = \"\";\n    else if (path.charAt(0) !== \"/\") path = `/${path}`;\n    return new Route(this._db, this._path + path, {\n      ...this._headers,\n      ...headers,\n    });\n  }\n\n  /**\n   * Performs an arbitrary HTTP request relative to this route and returns the\n   * server response.\n   *\n   * @param options - Options for performing the request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.request({\n   *   method: \"POST\",\n   *   path: \"/users\",\n   *   body: {\n   *     username: \"admin\",\n   *     password: \"hunter2\"\n   *   }\n   * });\n   * ```\n   */\n  request(options?: RequestOptions) {\n    const opts = { ...options };\n    if (!opts.path || opts.path === \"/\") opts.path = \"\";\n    else if (!this._path || opts.path.charAt(0) === \"/\") opts.path = opts.path;\n    else opts.path = `/${opts.path}`;\n    opts.basePath = this._path;\n    opts.headers = { ...this._headers, ...opts.headers };\n    opts.method = opts.method ? opts.method.toUpperCase() : \"GET\";\n    return this._db.request(opts);\n  }\n\n  /**\n   * Performs a DELETE request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param path - Path relative to this route.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.delete(\"/users/admin\");\n   * ```\n   */\n  delete(\n    path: string,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  /**\n   * Performs a DELETE request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const user = foxx.roue(\"/users/admin\");\n   * const res = await user.delete();\n   * ```\n   */\n  delete(qs?: Params, headers?: Headers): Promise<ArangojsResponse>;\n  delete(...args: any[]): Promise<ArangojsResponse> {\n    const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [qs, headers] = args;\n    return this.request({ method: \"DELETE\", path, qs, headers });\n  }\n\n  /**\n   * Performs a GET request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param path - Path relative to this route.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.get(\"/users\", { offset: 10, limit: 5 });\n   * ```\n   */\n  get(\n    path: string,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  /**\n   * Performs a GET request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * const res = await users.get({ offset: 10, limit: 5 });\n   * ```\n   */\n  get(qs?: Params, headers?: Headers): Promise<ArangojsResponse>;\n  get(...args: any[]): Promise<ArangojsResponse> {\n    const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [qs, headers] = args;\n    return this.request({ method: \"GET\", path, qs, headers });\n  }\n\n  /**\n   * Performs a HEAD request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param path - Path relative to this route.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.head(\"/users\", { offset: 10, limit: 5 });\n   * ```\n   */\n  head(\n    path: string,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  /**\n   * Performs a HEAD request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * const res = await users.head({ offset: 10, limit: 5 });\n   * ```\n   */\n  head(qs?: Params, headers?: Headers): Promise<ArangojsResponse>;\n  head(...args: any[]): Promise<ArangojsResponse> {\n    const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [qs, headers] = args;\n    return this.request({ method: \"HEAD\", path, qs, headers });\n  }\n\n  /**\n   * Performs a PATCH request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param path - Path relative to this route.\n   * @param body - Body of the request object.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.patch(\"/users/admin\", { password: \"admin\" });\n   * ```\n   */\n  patch(\n    path: string,\n    body?: any,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  /**\n   * Performs a PATCH request against the given path relative to this route\n   * and returns the server response.\n   *\n   * **Note**: `body` must not be a `string`.\n   *\n   * @param body - Body of the request object. Must not be a string.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const user = foxx.route(\"/users/admin\")\n   * const res = await user.patch({ password: \"admin\" });\n   * ```\n   */\n  patch(\n    body?: any,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  patch(...args: any[]): Promise<ArangojsResponse> {\n    const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [body, qs, headers] = args;\n    return this.request({ method: \"PATCH\", path, body, qs, headers });\n  }\n\n  /**\n   * Performs a POST request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param path - Path relative to this route.\n   * @param body - Body of the request object.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.post(\"/users\", {\n   *   username: \"admin\",\n   *   password: \"hunter2\"\n   * });\n   * ```\n   */\n  post(\n    path: string,\n    body?: any,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  /**\n   * Performs a POST request against the given path relative to this route\n   * and returns the server response.\n   *\n   * **Note**: `body` must not be a `string`.\n   *\n   * @param body - Body of the request object. Must not be a string.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * const res = await users.post({\n   *   username: \"admin\",\n   *   password: \"hunter2\"\n   * });\n   * ```\n   */\n  post(\n    body?: any,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  post(...args: any[]): Promise<ArangojsResponse> {\n    const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [body, qs, headers] = args;\n    return this.request({ method: \"POST\", path, body, qs, headers });\n  }\n\n  /**\n   * Performs a PUT request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param path - Path relative to this route.\n   * @param body - Body of the request object.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.put(\"/users/admin/password\", { password: \"admin\" });\n   * ```\n   */\n  put(\n    path: string,\n    body?: any,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  /**\n   * Performs a PUT request against the given path relative to this route\n   * and returns the server response.\n   *\n   * **Note**: `body` must not be a `string`.\n   *\n   * @param body - Body of the request object. Must not be a string.\n   * @param qs - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const password = foxx.route(\"/users/admin/password\");\n   * const res = await password.put({ password: \"admin\" });\n   * ```\n   */\n  put(\n    body?: any,\n    qs?: string | Params,\n    headers?: Headers\n  ): Promise<ArangojsResponse>;\n  put(...args: any[]): Promise<ArangojsResponse> {\n    const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [body, qs, headers] = args;\n    return this.request({ method: \"PUT\", path, body, qs, headers });\n  }\n}\n","/**\n * ```ts\n * import type { Transaction } from \"arangojs/transaction\";\n * ```\n *\n * The \"transaction\" module provides transaction related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport { Connection } from \"./connection\";\nimport { Database } from \"./database\";\nimport { isArangoError } from \"./error\";\nimport { TRANSACTION_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * Indicates whether the given value represents a {@link Transaction}.\n *\n * @param transaction - A value that might be a transaction.\n */\nexport function isArangoTransaction(\n  transaction: any\n): transaction is Transaction {\n  return Boolean(transaction && transaction.isArangoTransaction);\n}\n\n/**\n * Status of a given transaction.\n *\n * See also {@link TransactionDetails}.\n */\nexport type TransactionStatus = {\n  /**\n   * Unique identifier of the transaction.\n   */\n  id: string;\n  /**\n   * Status of the transaction.\n   */\n  status: \"running\" | \"committed\" | \"aborted\";\n};\n\n/**\n * Represents a streaming transaction in a {@link Database}.\n */\nexport class Transaction {\n  protected _db: Database;\n  protected _id: string;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, id: string) {\n    this._db = db;\n    this._id = id;\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB transaction.\n   */\n  get isArangoTransaction(): true {\n    return true;\n  }\n\n  /**\n   * Unique identifier of this transaction.\n   *\n   * See {@link Database.transaction}.\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Checks whether the transaction exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const trx = db.transaction(\"some-transaction\");\n   * const result = await trx.exists();\n   * // result indicates whether the transaction exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === TRANSACTION_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieves general information about the transaction.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const col = db.collection(\"some-collection\");\n   * const trx = db.beginTransaction(col);\n   * await trx.step(() => col.save({ hello: \"world\" }));\n   * const info = await trx.get();\n   * // the transaction exists\n   * ```\n   */\n  get(): Promise<TransactionStatus> {\n    return this._db.request(\n      {\n        path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n      },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Attempts to commit the transaction to the databases.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const col = db.collection(\"some-collection\");\n   * const trx = db.beginTransaction(col);\n   * await trx.step(() => col.save({ hello: \"world\" }));\n   * const result = await trx.commit();\n   * // result indicates the updated transaction status\n   * ```\n   */\n  commit(): Promise<TransactionStatus> {\n    return this._db.request(\n      {\n        method: \"PUT\",\n        path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n      },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Attempts to abort the transaction to the databases.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const col = db.collection(\"some-collection\");\n   * const trx = db.beginTransaction(col);\n   * await trx.step(() => col.save({ hello: \"world\" }));\n   * const result = await trx.abort();\n   * // result indicates the updated transaction status\n   * ```\n   */\n  abort(): Promise<TransactionStatus> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n      },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Executes the given function locally as a single step of the transaction.\n   *\n   * @param T - Type of the callback's returned promise.\n   * @param callback - Callback function returning a promise.\n   *\n   * **Warning**: The callback function should wrap a single call of an async\n   * arangojs method (e.g. a method on a `Collection` object of a collection\n   * that is involved in the transaction or the `db.query` method).\n   * If the callback function is async, only the first promise-returning (or\n   * async) method call will be executed as part of the transaction. See the\n   * examples below for how to avoid common mistakes when using this method.\n   *\n   * **Note**: Avoid defining the callback as an async function if possible\n   * as arangojs will throw an error if the callback did not return a promise.\n   * Async functions will return an empty promise by default, making it harder\n   * to notice if you forgot to return something from the callback.\n   *\n   * **Note**: Although almost anything can be wrapped in a callback and passed\n   * to this method, that does not guarantee ArangoDB can actually do it in a\n   * transaction. Refer to the ArangoDB documentation if you are unsure whether\n   * a given operation can be executed as part of a transaction. Generally any\n   * modification or retrieval of data is eligible but modifications of\n   * collections or databases are not.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction({ write: [vertices, edges] });\n   *\n   * // The following code will be part of the transaction\n   * const left = await trx.step(() => vertices.save({ label: \"left\" }));\n   * const right = await trx.step(() => vertices.save({ label: \"right\" }));\n   *\n   * // Results from preceding actions can be used normally\n   * await trx.step(() => edges.save({\n   *   _from: left._id,\n   *   _to: right._id,\n   *   data: \"potato\"\n   * }));\n   *\n   * // Transaction must be committed for changes to take effected\n   * // Always call either trx.commit or trx.abort to end a transaction\n   * await trx.commit();\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! If the callback is an async function it must only use await once!\n   * await trx.step(async () => {\n   *   await collection.save(data);\n   *   await collection.save(moreData); // WRONG\n   * });\n   *\n   * // BAD! Callback function must use only one arangojs call!\n   * await trx.step(() => {\n   *  return collection.save(data)\n   *    .then(() => collection.save(moreData)); // WRONG\n   * });\n   *\n   * // BETTER: Wrap every arangojs method call that should be part of the\n   * // transaction in a separate `trx.step` call\n   * await trx.step(() => collection.save(data));\n   * await trx.step(() => collection.save(moreData));\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! If the callback is an async function it must not await before\n   * // calling an arangojs method!\n   * await trx.step(async () => {\n   *   await doSomethingElse();\n   *   return collection.save(data); // WRONG\n   * });\n   *\n   * // BAD! Any arangojs inside the callback must not happen inside a promise\n   * // method!\n   * await trx.step(() => {\n   *   return doSomethingElse()\n   *     .then(() => collection.save(data)); // WRONG\n   * });\n   *\n   * // BETTER: Perform any async logic needed outside the `trx.step` call\n   * await doSomethingElse();\n   * await trx.step(() => collection.save(data));\n   *\n   * // OKAY: You can perform async logic in the callback after the arangojs\n   * // method call as long as it does not involve additional arangojs method\n   * // calls, but this makes it easy to make mistakes later\n   * await trx.step(async () => {\n   *   await collection.save(data);\n   *   await doSomethingDifferent(); // no arangojs method calls allowed\n   * });\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! The callback should not use any functions that themselves use any\n   * // arangojs methods!\n   * async function saveSomeData() {\n   *   await collection.save(data);\n   *   await collection.save(moreData);\n   * }\n   * await trx.step(() => saveSomeData()); // WRONG\n   *\n   * // BETTER: Pass the transaction to functions that need to call arangojs\n   * // methods inside a transaction\n   * async function saveSomeData(trx) {\n   *   await trx.step(() => collection.save(data));\n   *   await trx.step(() => collection.save(moreData));\n   * }\n   * await saveSomeData(); // no `trx.step` call needed\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! You must wait for the promise to resolve (or await on the\n   * // `trx.step` call) before calling `trx.step` again!\n   * trx.step(() => collection.save(data)); // WRONG\n   * await trx.step(() => collection.save(moreData));\n   *\n   * // BAD! The trx.step callback can not make multiple calls to async arangojs\n   * // methods, not even using Promise.all!\n   * await trx.step(() => Promise.all([ // WRONG\n   *   collection.save(data),\n   *   collection.save(moreData),\n   * ]));\n   *\n   * // BAD! Multiple `trx.step` calls can not run in parallel!\n   * await Promise.all([ // WRONG\n   *   trx.step(() => collection.save(data)),\n   *   trx.step(() => collection.save(moreData)),\n   * ]));\n   *\n   * // BETTER: Always call `trx.step` sequentially, one after the other\n   * await trx.step(() => collection.save(data));\n   * await trx.step(() => collection.save(moreData));\n   *\n   * // OKAY: The then callback can be used if async/await is not available\n   * trx.step(() => collection.save(data))\n   *   .then(() => trx.step(() => collection.save(moreData)));\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! The callback will return an empty promise that resolves before\n   * // the inner arangojs method call has even talked to ArangoDB!\n   * await trx.step(async () => {\n   *   collection.save(data); // WRONG\n   * });\n   *\n   * // BETTER: Use an arrow function so you don't forget to return\n   * await trx.step(() => collection.save(data));\n   *\n   * // OKAY: Remember to always return when using a function body\n   * await trx.step(() => {\n   *   return collection.save(data); // easy to forget!\n   * });\n   *\n   * // OKAY: You do not have to use arrow functions but it helps\n   * await trx.step(function () {\n   *   return collection.save(data);\n   * });\n   * ```\n   *\n   * @example\n   * ```js\n   * // BAD! You can not pass promises instead of a callback!\n   * await trx.step(collection.save(data)); // WRONG\n   *\n   * // BETTER: Wrap the code in a function and pass the function instead\n   * await trx.step(() => collection.save(data));\n   * ```\n   *\n   * @example\n   * ```js\n   * // WORSE: Calls to non-async arangojs methods don't need to be performed\n   * // as part of a transaction\n   * const collection = await trx.step(() => db.collection(\"my-documents\"));\n   *\n   * // BETTER: If an arangojs method is not async and doesn't return promises,\n   * // call it without `trx.step`\n   * const collection = db.collection(\"my-documents\");\n   * ```\n   */\n  step<T>(callback: () => Promise<T>): Promise<T> {\n    const conn = (this._db as any)._connection as Connection;\n    conn.setTransactionId(this.id);\n    try {\n      const promise = callback();\n      if (!promise) {\n        throw new Error(\n          \"Transaction callback was not an async function or did not return a promise!\"\n        );\n      }\n      return Promise.resolve(promise);\n    } finally {\n      conn.clearTransactionId();\n    }\n  }\n}\n","/**\n * ```js\n * import { Database } from \"arangojs/database\";\n * ```\n *\n * The \"database\" module provides the {@link Database} class and associated\n * types and interfaces for TypeScript.\n *\n * The Database class is also re-exported by the \"index\" module.\n *\n * @packageDocumentation\n */\nimport { Readable } from \"stream\";\nimport {\n  Analyzer,\n  AnalyzerDescription,\n  CreateAnalyzerOptions,\n} from \"./analyzer\";\nimport { AqlLiteral, AqlQuery, isAqlLiteral, isAqlQuery } from \"./aql\";\nimport {\n  ArangoCollection,\n  Collection,\n  CollectionMetadata,\n  collectionToString,\n  CollectionType,\n  CreateCollectionOptions,\n  DocumentCollection,\n  EdgeCollection,\n  isArangoCollection,\n} from \"./collection\";\nimport {\n  ArangoResponseMetadata,\n  Config,\n  Connection,\n  Dict,\n  Headers,\n  RequestOptions,\n} from \"./connection\";\nimport { ArrayCursor, BatchedArrayCursor } from \"./cursor\";\nimport { isArangoError } from \"./error\";\nimport { FoxxManifest } from \"./foxx-manifest\";\nimport {\n  EdgeDefinitionOptions,\n  Graph,\n  GraphCreateOptions,\n  GraphInfo,\n} from \"./graph\";\nimport { Blob } from \"./lib/blob\";\nimport { DATABASE_NOT_FOUND } from \"./lib/codes\";\nimport { toForm } from \"./lib/multipart\";\nimport { ArangojsResponse } from \"./lib/request\";\nimport { Route } from \"./route\";\nimport { Transaction } from \"./transaction\";\nimport {\n  ArangoSearchView,\n  ArangoSearchViewPropertiesOptions,\n  View,\n  ViewDescription,\n  ViewType,\n} from \"./view\";\n\n/**\n * Indicates whether the given value represents a {@link Database}.\n *\n * @param database - A value that might be a database.\n */\nexport function isArangoDatabase(database: any): database is Database {\n  return Boolean(database && database.isArangoDatabase);\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction coerceTransactionCollections(\n  collections:\n    | (TransactionCollections & { allowImplicit?: boolean })\n    | (string | ArangoCollection)[]\n    | string\n    | ArangoCollection\n): CoercedTransactionCollections {\n  if (typeof collections === \"string\") {\n    return { write: [collections] };\n  }\n  if (Array.isArray(collections)) {\n    return { write: collections.map(collectionToString) };\n  }\n  if (isArangoCollection(collections)) {\n    return { write: collectionToString(collections) };\n  }\n  const cols: CoercedTransactionCollections = {};\n  if (collections) {\n    if (collections.allowImplicit !== undefined) {\n      cols.allowImplicit = collections.allowImplicit;\n    }\n    if (collections.read) {\n      cols.read = Array.isArray(collections.read)\n        ? collections.read.map(collectionToString)\n        : collectionToString(collections.read);\n    }\n    if (collections.write) {\n      cols.write = Array.isArray(collections.write)\n        ? collections.write.map(collectionToString)\n        : collectionToString(collections.write);\n    }\n    if (collections.exclusive) {\n      cols.exclusive = Array.isArray(collections.exclusive)\n        ? collections.exclusive.map(collectionToString)\n        : collectionToString(collections.exclusive);\n    }\n  }\n  return cols;\n}\n\n/**\n * @internal\n * @hidden\n */\ntype CoercedTransactionCollections = {\n  allowImplicit?: boolean;\n  exclusive?: string | string[];\n  write?: string | string[];\n  read?: string | string[];\n};\n\n/**\n * Collections involved in a transaction.\n */\nexport type TransactionCollections = {\n  /**\n   * An array of collections or a single collection that will be read from or\n   * written to during the transaction with no other writes being able to run\n   * in parallel.\n   */\n  exclusive?: (string | ArangoCollection)[] | string | ArangoCollection;\n  /**\n   * An array of collections or a single collection that will be read from or\n   * written to during the transaction.\n   *\n   * If ArangoDB is using the MMFiles storage engine, this option behaves\n   * exactly like `exclusive`, i.e. no other writes will run in parallel.\n   */\n  write?: (string | ArangoCollection)[] | string | ArangoCollection;\n  /**\n   * An array of collections or a single collection that will be read from\n   * during the transaction.\n   */\n  read?: (string | ArangoCollection)[] | string | ArangoCollection;\n};\n\n/**\n * Options for how the transaction should be performed.\n */\nexport type TransactionOptions = {\n  /**\n   * Whether the transaction may read from collections not specified for this\n   * transaction. If set to `false`, accessing any collections not specified\n   * will result in the transaction being aborted to avoid potential deadlocks.\n   *\n   * Default: `true`.\n   */\n  allowImplicit?: boolean;\n  /**\n   * Determines whether to force the transaction to write all data to disk\n   * before returning.\n   */\n  waitForSync?: boolean;\n  /**\n   * Determines how long the database will wait while attempting to gain locks\n   * on collections used by the transaction before timing out.\n   */\n  lockTimeout?: number;\n  /**\n   * (RocksDB only.) Determines the transaction size limit in bytes.\n   */\n  maxTransactionSize?: number;\n  /**\n   * (RocksDB only.) Determines the maximum number of operations after which an\n   * intermediate commit is performed automatically.\n   *\n   * @deprecated Removed in ArangoDB 3.4.\n   */\n  intermediateCommitCount?: number;\n  /**\n   * (RocksDB only.) Determine the maximum total size of operations after which\n   * an intermediate commit is performed automatically.\n   *\n   * @deprecated Removed in ArangoDB 3.4.\n   */\n  intermediateCommitSize?: number;\n};\n\n/**\n * Options for executing a query.\n *\n * See {@link Database.query}.\n */\nexport type QueryOptions = {\n  /**\n   * If set to `true`, the query will be executed with support for dirty reads\n   * enabled, permitting ArangoDB to return a potentially dirty or stale result\n   * and arangojs will load balance the request without distinguishing between\n   * leaders and followers.\n   *\n   * Note that dirty reads are only supported for read-only queries, not data\n   * modification queries (e.g. using `INSERT`, `UPDATE`, `REPLACE` or\n   * `REMOVE`) and only when using ArangoDB 3.4 or later.\n   *\n   * Default: `false`\n   */\n  allowDirtyRead?: boolean;\n  /**\n   * Maximum time in milliseconds arangojs will wait for a server response.\n   * Exceeding this value will result in the request being cancelled.\n   *\n   * **Note**: Setting a timeout for the client does not guarantee the query\n   * will be killed by ArangoDB if it is already being executed. See the\n   * `maxRuntime` option for limiting the execution time within ArangoDB.\n   */\n  timeout?: number;\n  /**\n   * Unless set to `false`, the number of result values in the result set will\n   * be returned in the `count` attribute. This may be disabled by default in\n   * a future version of ArangoDB if calculating this value has a performance\n   * impact for some queries.\n   *\n   * Default: `true`.\n   */\n  count?: boolean;\n  /**\n   * Number of result values to be transferred by the server in each\n   * network roundtrip (or \"batch\").\n   *\n   * Must be greater than zero.\n   */\n  batchSize?: number;\n  /**\n   * If set to `false`, the AQL query results cache lookup will be skipped for\n   * this query.\n   *\n   * Default: `true`\n   */\n  cache?: boolean;\n  /**\n   * Maximum memory size in bytes that the query is allowed to use.\n   * Exceeding this value will result in the query failing with an error.\n   *\n   * If set to `0`, the memory limit is disabled.\n   *\n   * Default: `0`\n   */\n  memoryLimit?: number;\n  /**\n   * Maximum allowed execution time before the query will be killed in seconds.\n   *\n   * If set to `0`, the query will be allowed to run indefinitely.\n   *\n   * Default: `0`\n   */\n  maxRuntime?: number;\n  /**\n   * Time-to-live for the cursor in seconds. The cursor results may be\n   * garbage collected by ArangoDB after this much time has passed.\n   *\n   * Default: `30`\n   */\n  ttl?: number;\n  /**\n   * If set to `true`, the query will throw an exception and abort if it would\n    otherwise produce a warning.\n   */\n  failOnWarning?: boolean;\n  /**\n   * If set to `1` or `true`, additional query profiling information will be\n   * returned in the `extra.profile` attribute if the query is not served from\n   * the result cache.\n   *\n   * If set to `2`, the query will return execution stats per query plan node\n   * in the `extra.stats.nodes` attribute. Additionally the query plan is\n   * returned in `extra.plan`.\n   */\n  profile?: boolean | number;\n  /**\n   * If set to `true`, the query will be executed as a streaming query.\n   */\n  stream?: boolean;\n  /**\n   * Limits the maximum number of warnings a query will return.\n   */\n  maxWarningsCount?: number;\n  /**\n   * If set to `true` and the query has a `LIMIT` clause, the total number of\n   * values matched before the last top-level `LIMIT` in the query was applied\n   * will be returned in the `extra.stats.fullCount` attribute.\n   */\n  fullCount?: boolean;\n  /**\n   * If set to `false`, the query data will not be stored in the RocksDB block\n   * cache. This can be used to avoid thrashing he block cache when reading a\n   * lot of data.\n   */\n  fillBlockCache?: boolean;\n  /**\n   * An object with a `rules` property specifying a list of optimizer rules to\n   * be included or excluded by the optimizer for this query. Prefix a rule\n   * name with `+` to include it, or `-` to exclude it. The name `all` acts as\n   * an alias matching all optimizer rules.\n   */\n  optimizer?: { rules: string[] };\n  /**\n   * Limits the maximum number of plans that will be created by the AQL query\n   * optimizer.\n   */\n  maxPlans?: number;\n  /**\n   * Controls after how many execution nodes in a query a stack split should be\n   * performed.\n   *\n   * Default: `250` (`200` on macOS)\n   */\n  maxNodesPerCallstack?: number;\n  /**\n   * (RocksDB only.) Maximum size of transactions in bytes.\n   */\n  maxTransactionSize?: number;\n  /**\n   * (RocksDB only.) Maximum number of operations after which an intermediate\n   * commit is automatically performed.\n   */\n  intermediateCommitCount?: number;\n  /**\n   * (RocksDB only.) Maximum total size of operations in bytes after which an\n   * intermediate commit is automatically performed.\n   */\n  intermediateCommitSize?: number;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, collections\n   * inaccessible to current user will result in an access error instead\n   * of being treated as empty.\n   */\n  skipInaccessibleCollections?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) Limits the maximum time in seconds a\n   * DBServer will wait to bring satellite collections involved in the query\n   * into sync. Exceeding this value will result in the query being stopped.\n   *\n   * Default: `60`\n   */\n  satelliteSyncWait?: number;\n};\n\n/**\n * Options for explaining a query.\n *\n * See {@link Database.explain}.\n */\nexport type ExplainOptions = {\n  /**\n   * An object with a `rules` property specifying a list of optimizer rules to\n   * be included or excluded by the optimizer for this query. Prefix a rule\n   * name with `+` to include it, or `-` to exclude it. The name `all` acts as\n   * an alias matching all optimizer rules.\n   */\n  optimizer?: { rules: string[] };\n  /**\n   * Maximum number of plans that the optimizer is allowed to generate.\n   * Setting this to a low value limits the amount of work the optimizer does.\n   */\n  maxNumberOfPlans?: number;\n  /**\n   * If set to true, all possible execution plans will be returned as the\n   * `plans` property. Otherwise only the optimal execution plan will be\n   * returned as the `plan` property.\n   *\n   * Default: `false`\n   */\n  allPlans?: boolean;\n};\n\n/**\n * Details for a transaction.\n *\n * See also {@link TransactionStatus}.\n */\nexport type TransactionDetails = {\n  /**\n   * Unique identifier of the transaction.\n   */\n  id: string;\n  /**\n   * Status (or \"state\") of the transaction.\n   */\n  state: \"running\" | \"committed\" | \"aborted\";\n};\n\n/**\n * Plan explaining query execution.\n */\nexport type ExplainPlan = {\n  /**\n   * Execution nodes in this plan.\n   */\n  nodes: {\n    [key: string]: any;\n    type: string;\n    id: number;\n    dependencies: number[];\n    estimatedCost: number;\n    estimatedNrItems: number;\n  }[];\n  /**\n   * Rules applied by the optimizer.\n   */\n  rules: string[];\n  /**\n   * Information about collections involved in the query.\n   */\n  collections: {\n    name: string;\n    type: \"read\" | \"write\";\n  }[];\n  /**\n   * Variables used in the query.\n   */\n  variables: {\n    id: number;\n    name: string;\n  }[];\n  /**\n   * Total estimated cost of the plan.\n   */\n  estimatedCost: number;\n  /**\n   * Estimated number of items returned by the query.\n   */\n  estimatedNrItems: number;\n  /**\n   * Whether the query is a data modification query.\n   */\n  isModificationQuery: boolean;\n};\n\n/**\n * Result of explaining a query with a single plan.\n */\nexport type SingleExplainResult = {\n  /**\n   * Query plan.\n   */\n  plan: ExplainPlan;\n  /**\n   * Whether it would be possible to cache the query.\n   */\n  cacheable: boolean;\n  /**\n   * Warnings encountered while planning the query execution.\n   */\n  warnings: { code: number; message: string }[];\n  /**\n   * Statistical information about the query plan generation.\n   */\n  stats: {\n    /**\n     * Total number of rules executed for this query.\n     */\n    rulesExecuted: number;\n    /**\n     * Number of rules skipped for this query.\n     */\n    rulesSkipped: number;\n    /**\n     * Total number of plans created.\n     */\n    plansCreated: number;\n  };\n};\n\n/**\n * Result of explaining a query with multiple plans.\n */\nexport type MultiExplainResult = {\n  /**\n   * Query plans.\n   */\n  plans: ExplainPlan[];\n  /**\n   * Whether it would be possible to cache the query.\n   */\n  cacheable: boolean;\n  /**\n   * Warnings encountered while planning the query execution.\n   */\n  warnings: { code: number; message: string }[];\n  /**\n   * Statistical information about the query plan generation.\n   */\n  stats: {\n    /**\n     * Total number of rules executed for this query.\n     */\n    rulesExecuted: number;\n    /**\n     * Number of rules skipped for this query.\n     */\n    rulesSkipped: number;\n    /**\n     * Total number of plans created.\n     */\n    plansCreated: number;\n  };\n};\n\n/**\n * Node in an AQL abstract syntax tree (AST).\n */\nexport type AstNode = {\n  [key: string]: any;\n  type: string;\n  subNodes: AstNode[];\n};\n\n/**\n * Result of parsing a query.\n */\nexport type ParseResult = {\n  /**\n   * Whether the query was parsed.\n   */\n  parsed: boolean;\n  /**\n   * Names of all collections involved in the query.\n   */\n  collections: string[];\n  /**\n   * Names of all bind parameters used in the query.\n   */\n  bindVars: string[];\n  /**\n   * Abstract syntax tree (AST) of the query.\n   */\n  ast: AstNode[];\n};\n\n/**\n * Information about query tracking.\n */\nexport type QueryTracking = {\n  /**\n   * Whether query tracking is enabled.\n   */\n  enabled: boolean;\n  /**\n   * Maximum query string length in bytes that is kept in the list.\n   */\n  maxQueryStringLength: number;\n  /**\n   * Maximum number of slow queries that is kept in the list.\n   */\n  maxSlowQueries: number;\n  /**\n   * Threshold execution time in seconds for when a query is\n   * considered slow.\n   */\n  slowQueryThreshold: number;\n  /**\n   * Whether bind parameters are being tracked along with queries.\n   */\n  trackBindVars: boolean;\n  /**\n   * Whether slow queries are being tracked.\n   */\n  trackSlowQueries: boolean;\n};\n\n/**\n * Options for query tracking.\n *\n * See {@link Database.queryTracking}.\n */\nexport type QueryTrackingOptions = {\n  /**\n   * If set to `false`, neither queries nor slow queries will be tracked.\n   */\n  enabled?: boolean;\n  /**\n   * Maximum query string length in bytes that will be kept in the list.\n   */\n  maxQueryStringLength?: number;\n  /**\n   * Maximum number of slow queries to be kept in the list.\n   */\n  maxSlowQueries?: number;\n  /**\n   * Threshold execution time in seconds for when a query will be\n   * considered slow.\n   */\n  slowQueryThreshold?: number;\n  /**\n   * If set to `true`, bind parameters will be tracked along with queries.\n   */\n  trackBindVars?: boolean;\n  /**\n   * If set to `true` and `enabled` is also set to `true`, slow queries will be\n   * tracked if their execution time exceeds `slowQueryThreshold`.\n   */\n  trackSlowQueries?: boolean;\n};\n\n/**\n * Object describing a query.\n */\nexport type QueryInfo = {\n  /**\n   * Unique identifier for this query.\n   */\n  id: string;\n  /**\n   * Query string (potentially truncated).\n   */\n  query: string;\n  /**\n   * Bind parameters used in the query.\n   */\n  bindVars: Dict<any>;\n  /**\n   * Query's running time in seconds.\n   */\n  runTime: number;\n  /**\n   * Date and time the query was started.\n   */\n  started: string;\n  /**\n   * Query's current execution state.\n   */\n  state: \"executing\" | \"finished\" | \"killed\";\n  /**\n   * Whether the query uses a streaming cursor.\n   */\n  stream: boolean;\n};\n\n/**\n * Database user to create with a database.\n */\nexport type CreateDatabaseUser = {\n  /**\n   * Username of the user to create.\n   */\n  username: string;\n  /**\n   * Password of the user to create.\n   *\n   * Default: `\"\"`\n   */\n  passwd?: string;\n  /**\n   * Whether the user is active.\n   *\n   * Default: `true`\n   */\n  active?: boolean;\n  /**\n   * Additional data to store with the user object.\n   */\n  extra?: Dict<any>;\n};\n\n/**\n * Options for creating a database.\n *\n * See {@link Database.createDatabase}.\n */\nexport type CreateDatabaseOptions = {\n  /**\n   * Database users to create with the database.\n   */\n  users?: CreateDatabaseUser[];\n  /**\n   * (Cluster only.) The sharding method to use for new collections in the\n   * database.\n   */\n  sharding?: \"\" | \"flexible\" | \"single\";\n  /**\n   * (Cluster only.) Default replication factor for new collections in this\n   * database.\n   *\n   * Setting this to `1` disables replication. Setting this to `\"satellite\"`\n   * will replicate to every DBServer.\n   */\n  replicationFactor?: \"satellite\" | number;\n  /**\n   * (Cluster only.) Default write concern for new collections created in this\n   * database.\n   */\n  writeConcern?: number;\n  /**\n   * (Cluster only.) Default write concern for new collections created in this\n   * database.\n   *\n   * @deprecated Renamed to `writeConcern` in ArangoDB 3.6.\n   */\n  minReplicationFactor?: number;\n};\n\n/**\n * Object describing a database.\n *\n * See {@link Database.get}.\n */\nexport type DatabaseInfo = {\n  /**\n   * Name of the database.\n   */\n  name: string;\n  /**\n   * Unique identifier of the database.\n   */\n  id: string;\n  /**\n   * File system path of the database.\n   */\n  path: string;\n  /**\n   * Whether the database is the system database.\n   */\n  isSystem: boolean;\n  /**\n   * (Cluster only.) The sharding method to use for new collections in the\n   * database.\n   */\n  sharding?: \"\" | \"flexible\" | \"single\";\n  /**\n   * (Cluster only.) Default replication factor for new collections in this\n   * database.\n   */\n  replicationFactor?: \"satellite\" | number;\n  /**\n   * (Cluster only.) Default write concern for new collections created in this\n   * database.\n   */\n  writeConcern?: number;\n  /**\n   * (Cluster only.) Default write concern for new collections created in this\n   * database.\n   *\n   * @deprecated Renamed to `writeConcern` in ArangoDB 3.6.\n   */\n  minReplicationFactor?: number;\n};\n\n/**\n * Result of retrieving database version information.\n */\nexport type VersionInfo = {\n  /**\n   * Value identifying the server type, i.e. `\"arango\"`.\n   */\n  server: string;\n  /**\n   * ArangoDB license type or \"edition\".\n   */\n  license: \"community\" | \"enterprise\";\n  /**\n   * ArangoDB server version.\n   */\n  version: string;\n  /**\n   * Additional information about the ArangoDB server.\n   */\n  details?: { [key: string]: string };\n};\n\n/**\n * Definition of an AQL User Function.\n */\nexport type AqlUserFunction = {\n  /**\n   * Name of the AQL User Function.\n   */\n  name: string;\n  /**\n   * Implementation of the AQL User Function.\n   */\n  code: string;\n  /**\n   * Whether the function is deterministic.\n   *\n   * See {@link Database.createFunction}.\n   */\n  isDeterministic: boolean;\n};\n\n/**\n * Options for installing the service.\n *\n * See {@link Database.installService}.\n */\nexport type InstallServiceOptions = {\n  /**\n   * An object mapping configuration option names to values.\n   *\n   * See also {@link Database.getServiceConfiguration}.\n   */\n  configuration?: Dict<any>;\n  /**\n   * An object mapping dependency aliases to mount points.\n   *\n   * See also {@link Database.getServiceDependencies}.\n   */\n  dependencies?: Dict<string>;\n  /**\n   * Whether the service should be installed in development mode.\n   *\n   * See also {@link Database.setServiceDevelopmentMode}.\n   *\n   * Default: `false`\n   */\n  development?: boolean;\n  /**\n   * Whether the service should be installed in legacy compatibility mode\n   *\n   * This overrides the `engines` option in the service manifest (if any).\n   *\n   * Default: `false`\n   */\n  legacy?: boolean;\n  /**\n   * Whether the \"setup\" script should be executed.\n   *\n   * Default: `true`\n   */\n  setup?: boolean;\n};\n\n/**\n * Options for replacing a service.\n *\n * See {@link Database.replaceService}.\n */\nexport type ReplaceServiceOptions = {\n  /**\n   * An object mapping configuration option names to values.\n   *\n   * See also {@link Database.getServiceConfiguration}.\n   */\n  configuration?: Dict<any>;\n  /**\n   * An object mapping dependency aliases to mount points.\n   *\n   * See also {@link Database.getServiceDependencies}.\n   */\n  dependencies?: Dict<string>;\n  /**\n   * Whether the service should be installed in development mode.\n   *\n   * See also {@link Database.setServiceDevelopmentMode}.\n   *\n   * Default: `false`\n   */\n  development?: boolean;\n  /**\n   * Whether the service should be installed in legacy compatibility mode\n   *\n   * This overrides the `engines` option in the service manifest (if any).\n   *\n   * Default: `false`\n   */\n  legacy?: boolean;\n  /**\n   * Whether the \"setup\" script should be executed.\n   *\n   * Default: `true`\n   */\n  setup?: boolean;\n  /**\n   * Whether the existing service's \"teardown\" script should be executed\n   * prior to removing that service.\n   *\n   * Default: `true`\n   */\n  teardown?: boolean;\n  /**\n   * If set to `true`, replacing a service that does not already exist will\n   * fall back to installing the new service.\n   *\n   * Default: `false`\n   */\n  force?: boolean;\n};\n\n/**\n * Options for upgrading a service.\n *\n * See {@link Database.upgradeService}.\n */\nexport type UpgradeServiceOptions = {\n  /**\n   * An object mapping configuration option names to values.\n   *\n   * See also {@link Database.getServiceConfiguration}.\n   */\n  configuration?: Dict<any>;\n  /**\n   * An object mapping dependency aliases to mount points.\n   *\n   * See also {@link Database.getServiceDependencies}.\n   */\n  dependencies?: Dict<string>;\n  /**\n   * Whether the service should be installed in development mode.\n   *\n   * See also {@link Database.setServiceDevelopmentMode}.\n   *\n   * Default: `false`\n   */\n  development?: boolean;\n  /**\n   * Whether the service should be installed in legacy compatibility mode\n   *\n   * This overrides the `engines` option in the service manifest (if any).\n   *\n   * Default: `false`\n   */\n  legacy?: boolean;\n  /**\n   * Whether the \"setup\" script should be executed.\n   *\n   * Default: `true`\n   */\n  setup?: boolean;\n  /**\n   * Whether the existing service's \"teardown\" script should be executed\n   * prior to upgrading that service.\n   *\n   * Default: `false`\n   */\n  teardown?: boolean;\n  /**\n   * Unless set to `true`, upgrading a service that does not already exist will\n   * fall back to installing the new service.\n   *\n   * Default: `false`\n   */\n  force?: boolean;\n};\n\n/**\n * Options for uninstalling a service.\n *\n * See {@link Database.uninstallService}.\n */\nexport type UninstallServiceOptions = {\n  /**\n   * Whether the service's \"teardown\" script should be executed\n   * prior to removing that service.\n   *\n   * Default: `true`\n   */\n  teardown?: boolean;\n  /**\n   * If set to `true`, uninstalling a service that does not already exist\n   * will be considered successful.\n   *\n   * Default: `false`\n   */\n  force?: boolean;\n};\n\n/**\n * Object briefly describing a Foxx service.\n */\nexport type ServiceSummary = {\n  /**\n   * Service mount point, relative to the database.\n   */\n  mount: string;\n  /**\n   * Name defined in the service manifest.\n   */\n  name?: string;\n  /**\n   * Version defined in the service manifest.\n   */\n  version?: string;\n  /**\n   * Service dependencies the service expects to be able to match as a mapping\n   * from dependency names to versions the service is compatible with.\n   */\n  provides: Dict<string>;\n  /**\n   * Whether development mode is enabled for this service.\n   */\n  development: boolean;\n  /**\n   * Whether the service is running in legacy compatibility mode.\n   */\n  legacy: boolean;\n};\n\n/**\n * Object describing a Foxx service in detail.\n */\nexport type ServiceInfo = {\n  /**\n   * Service mount point, relative to the database.\n   */\n  mount: string;\n  /**\n   * File system path of the service.\n   */\n  path: string;\n  /**\n   * Name defined in the service manifest.\n   */\n  name?: string;\n  /**\n   * Version defined in the service manifest.\n   */\n  version?: string;\n  /**\n   * Whether development mode is enabled for this service.\n   */\n  development: boolean;\n  /**\n   * Whether the service is running in legacy compatibility mode.\n   */\n  legacy: boolean;\n  /**\n   * Content of the service manifest of this service.\n   */\n  manifest: FoxxManifest;\n  /**\n   * Internal checksum of the service's initial source bundle.\n   */\n  checksum: string;\n  /**\n   * Options for this service.\n   */\n  options: {\n    /**\n     * Configuration values set for this service.\n     */\n    configuration: Dict<any>;\n    /**\n     * Service dependency configuration of this service.\n     */\n    dependencies: Dict<string>;\n  };\n};\n\n/**\n * Object describing a configuration option of a Foxx service.\n */\nexport type ServiceConfiguration = {\n  /**\n   * Data type of the configuration value.\n   *\n   * **Note**: `\"int\"` and `\"bool\"` are historical synonyms for `\"integer\"` and\n   * `\"boolean\"`. The `\"password\"` type is synonymous with `\"string\"` but can\n   * be used to distinguish values which should not be displayed in plain text\n   * by software when managing the service.\n   */\n  type:\n    | \"integer\"\n    | \"boolean\"\n    | \"string\"\n    | \"number\"\n    | \"json\"\n    | \"password\"\n    | \"int\"\n    | \"bool\";\n  /**\n   * Current value of the configuration option as stored internally.\n   */\n  currentRaw: any;\n  /**\n   * Processed current value of the configuration option as exposed in the\n   * service code.\n   */\n  current: any;\n  /**\n   * Formatted name of the configuration option.\n   */\n  title: string;\n  /**\n   * Human-readable description of the configuration option.\n   */\n  description?: string;\n  /**\n   * Whether the configuration option must be set in order for the service\n   * to be operational.\n   */\n  required: boolean;\n  /**\n   * Default value of the configuration option.\n   */\n  default?: any;\n};\n\n/**\n * Object describing a single-service dependency defined by a Foxx service.\n */\nexport type SingleServiceDependency = {\n  /**\n   * Whether this is a multi-service dependency.\n   */\n  multiple: false;\n  /**\n   * Current mount point the dependency is resolved to.\n   */\n  current?: string;\n  /**\n   * Formatted name of the dependency.\n   */\n  title: string;\n  /**\n   * Name of the service the dependency expects to match.\n   */\n  name: string;\n  /**\n   * Version of the service the dependency expects to match.\n   */\n  version: string;\n  /**\n   * Human-readable description of the dependency.\n   */\n  description?: string;\n  /**\n   * Whether the dependency must be matched in order for the service\n   * to be operational.\n   */\n  required: boolean;\n};\n\n/**\n * Object describing a multi-service dependency defined by a Foxx service.\n */\nexport type MultiServiceDependency = {\n  /**\n   * Whether this is a multi-service dependency.\n   */\n  multiple: true;\n  /**\n   * Current mount points the dependency is resolved to.\n   */\n  current?: string[];\n  /**\n   * Formatted name of the dependency.\n   */\n  title: string;\n  /**\n   * Name of the service the dependency expects to match.\n   */\n  name: string;\n  /**\n   * Version of the service the dependency expects to match.\n   */\n  version: string;\n  /**\n   * Human-readable description of the dependency.\n   */\n  description?: string;\n  /**\n   * Whether the dependency must be matched in order for the service\n   * to be operational.\n   */\n  required: boolean;\n};\n\n/**\n * Test stats for a Foxx service's tests.\n */\nexport type ServiceTestStats = {\n  /**\n   * Total number of tests found.\n   */\n  tests: number;\n  /**\n   * Number of tests that ran successfully.\n   */\n  passes: number;\n  /**\n   * Number of tests that failed.\n   */\n  failures: number;\n  /**\n   * Number of tests skipped or not executed.\n   */\n  pending: number;\n  /**\n   * Total test duration in milliseconds.\n   */\n  duration: number;\n};\n\n/**\n * Test results for a single test case using the stream reporter.\n */\nexport type ServiceTestStreamTest = {\n  title: string;\n  fullTitle: string;\n  duration: number;\n  err?: string;\n};\n\n/**\n * Test results for a Foxx service's tests using the stream reporter.\n */\nexport type ServiceTestStreamReport = (\n  | [\"start\", { total: number }]\n  | [\"pass\", ServiceTestStreamTest]\n  | [\"fail\", ServiceTestStreamTest]\n  | [\"end\", ServiceTestStats]\n)[];\n\n/**\n * Test results for a single test case using the suite reporter.\n */\nexport type ServiceTestSuiteTest = {\n  result: \"pending\" | \"pass\" | \"fail\";\n  title: string;\n  duration: number;\n  err?: any;\n};\n\n/**\n * Test results for a single test suite using the suite reporter.\n */\nexport type ServiceTestSuite = {\n  title: string;\n  suites: ServiceTestSuite[];\n  tests: ServiceTestSuiteTest[];\n};\n\n/**\n * Test results for a Foxx service's tests using the suite reporter.\n */\nexport type ServiceTestSuiteReport = {\n  stats: ServiceTestStats;\n  suites: ServiceTestSuite[];\n  tests: ServiceTestSuiteTest[];\n};\n\n/**\n * Test results for a single test case in XUnit format using the JSONML\n * representation.\n */\nexport type ServiceTestXunitTest =\n  | [\"testcase\", { classname: string; name: string; time: number }]\n  | [\n      \"testcase\",\n      { classname: string; name: string; time: number },\n      [\"failure\", { message: string; type: string }, string]\n    ];\n\n/**\n * Test results for a Foxx service's tests in XUnit format using the JSONML\n * representation.\n */\nexport type ServiceTestXunitReport = [\n  \"testsuite\",\n  {\n    timestamp: number;\n    tests: number;\n    errors: number;\n    failures: number;\n    skip: number;\n    time: number;\n  },\n  ...ServiceTestXunitTest[]\n];\n\n/**\n * Test results for a Foxx service's tests in TAP format.\n */\nexport type ServiceTestTapReport = string[];\n\n/**\n * Test results for a single test case using the default reporter.\n */\nexport type ServiceTestDefaultTest = {\n  title: string;\n  fullTitle: string;\n  duration: number;\n  err?: string;\n};\n\n/**\n * Test results for a Foxx service's tests using the default reporter.\n */\nexport type ServiceTestDefaultReport = {\n  stats: ServiceTestStats;\n  tests: ServiceTestDefaultTest[];\n  pending: ServiceTestDefaultTest[];\n  failures: ServiceTestDefaultTest[];\n  passes: ServiceTestDefaultTest[];\n};\n\n/**\n * OpenAPI 2.0 description of a Foxx service.\n */\nexport type SwaggerJson = {\n  [key: string]: any;\n  info: {\n    title: string;\n    description: string;\n    version: string;\n    license: string;\n  };\n  path: {\n    [key: string]: any;\n  };\n};\n\n/**\n * Access level for an ArangoDB user's access to a collection or database.\n */\nexport type AccessLevel = \"rw\" | \"ro\" | \"none\";\n\n/**\n * Properties of an ArangoDB user object.\n */\nexport type ArangoUser = {\n  /**\n   * ArangoDB username of the user.\n   */\n  user: string;\n  /**\n   * Whether the ArangoDB user account is enabled and can authenticate.\n   */\n  active: boolean;\n  /**\n   * Additional information to store about this user.\n   */\n  extra: Record<string, any>;\n};\n\n/**\n * Options for creating an ArangoDB user.\n */\nexport type CreateUserOptions = {\n  /**\n   * ArangoDB username of the user.\n   */\n  user: string;\n  /**\n   * Password the ArangoDB user will use for authentication.\n   */\n  passwd: string;\n  /**\n   * Whether the ArangoDB user account is enabled and can authenticate.\n   *\n   * Default: `true`\n   */\n  active?: boolean;\n  /**\n   * Additional information to store about this user.\n   *\n   * Default: `{}`\n   */\n  extra?: Record<string, any>;\n};\n\n/**\n * Options for modifying an ArangoDB user.\n */\nexport type UserOptions = {\n  /**\n   * Password the ArangoDB user will use for authentication.\n   */\n  passwd: string;\n  /**\n   * Whether the ArangoDB user account is enabled and can authenticate.\n   *\n   * Default: `true`\n   */\n  active?: boolean;\n  /**\n   * Additional information to store about this user.\n   *\n   * Default: `{}`\n   */\n  extra?: Record<string, any>;\n};\n\n/**\n * Options for accessing or manipulating access levels.\n */\nexport type UserAccessLevelOptions = {\n  /**\n   * The database to access or manipulate the access level of.\n   *\n   * If `collection` is an `ArangoCollection`, this option defaults to the\n   * database the collection is contained in. Otherwise this option defaults to\n   * the current database.\n   */\n  database?: Database | string;\n  /**\n   * The collection to access or manipulate the access level of.\n   */\n  collection?: ArangoCollection | string;\n};\n\n/**\n * An object providing methods for accessing queue time metrics of the most\n * recently received server responses if the server supports this feature.\n */\nexport type QueueTimeMetrics = {\n  /**\n   * Returns the queue time of the most recently received response in seconds.\n   */\n  getLatest: () => number | undefined;\n  /**\n   * Returns a list of the most recently received queue time values as tuples\n   * of the timestamp of the response being processed in milliseconds and the\n   * queue time in seconds.\n   */\n  getValues: () => [number, number][];\n  /**\n   * Returns the average queue time of the most recently received responses\n   * in seconds.\n   */\n  getAvg: () => number;\n};\n\n/**\n * An object representing a single ArangoDB database. All arangojs collections,\n * cursors, analyzers and so on are linked to a `Database` object.\n */\nexport class Database {\n  protected _connection: Connection;\n  protected _name: string;\n  protected _analyzers = new Map<string, Analyzer>();\n  protected _collections = new Map<string, Collection>();\n  protected _graphs = new Map<string, Graph>();\n  protected _views = new Map<string, ArangoSearchView>();\n\n  /**\n   * Creates a new `Database` instance with its own connection pool.\n   *\n   * See also {@link Database.database}.\n   *\n   * @param config - An object with configuration options.\n   *\n   * @example\n   * ```js\n   * const db = new Database({\n   *   url: \"http://localhost:8529\",\n   *   databaseName: \"my_database\",\n   *   auth: { username: \"admin\", password: \"hunter2\" },\n   * });\n   * ```\n   */\n  constructor(config?: Config);\n  /**\n   * Creates a new `Database` instance with its own connection pool.\n   *\n   * See also {@link Database.database}.\n   *\n   * @param url - Base URL of the ArangoDB server or list of server URLs.\n   * Equivalent to the `url` option in {@link Config}.\n   *\n   * @example\n   * ```js\n   * const db = new Database(\"http://localhost:8529\", \"my_database\");\n   * db.useBasicAuth(\"admin\", \"hunter2\");\n   * ```\n   */\n  constructor(url: string | string[], name?: string);\n  // There's currently no way to hide a single overload from typedoc\n  // /**\n  //  * @internal\n  //  * @hidden\n  //  */\n  // constructor(database: Database, name?: string);\n  constructor(\n    configOrDatabase: string | string[] | Config | Database = {},\n    name?: string\n  ) {\n    if (isArangoDatabase(configOrDatabase)) {\n      const connection = configOrDatabase._connection;\n      const databaseName = (name || configOrDatabase.name).normalize(\"NFC\");\n      this._connection = connection;\n      this._name = databaseName;\n      const database = connection.database(databaseName);\n      if (database) return database;\n    } else {\n      const config = configOrDatabase;\n      const { databaseName, ...options } =\n        typeof config === \"string\" || Array.isArray(config)\n          ? { databaseName: name, url: config }\n          : config;\n      this._connection = new Connection(options);\n      this._name = databaseName?.normalize(\"NFC\") || \"_system\";\n    }\n  }\n\n  //#region misc\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB database.\n   */\n  get isArangoDatabase(): true {\n    return true;\n  }\n\n  /**\n   * Name of the ArangoDB database this instance represents.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Fetches version information from the ArangoDB server.\n   *\n   * @param details - If set to `true`, additional information about the\n   * ArangoDB server will be available as the `details` property.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const version = await db.version();\n   * // the version object contains the ArangoDB version information.\n   * // license: \"community\" or \"enterprise\"\n   * // version: ArangoDB version number\n   * // server: description of the server\n   * ```\n   */\n  version(details?: boolean): Promise<VersionInfo> {\n    return this.request(\n      {\n        method: \"GET\",\n        path: \"/_api/version\",\n        qs: { details },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Returns a new {@link Route} instance for the given path (relative to the\n   * database) that can be used to perform arbitrary HTTP requests.\n   *\n   * @param path - The database-relative URL of the route. Defaults to the\n   * database API root.\n   * @param headers - Default headers that should be sent with each request to\n   * the route.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const myFoxxService = db.route(\"my-foxx-service\");\n   * const response = await myFoxxService.post(\"users\", {\n   *   username: \"admin\",\n   *   password: \"hunter2\"\n   * });\n   * // response.body is the result of\n   * // POST /_db/_system/my-foxx-service/users\n   * // with JSON request body '{\"username\": \"admin\", \"password\": \"hunter2\"}'\n   * ```\n   */\n  route(path?: string, headers?: Headers): Route {\n    return new Route(this, path, headers);\n  }\n\n  /**\n   * @internal\n   *\n   * Performs an arbitrary HTTP request against the database.\n   *\n   * If `absolutePath` is set to `true`, the database path will not be\n   * automatically prepended to the `basePath`.\n   *\n   * @param T - Return type to use. Defaults to the response object type.\n   * @param options - Options for this request.\n   * @param transform - An optional function to transform the low-level\n   * response object to a more useful return value.\n   */\n  request<T = ArangojsResponse>(\n    options: RequestOptions & { absolutePath?: boolean },\n    transform?: (res: ArangojsResponse) => T\n  ): Promise<T>;\n  request<T = ArangojsResponse>(\n    {\n      absolutePath = false,\n      basePath,\n      ...opts\n    }: RequestOptions & { absolutePath?: boolean },\n    transform?: (res: ArangojsResponse) => T\n  ): Promise<T> {\n    if (!absolutePath) {\n      basePath = `/_db/${encodeURIComponent(this._name)}${basePath || \"\"}`;\n    }\n    return this._connection.request({ basePath, ...opts }, transform);\n  }\n\n  /**\n   * Updates the URL list by requesting a list of all coordinators in the\n   * cluster and adding any endpoints not initially specified in the\n   * {@link Config}.\n   *\n   * For long-running processes communicating with an ArangoDB cluster it is\n   * recommended to run this method periodically (e.g. once per hour) to make\n   * sure new coordinators are picked up correctly and can be used for\n   * fail-over or load balancing.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const interval = setInterval(\n   *   () => db.acquireHostList(),\n   *   5 * 60 * 1000 // every 5 minutes\n   * );\n   *\n   * // later\n   * clearInterval(interval);\n   * db.close();\n   * ```\n   */\n  async acquireHostList(): Promise<void> {\n    const urls: string[] = await this.request(\n      { path: \"/_api/cluster/endpoints\" },\n      (res) => res.body.endpoints.map((endpoint: any) => endpoint.endpoint)\n    );\n    this._connection.addToHostList(urls);\n  }\n\n  /**\n   * Closes all active connections of this database instance.\n   *\n   * Can be used to clean up idling connections during longer periods of\n   * inactivity.\n   *\n   * **Note**: This method currently has no effect in the browser version of\n   * arangojs.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const sessions = db.collection(\"sessions\");\n   * // Clean up expired sessions once per hour\n   * setInterval(async () => {\n   *   await db.query(aql`\n   *     FOR session IN ${sessions}\n   *     FILTER session.expires < DATE_NOW()\n   *     REMOVE session IN ${sessions}\n   *   `);\n   *   // Making sure to close the connections because they're no longer used\n   *   db.close();\n   * }, 1000 * 60 * 60);\n   * ```\n   */\n  close(): void {\n    this._connection.close();\n  }\n\n  /**\n   * Performs a request against every known coordinator and returns when the\n   * request has succeeded against every coordinator or the timeout is reached.\n   *\n   * **Note**: This method is primarily intended to make database setup easier\n   * in cluster scenarios and requires all coordinators to be known to arangojs\n   * before the method is invoked. The method is not useful in single-server or\n   * leader-follower replication scenarios.\n   *\n   * @example\n   * ```js\n   * const db = new Database({ loadBalancingStrategy: \"ROUND_ROBIN\" });\n   * await db.acquireHostList();\n   * const analyzer = db.analyzer(\"my-analyzer\");\n   * await analyzer.create();\n   * await db.waitForPropagation(\n   *   { path: `/_api/analyzer/${encodeURIComponent(analyzer.name)}` },\n   *   30000\n   * );\n   * // Analyzer has been propagated to all coordinators and can safely be used\n   * ```\n   *\n   * @param request - Request to perform against each known coordinator.\n   * @param timeout - Maximum number of milliseconds to wait for propagation.\n   */\n  async waitForPropagation(\n    request: RequestOptions,\n    timeout?: number\n  ): Promise<void>;\n  async waitForPropagation(\n    { basePath, ...request }: RequestOptions,\n    timeout?: number\n  ): Promise<void> {\n    await this._connection.waitForPropagation(\n      {\n        ...request,\n        basePath: `/_db/${encodeURIComponent(this._name)}${basePath || \"\"}`,\n      },\n      timeout\n    );\n  }\n\n  /**\n   * Methods for accessing the server-reported queue times of the mostly\n   * recently received responses.\n   */\n  get queueTime(): QueueTimeMetrics {\n    return this._connection.queueTime;\n  }\n\n  /**\n   * Sets the limit for the number of values of the most recently received\n   * server-reported queue times that can be accessed using\n   * {@link Database.queueTime}.\n   *\n   * @param responseQueueTimeSamples - Number of values to maintain.\n   */\n  setResponseQueueTimeSamples(responseQueueTimeSamples: number) {\n    this._connection.setResponseQueueTimeSamples(responseQueueTimeSamples);\n  }\n  //#endregion\n\n  //#region auth\n  /**\n   * Updates the `Database` instance and its connection string to use the given\n   * `databaseName`, then returns itself.\n   *\n   * **Note**: This also affects all collections, cursors and other arangojs\n   * objects originating from this database object, which may cause unexpected\n   * results.\n   *\n   * @param databaseName - Name of the database to use.\n   *\n   * @deprecated Use {@link Database.database} instead.\n   *\n   * @example\n   * ```js\n   * const systemDb = new Database();\n   * // systemDb.useDatabase(\"my_database\"); // deprecated\n   * const myDb = systemDb.database(\"my_database\");\n   * ```\n   */\n  useDatabase(databaseName: string): this {\n    this._connection.database(this._name, null);\n    this._name = databaseName.normalize(\"NFC\");\n    return this;\n  }\n\n  /**\n   * Updates the `Database` instance's `authorization` header to use Basic\n   * authentication with the given `username` and `password`, then returns\n   * itself.\n   *\n   * @param username - The username to authenticate with.\n   * @param password - The password to authenticate with.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * db.useDatabase(\"test\");\n   * db.useBasicAuth(\"admin\", \"hunter2\");\n   * // The database instance now uses the database \"test\"\n   * // with the username \"admin\" and password \"hunter2\".\n   * ```\n   */\n  useBasicAuth(username: string = \"root\", password: string = \"\"): this {\n    this._connection.setBasicAuth({ username, password });\n    return this;\n  }\n\n  /**\n   * Updates the `Database` instance's `authorization` header to use Bearer\n   * authentication with the given authentication `token`, then returns itself.\n   *\n   * @param token - The token to authenticate with.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * db.useBearerAuth(\"keyboardcat\");\n   * // The database instance now uses Bearer authentication.\n   * ```\n   */\n  useBearerAuth(token: string): this {\n    this._connection.setBearerAuth({ token });\n    return this;\n  }\n\n  /**\n   * Validates the given database credentials and exchanges them for an\n   * authentication token, then uses the authentication token for future\n   * requests and returns it.\n   *\n   * @param username - The username to authenticate with.\n   * @param password - The password to authenticate with.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * db.useDatabase(\"test\");\n   * await db.login(\"admin\", \"hunter2\");\n   * // The database instance now uses the database \"test\"\n   * // with an authentication token for the \"admin\" user.\n   * ```\n   */\n  login(username: string = \"root\", password: string = \"\"): Promise<string> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_open/auth\",\n        body: { username, password },\n      },\n      (res) => {\n        this.useBearerAuth(res.body.jwt);\n        return res.body.jwt;\n      }\n    );\n  }\n  //#endregion\n\n  //#region databases\n  /**\n   * Creates a new `Database` instance for the given `databaseName` that\n   * shares this database's connection pool.\n   *\n   * See also {@link Database.constructor}.\n   *\n   * @param databaseName - Name of the database.\n   *\n   * @example\n   * ```js\n   * const systemDb = new Database();\n   * const myDb = system.database(\"my_database\");\n   * ```\n   */\n  database(databaseName: string) {\n    return new Database(this as any, databaseName);\n  }\n\n  /**\n   * Fetches the database description for the active database from the server.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.get();\n   * // the database exists\n   * ```\n   */\n  get(): Promise<DatabaseInfo> {\n    return this.request(\n      { path: \"/_api/database/current\" },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Checks whether the database exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.exists();\n   * // result indicates whether the database exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === DATABASE_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Creates a new database with the given `databaseName` with the given\n   * `options` and returns a `Database` instance for that database.\n   *\n   * @param databaseName - Name of the database to create.\n   * @param options - Options for creating the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.createDatabase(\"mydb\", {\n   *   users: [{ username: \"root\" }]\n   * });\n   * // the database has been created\n   * db.useDatabase(\"mydb\");\n   * db.useBasicAuth(\"root\", \"\");\n   * ```\n   */\n  createDatabase(\n    databaseName: string,\n    options?: CreateDatabaseOptions\n  ): Promise<Database>;\n  /**\n   * Creates a new database with the given `databaseName` with the given\n   * `users` and returns a `Database` instance for that database.\n   *\n   * @param databaseName - Name of the database to create.\n   * @param users - Database users to create with the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.createDatabase(\"mydb\", [{ username: \"root\" }]);\n   * // the database has been created\n   * db.useDatabase(\"mydb\");\n   * db.useBasicAuth(\"root\", \"\");\n   * ```\n   */\n  createDatabase(\n    databaseName: string,\n    users: CreateDatabaseUser[]\n  ): Promise<Database>;\n  createDatabase(\n    databaseName: string,\n    usersOrOptions?: CreateDatabaseUser[] | CreateDatabaseOptions\n  ): Promise<Database> {\n    const { users, ...options } = Array.isArray(usersOrOptions)\n      ? { users: usersOrOptions }\n      : usersOrOptions || {};\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/database\",\n        body: { name: databaseName.normalize(\"NFC\"), users, options },\n      },\n      () => this.database(databaseName)\n    );\n  }\n\n  /**\n   * Fetches all databases from the server and returns an array of their names.\n   *\n   * See also {@link Database.databases} and\n   * {@link Database.listUserDatabases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.listDatabases();\n   * // databases is an array of database names\n   * ```\n   */\n  listDatabases(): Promise<string[]> {\n    return this.request({ path: \"/_api/database\" }, (res) => res.body.result);\n  }\n\n  /**\n   * Fetches all databases accessible to the active user from the server and\n   * returns an array of their names.\n   *\n   * See also {@link Database.userDatabases} and\n   * {@link Database.listDatabases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.listUserDatabases();\n   * // databases is an array of database names\n   * ```\n   */\n  listUserDatabases(): Promise<string[]> {\n    return this.request(\n      { path: \"/_api/database/user\" },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Fetches all databases from the server and returns an array of `Database`\n   * instances for those databases.\n   *\n   * See also {@link Database.listDatabases} and\n   * {@link Database.userDatabases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.databases();\n   * // databases is an array of databases\n   * ```\n   */\n  databases(): Promise<Database[]> {\n    return this.request({ path: \"/_api/database\" }, (res) =>\n      (res.body.result as string[]).map((databaseName) =>\n        this.database(databaseName)\n      )\n    );\n  }\n\n  /**\n   * Fetches all databases accessible to the active user from the server and\n   * returns an array of `Database` instances for those databases.\n   *\n   * See also {@link Database.listUserDatabases} and\n   * {@link Database.databases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.userDatabases();\n   * // databases is an array of databases\n   * ```\n   */\n  userDatabases(): Promise<Database[]> {\n    return this.request({ path: \"/_api/database/user\" }, (res) =>\n      (res.body.result as string[]).map((databaseName) =>\n        this.database(databaseName)\n      )\n    );\n  }\n\n  /**\n   * Deletes the database with the given `databaseName` from the server.\n   *\n   * @param databaseName - Name of the database to delete.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.dropDatabase(\"mydb\");\n   * // database \"mydb\" no longer exists\n   * ```\n   */\n  dropDatabase(databaseName: string): Promise<boolean> {\n    databaseName = databaseName.normalize(\"NFC\");\n    return this.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/database/${encodeURIComponent(databaseName)}`,\n      },\n      (res) => res.body.result\n    );\n  }\n  //#endregion\n\n  //#region collections\n  /**\n   * Returns a `Collection` instance for the given collection name.\n   *\n   * In TypeScript the collection implements both the\n   * {@link DocumentCollection} and {@link EdgeCollection} interfaces and can\n   * be cast to either type to enforce a stricter API.\n   *\n   * @param T - Type to use for document data. Defaults to `any`.\n   * @param collectionName - Name of the edge collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"potatoes\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Person {\n   *   name: string;\n   * }\n   * const db = new Database();\n   * const persons = db.collection<Person>(\"persons\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Person {\n   *   name: string;\n   * }\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const documents = db.collection(\"persons\") as DocumentCollection<Person>;\n   * const edges = db.collection(\"friends\") as EdgeCollection<Friend>;\n   * ```\n   */\n  collection<T extends Record<string, any> = any>(\n    collectionName: string\n  ): DocumentCollection<T> & EdgeCollection<T> {\n    collectionName = collectionName.normalize(\"NFC\");\n    if (!this._collections.has(collectionName)) {\n      this._collections.set(\n        collectionName,\n        new Collection(this, collectionName)\n      );\n    }\n    return this._collections.get(collectionName)!;\n  }\n\n  /**\n   * Creates a new collection with the given `collectionName` and `options`,\n   * then returns a {@link DocumentCollection} instance for the new collection.\n   *\n   * @param T - Type to use for document data. Defaults to `any`.\n   * @param collectionName - Name of the new collection.\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```ts\n   * const db = new Database();\n   * const documents = db.createCollection(\"persons\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Person {\n   *   name: string;\n   * }\n   * const db = new Database();\n   * const documents = db.createCollection<Person>(\"persons\");\n   * ```\n   */\n  async createCollection<T extends Record<string, any> = any>(\n    collectionName: string,\n    options?: CreateCollectionOptions & {\n      type?: CollectionType.DOCUMENT_COLLECTION;\n    }\n  ): Promise<DocumentCollection<T>>;\n  /**\n   * Creates a new edge collection with the given `collectionName` and\n   * `options`, then returns an {@link EdgeCollection} instance for the new\n   * edge collection.\n   *\n   * @param T - Type to use for edge document data. Defaults to `any`.\n   * @param collectionName - Name of the new collection.\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const edges = db.createCollection(\"friends\", {\n   *   type: CollectionType.EDGE_COLLECTION\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const edges = db.createCollection<Friend>(\"friends\", {\n   *   type: CollectionType.EDGE_COLLECTION\n   * });\n   * ```\n   */\n  async createCollection<T extends Record<string, any> = any>(\n    collectionName: string,\n    options: CreateCollectionOptions & {\n      type: CollectionType.EDGE_COLLECTION;\n    }\n  ): Promise<EdgeCollection<T>>;\n  async createCollection<T extends Record<string, any> = any>(\n    collectionName: string,\n    options?: CreateCollectionOptions & { type?: CollectionType }\n  ): Promise<DocumentCollection<T> & EdgeCollection<T>> {\n    const collection = this.collection(collectionName);\n    await collection.create(options);\n    return collection;\n  }\n\n  /**\n   * Creates a new edge collection with the given `collectionName` and\n   * `options`, then returns an {@link EdgeCollection} instance for the new\n   * edge collection.\n   *\n   * This is a convenience method for calling {@link Database.createCollection}\n   * with `options.type` set to `EDGE_COLLECTION`.\n   *\n   * @param T - Type to use for edge document data. Defaults to `any`.\n   * @param collectionName - Name of the new collection.\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const edges = db.createEdgeCollection(\"friends\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const edges = db.createEdgeCollection<Friend>(\"friends\");\n   * ```\n   */\n  async createEdgeCollection<T extends Record<string, any> = any>(\n    collectionName: string,\n    options?: CreateCollectionOptions\n  ): Promise<EdgeCollection<T>> {\n    return this.createCollection(collectionName, {\n      ...options,\n      type: CollectionType.EDGE_COLLECTION,\n    });\n  }\n\n  /**\n   * Renames the collection `collectionName` to `newName`.\n   *\n   * Additionally removes any stored `Collection` instance for\n   * `collectionName` from the `Database` instance's internal cache.\n   *\n   * **Note**: Renaming collections may not be supported when ArangoDB is\n   * running in a cluster configuration.\n   *\n   * @param collectionName - Current name of the collection.\n   * @param newName - The new name of the collection.\n   */\n  async renameCollection(\n    collectionName: string,\n    newName: string\n  ): Promise<ArangoResponseMetadata & CollectionMetadata> {\n    collectionName = collectionName.normalize(\"NFC\");\n    const result = await this.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${encodeURIComponent(collectionName)}/rename`,\n        body: { name: newName.normalize(\"NFC\") },\n      },\n      (res) => res.body\n    );\n    this._collections.delete(collectionName);\n    return result;\n  }\n\n  /**\n   * Fetches all collections from the database and returns an array of\n   * collection descriptions.\n   *\n   * See also {@link Database.collections}.\n   *\n   * @param excludeSystem - Whether system collections should be excluded.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.listCollections();\n   * // collections is an array of collection descriptions\n   * // not including system collections\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.listCollections(false);\n   * // collections is an array of collection descriptions\n   * // including system collections\n   * ```\n   */\n  listCollections(\n    excludeSystem: boolean = true\n  ): Promise<CollectionMetadata[]> {\n    return this.request(\n      {\n        path: \"/_api/collection\",\n        qs: { excludeSystem },\n      },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Fetches all collections from the database and returns an array of\n   * `Collection` instances.\n   *\n   * In TypeScript these instances implement both the\n   * {@link DocumentCollection} and {@link EdgeCollection} interfaces and can\n   * be cast to either type to enforce a stricter API.\n   *\n   * See also {@link Database.listCollections}.\n   *\n   * @param excludeSystem - Whether system collections should be excluded.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.collections();\n   * // collections is an array of DocumentCollection\n   * // and EdgeCollection instances\n   * // not including system collections\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.collections(false);\n   * // collections is an array of DocumentCollection\n   * // and EdgeCollection instances\n   * // including system collections\n   * ```\n   */\n  async collections(\n    excludeSystem: boolean = true\n  ): Promise<Array<DocumentCollection & EdgeCollection>> {\n    const collections = await this.listCollections(excludeSystem);\n    return collections.map((data) => this.collection(data.name));\n  }\n  //#endregion\n\n  //#region graphs\n  /**\n   * Returns a {@link Graph} instance representing the graph with the given\n   * `graphName`.\n   *\n   * @param graphName - Name of the graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * ```\n   */\n  graph(graphName: string): Graph {\n    graphName = graphName.normalize(\"NFC\");\n    if (!this._graphs.has(graphName)) {\n      this._graphs.set(graphName, new Graph(this, graphName));\n    }\n    return this._graphs.get(graphName)!;\n  }\n\n  /**\n   * Creates a graph with the given `graphName` and `edgeDefinitions`, then\n   * returns a {@link Graph} instance for the new graph.\n   *\n   * @param graphName - Name of the graph to be created.\n   * @param edgeDefinitions - An array of edge definitions.\n   * @param options - An object defining the properties of the graph.\n   */\n  async createGraph(\n    graphName: string,\n    edgeDefinitions: EdgeDefinitionOptions[],\n    options?: GraphCreateOptions\n  ): Promise<Graph> {\n    const graph = this.graph(graphName.normalize(\"NFC\"));\n    await graph.create(edgeDefinitions, options);\n    return graph;\n  }\n\n  /**\n   * Fetches all graphs from the database and returns an array of graph\n   * descriptions.\n   *\n   * See also {@link Database.graphs}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graphs = await db.listGraphs();\n   * // graphs is an array of graph descriptions\n   * ```\n   */\n  listGraphs(): Promise<GraphInfo[]> {\n    return this.request({ path: \"/_api/gharial\" }, (res) => res.body.graphs);\n  }\n\n  /**\n   * Fetches all graphs from the database and returns an array of {@link Graph}\n   * instances for those graphs.\n   *\n   * See also {@link Database.listGraphs}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graphs = await db.graphs();\n   * // graphs is an array of Graph instances\n   * ```\n   */\n  async graphs(): Promise<Graph[]> {\n    const graphs = await this.listGraphs();\n    return graphs.map((data: any) => this.graph(data._key));\n  }\n  //#endregion\n\n  //#region views\n  /**\n   * Returns an {@link ArangoSearchView} instance for the given `viewName`.\n   *\n   * @param viewName - Name of the ArangoSearch View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"potatoes\");\n   * ```\n   */\n  view(viewName: string): ArangoSearchView {\n    viewName = viewName.normalize(\"NFC\");\n    if (!this._views.has(viewName)) {\n      this._views.set(viewName, new View(this, viewName));\n    }\n    return this._views.get(viewName)!;\n  }\n\n  /**\n   * Creates a new ArangoSearch View with the given `viewName` and `options`\n   * and returns an {@link ArangoSearchView} instance for the created View.\n   *\n   * @param viewName - Name of the ArangoSearch View.\n   * @param options - An object defining the properties of the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = await db.createView(\"potatoes\");\n   * // the ArangoSearch View \"potatoes\" now exists\n   * ```\n   */\n  async createView(\n    viewName: string,\n    options?: ArangoSearchViewPropertiesOptions\n  ): Promise<ArangoSearchView> {\n    const view = this.view(viewName.normalize(\"NFC\"));\n    await view.create({ ...options, type: ViewType.ARANGOSEARCH_VIEW });\n    return view;\n  }\n\n  /**\n   * Renames the view `viewName` to `newName`.\n   *\n   * Additionally removes any stored {@link View} instance for `viewName` from\n   * the `Database` instance's internal cache.\n   *\n   * **Note**: Renaming views may not be supported when ArangoDB is running in\n   * a cluster configuration.\n   *\n   * @param viewName - Current name of the view.\n   * @param newName - The new name of the view.\n   */\n  async renameView(\n    viewName: string,\n    newName: string\n  ): Promise<ArangoResponseMetadata & ViewDescription> {\n    viewName = viewName.normalize(\"NFC\");\n    const result = await this.request(\n      {\n        method: \"PUT\",\n        path: `/_api/view/${encodeURIComponent(viewName)}/rename`,\n        body: { name: newName.normalize(\"NFC\") },\n      },\n      (res) => res.body\n    );\n    this._views.delete(viewName);\n    return result;\n  }\n\n  /**\n   * Fetches all Views from the database and returns an array of View\n   * descriptions.\n   *\n   * See also {@link Database.views}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const views = await db.listViews();\n   * // views is an array of View descriptions\n   * ```\n   */\n  listViews(): Promise<ViewDescription[]> {\n    return this.request({ path: \"/_api/view\" }, (res) => res.body.result);\n  }\n\n  /**\n   * Fetches all Views from the database and returns an array of\n   * {@link ArangoSearchView} instances for the Views.\n   *\n   * See also {@link Database.listViews}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const views = await db.views();\n   * // views is an array of ArangoSearch View instances\n   * ```\n   */\n  async views(): Promise<ArangoSearchView[]> {\n    const views = await this.listViews();\n    return views.map((data) => this.view(data.name));\n  }\n  //#endregion\n\n  //#region analyzers\n  /**\n   * Returns an {@link Analyzer} instance representing the Analyzer with the\n   * given `analyzerName`.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * const info = await analyzer.get();\n   * ```\n   */\n  analyzer(analyzerName: string): Analyzer {\n    analyzerName = analyzerName.normalize(\"NFC\");\n    if (!this._analyzers.has(analyzerName)) {\n      this._analyzers.set(analyzerName, new Analyzer(this, analyzerName));\n    }\n    return this._analyzers.get(analyzerName)!;\n  }\n\n  /**\n   * Creates a new Analyzer with the given `analyzerName` and `options`, then\n   * returns an {@link Analyzer} instance for the new Analyzer.\n   *\n   * @param analyzerName - Name of the Analyzer.\n   * @param options - An object defining the properties of the Analyzer.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = await db.createAnalyzer(\"potatoes\", { type: \"identity\" });\n   * // the identity Analyzer \"potatoes\" now exists\n   * ```\n   */\n  async createAnalyzer(\n    analyzerName: string,\n    options: CreateAnalyzerOptions\n  ): Promise<Analyzer> {\n    const analyzer = this.analyzer(analyzerName);\n    await analyzer.create(options);\n    return analyzer;\n  }\n\n  /**\n   * Fetches all Analyzers visible in the database and returns an array of\n   * Analyzer descriptions.\n   *\n   * See also {@link Database.analyzers}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzers = await db.listAnalyzers();\n   * // analyzers is an array of Analyzer descriptions\n   * ```\n   */\n  listAnalyzers(): Promise<AnalyzerDescription[]> {\n    return this.request({ path: \"/_api/analyzer\" }, (res) => res.body.result);\n  }\n\n  /**\n   * Fetches all Analyzers visible in the database and returns an array of\n   * {@link Analyzer} instances for those Analyzers.\n   *\n   * See also {@link Database.listAnalyzers}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzers = await db.analyzers();\n   * // analyzers is an array of Analyzer instances\n   * ```\n   */\n  async analyzers(): Promise<Analyzer[]> {\n    const analyzers = await this.listAnalyzers();\n    return analyzers.map((data) => this.analyzer(data.name));\n  }\n  //#endregion\n\n  //#region users\n  /**\n   * Fetches all ArangoDB users visible to the authenticated user and returns\n   * an array of user objects.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const users = await db.listUsers();\n   * // users is an array of user objects\n   * ```\n   */\n  listUsers(): Promise<ArangoUser[]> {\n    return this.request({\n      absolutePath: true,\n      path: \"/_api/user\",\n    });\n  }\n\n  /**\n   * Fetches the user data of a single ArangoDB user.\n   *\n   * @param username - Name of the ArangoDB user to fetch.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.getUser(\"steve\");\n   * // user is the user object for the user named \"steve\"\n   * ```\n   */\n  getUser(username: string): Promise<ArangoUser & ArangoResponseMetadata> {\n    return this.request({\n      absolutePath: true,\n      path: `/_api/user/${encodeURIComponent(username)}`,\n    });\n  }\n\n  /**\n   * Creates a new ArangoDB user with the given password.\n   *\n   * @param username - Name of the ArangoDB user to create.\n   * @param passwd - Password of the new ArangoDB user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.createUser(\"steve\", \"hunter2\");\n   * // The user \"steve\" has been created\n   * ```\n   */\n  createUser(\n    username: string,\n    passwd: string\n  ): Promise<ArangoUser & ArangoResponseMetadata>;\n  /**\n   * Creates a new ArangoDB user with the given options.\n   *\n   * @param username - Name of the ArangoDB user to create.\n   * @param options - Additional options for creating the ArangoDB user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.createUser(\"steve\", { passwd: \"hunter2\" });\n   * // The user \"steve\" has been created\n   * ```\n   */\n  createUser(\n    username: string,\n    options: UserOptions\n  ): Promise<ArangoUser & ArangoResponseMetadata>;\n  createUser(\n    username: string,\n    options: string | UserOptions\n  ): Promise<ArangoUser & ArangoResponseMetadata> {\n    if (typeof options === \"string\") {\n      options = { passwd: options };\n    }\n    return this.request(\n      {\n        absolutePath: true,\n        method: \"POST\",\n        path: \"/_api/user\",\n        body: { user: username, ...options },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Sets the password of a given ArangoDB user to the new value.\n   *\n   * @param username - Name of the ArangoDB user to change the password for.\n   * @param passwd - New password for the ArangoDB user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.updateUser(\"steve\", \"hunter2\");\n   * // The user \"steve\" has received a new password\n   * ```\n   */\n  updateUser(\n    username: string,\n    passwd: string\n  ): Promise<ArangoUser & ArangoResponseMetadata>;\n  /**\n   * Updates the ArangoDB user with the new options.\n   *\n   * @param username - Name of the ArangoDB user to modify.\n   * @param options - Options of the ArangoDB user to modify.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.updateUser(\"steve\", { active: false });\n   * // The user \"steve\" has been set to inactive\n   * ```\n   */\n  updateUser(\n    username: string,\n    options: Partial<UserOptions>\n  ): Promise<ArangoUser & ArangoResponseMetadata>;\n  updateUser(\n    username: string,\n    options: string | Partial<UserOptions>\n  ): Promise<ArangoUser & ArangoResponseMetadata> {\n    if (typeof options === \"string\") {\n      options = { passwd: options };\n    }\n    return this.request(\n      {\n        absolutePath: true,\n        method: \"PATCH\",\n        path: `/api/user/${encodeURIComponent(username)}`,\n        body: options,\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Replaces the ArangoDB user's option with the new options.\n   *\n   * @param username - Name of the ArangoDB user to modify.\n   * @param options - New options to replace the user's existing options.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.replaceUser(\"steve\", { passwd: \"\", active: false });\n   * // The user \"steve\" has been set to inactive with an empty password\n   * ```\n   */\n  replaceUser(\n    username: string,\n    options: UserOptions\n  ): Promise<ArangoUser & ArangoResponseMetadata> {\n    if (typeof options === \"string\") {\n      options = { passwd: options };\n    }\n    return this.request(\n      {\n        absolutePath: true,\n        method: \"PUT\",\n        path: `/api/user/${encodeURIComponent(username)}`,\n        body: options,\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Removes the ArangoDB user with the given username from the server.\n   *\n   * @param username - Name of the ArangoDB user to remove.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.removeUser(\"steve\");\n   * // The user \"steve\" has been removed\n   * ```\n   */\n  removeUser(username: string): Promise<ArangoResponseMetadata> {\n    return this.request(\n      {\n        absolutePath: true,\n        method: \"DELETE\",\n        path: `/_api/user/${encodeURIComponent(username)}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Fetches the given ArangoDB user's access level for the database, or the\n   * given collection in the given database.\n   *\n   * @param username - Name of the ArangoDB user to fetch the access level for.\n   * @param database - Database to fetch the access level for.\n   * @param collection - Collection to fetch the access level for.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\");\n   * // The access level of the user \"steve\" has been fetched for the current\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   database: \"staging\"\n   * });\n   * // The access level of the user \"steve\" has been fetched for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   collection: \"pokemons\"\n   * });\n   * // The access level of the user \"steve\" has been fetched for the\n   * // \"pokemons\" collection in the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   collection: \"pokemons\"\n   * });\n   * // The access level of the user \"steve\" has been fetched for the\n   * // \"pokemons\" collection in the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   database: staging\n   * });\n   * // The access level of the user \"steve\" has been fetched for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   collection: staging.collection(\"pokemons\")\n   * });\n   * // The access level of the user \"steve\" has been fetched for the\n   * // \"pokemons\" collection in database \"staging\".\n   * ```\n   */\n  getUserAccessLevel(\n    username: string,\n    { database, collection }: UserAccessLevelOptions\n  ): Promise<AccessLevel> {\n    const databaseName = isArangoDatabase(database)\n      ? database.name\n      : database?.normalize(\"NFC\") ??\n        (isArangoCollection(collection)\n          ? ((collection as any)._db as Database).name\n          : this._name);\n    const suffix = collection\n      ? `/${encodeURIComponent(\n          isArangoCollection(collection)\n            ? collection.name\n            : collection.normalize(\"NFC\")\n        )}`\n      : \"\";\n    return this.request(\n      {\n        absolutePath: true,\n        path: `/_api/user/${encodeURIComponent(\n          username\n        )}/database/${encodeURIComponent(databaseName)}${suffix}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Sets the given ArangoDB user's access level for the database, or the\n   * given collection in the given database.\n   *\n   * @param username - Name of the ArangoDB user to set the access level for.\n   * @param database - Database to set the access level for.\n   * @param collection - Collection to set the access level for.\n   * @param grant - Access level to set for the given user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", { grant: \"rw\" });\n   * // The user \"steve\" now has read-write access to the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", {\n   *   collection: \"pokemons\",\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n   * // in the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   collection: \"pokemons\",\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n   * // in the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.setUserAccessLevel(\"steve\", {\n   *   database: staging,\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.setUserAccessLevel(\"steve\", {\n   *   collection: staging.collection(\"pokemons\"),\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n   * // in database \"staging\".\n   * ```\n   */\n  setUserAccessLevel(\n    username: string,\n    {\n      database,\n      collection,\n      grant,\n    }: UserAccessLevelOptions & { grant: AccessLevel }\n  ): Promise<Record<string, AccessLevel> & ArangoResponseMetadata> {\n    const databaseName = isArangoDatabase(database)\n      ? database.name\n      : database?.normalize(\"NFC\") ??\n        (isArangoCollection(collection)\n          ? ((collection as any)._db as Database).name\n          : this._name);\n    const suffix = collection\n      ? `/${encodeURIComponent(\n          isArangoCollection(collection)\n            ? collection.name\n            : collection.normalize(\"NFC\")\n        )}`\n      : \"\";\n    return this.request(\n      {\n        absolutePath: true,\n        method: \"PUT\",\n        path: `/_api/user/${encodeURIComponent(\n          username\n        )}/database/${encodeURIComponent(databaseName)}${suffix}`,\n        body: { grant },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Clears the given ArangoDB user's access level for the database, or the\n   * given collection in the given database.\n   *\n   * @param username - Name of the ArangoDB user to clear the access level for.\n   * @param database - Database to clear the access level for.\n   * @param collection - Collection to clear the access level for.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\");\n   * // The access level of the user \"steve\" has been cleared for the current\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\", { database: \"staging\" });\n   * // The access level of the user \"steve\" has been cleared for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\", { collection: \"pokemons\" });\n   * // The access level of the user \"steve\" has been cleared for the\n   * // \"pokemons\" collection in the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   collection: \"pokemons\"\n   * });\n   * // The access level of the user \"steve\" has been cleared for the\n   * // \"pokemons\" collection in the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.clearUserAccessLevel(\"steve\", { database: staging });\n   * // The access level of the user \"steve\" has been cleared for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.clearUserAccessLevel(\"steve\", {\n   *   collection: staging.collection(\"pokemons\")\n   * });\n   * // The access level of the user \"steve\" has been cleared for the\n   * // \"pokemons\" collection in database \"staging\".\n   * ```\n   */\n  clearUserAccessLevel(\n    username: string,\n    { database, collection }: UserAccessLevelOptions\n  ): Promise<Record<string, AccessLevel> & ArangoResponseMetadata> {\n    const databaseName = isArangoDatabase(database)\n      ? database.name\n      : database?.normalize(\"NFC\") ??\n        (isArangoCollection(collection)\n          ? ((collection as any)._db as Database).name\n          : this._name);\n    const suffix = collection\n      ? `/${encodeURIComponent(\n          isArangoCollection(collection)\n            ? collection.name\n            : collection.normalize(\"NFC\")\n        )}`\n      : \"\";\n    return this.request(\n      {\n        absolutePath: true,\n        method: \"DELETE\",\n        path: `/_api/user/${encodeURIComponent(\n          username\n        )}/database/${encodeURIComponent(databaseName)}${suffix}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Fetches an object mapping names of databases to the access level of the\n   * given ArangoDB user for those databases.\n   *\n   * @param username - Name of the ArangoDB user to fetch the access levels for.\n   * @param full - Whether access levels for collections should be included.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevels = await db.getUserDatabases(\"steve\");\n   * for (const [databaseName, accessLevel] of Object.entries(accessLevels)) {\n   *   console.log(`${databaseName}: ${accessLevel}`);\n   * }\n   * ```\n   */\n  getUserDatabases(\n    username: string,\n    full?: false\n  ): Promise<Record<string, AccessLevel>>;\n  /**\n   * Fetches an object mapping names of databases to the access level of the\n   * given ArangoDB user for those databases and the collections within each\n   * database.\n   *\n   * @param username - Name of the ArangoDB user to fetch the access levels for.\n   * @param full - Whether access levels for collections should be included.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevels = await db.getUserDatabases(\"steve\", true);\n   * for (const [databaseName, obj] of Object.entries(accessLevels)) {\n   *   console.log(`${databaseName}: ${obj.permission}`);\n   *   for (const [collectionName, accessLevel] of Object.entries(obj.collections)) {\n   *     console.log(`${databaseName}/${collectionName}: ${accessLevel}`);\n   *   }\n   * }\n   * ```\n   */\n  getUserDatabases(\n    username: string,\n    full: true\n  ): Promise<\n    Record<\n      string,\n      {\n        permission: AccessLevel;\n        collections: Record<string, AccessLevel | \"undefined\">;\n      }\n    >\n  >;\n  getUserDatabases(\n    username: string,\n    full?: boolean\n  ): Promise<Record<string, any>> {\n    return this.request({\n      absolutePath: true,\n      path: `/_api/user/${encodeURIComponent(username)}/database`,\n      qs: { full },\n    });\n  }\n  //#endregion\n\n  //#region transactions\n  /**\n   * Performs a server-side JavaScript transaction and returns its return\n   * value.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link ArangoCollection} interface: `Collection`,\n   * {@link GraphVertexCollection}, {@link GraphEdgeCollection} as well as\n   * (in TypeScript) {@link DocumentCollection} and {@link EdgeCollection}.\n   *\n   * **Note**: The `action` function will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any values other than those passed via the `params` option.\n   *\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   *\n   * @param collections - Collections involved in the transaction.\n   * @param action - A string evaluating to a JavaScript function to be\n   * executed on the server.\n   * @param options - Options for the transaction. If `options.allowImplicit`\n   * is specified, it will be used if `collections.allowImplicit` was not\n   * specified.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const action = `\n   *   function(params) {\n   *     // This code will be executed inside ArangoDB!\n   *     const { query } = require(\"@arangodb\");\n   *     return query\\`\n   *         FOR user IN _users\n   *         FILTER user.age > ${params.age}\n   *         RETURN u.user\n   *       \\`.toArray();\n   *   }\n   * `);\n   *\n   * const result = await db.executeTransaction({\n   *   read: [\"_users\"]\n   * }, action, {\n   *   params: { age: 12 }\n   * });\n   * // result contains the return value of the action\n   * ```\n   */\n  executeTransaction(\n    collections: TransactionCollections & { allowImplicit?: boolean },\n    action: string,\n    options?: TransactionOptions & { params?: any }\n  ): Promise<any>;\n  /**\n   * Performs a server-side transaction and returns its return value.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link ArangoCollection} interface: `Collection`,\n   * {@link GraphVertexCollection}, {@link GraphEdgeCollection} as well as\n   * (in TypeScript) {@link DocumentCollection} and {@link EdgeCollection}.\n   *\n   * **Note**: The `action` function will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any values other than those passed via the `params` option.\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   *\n   * @param collections - Collections that can be read from and written to\n   * during the transaction.\n   * @param action - A string evaluating to a JavaScript function to be\n   * executed on the server.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const action = `\n   *   function(params) {\n   *     // This code will be executed inside ArangoDB!\n   *     const { query } = require(\"@arangodb\");\n   *     return query\\`\n   *         FOR user IN _users\n   *         FILTER user.age > ${params.age}\n   *         RETURN u.user\n   *       \\`.toArray();\n   *   }\n   * `);\n   *\n   * const result = await db.executeTransaction([\"_users\"], action, {\n   *   params: { age: 12 }\n   * });\n   * // result contains the return value of the action\n   * ```\n   */\n  executeTransaction(\n    collections: (string | ArangoCollection)[],\n    action: string,\n    options?: TransactionOptions & { params?: any }\n  ): Promise<any>;\n  /**\n   * Performs a server-side transaction and returns its return value.\n   *\n   * The Collection can be specified as a collection name (string) or an object\n   * implementing the {@link ArangoCollection} interface: `Collection`,\n   * {@link GraphVertexCollection}, {@link GraphEdgeCollection} as well as\n   * (in TypeScript) {@link DocumentCollection} and {@link EdgeCollection}.\n   *\n   * **Note**: The `action` function will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any values other than those passed via the `params` option.\n   * See the official ArangoDB documentation for\n   * {@link https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html | the JavaScript `@arangodb` module}\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   *\n   * @param collection - A collection that can be read from and written to\n   * during the transaction.\n   * @param action - A string evaluating to a JavaScript function to be\n   * executed on the server.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const action = `\n   *   function(params) {\n   *     // This code will be executed inside ArangoDB!\n   *     const { query } = require(\"@arangodb\");\n   *     return query\\`\n   *         FOR user IN _users\n   *         FILTER user.age > ${params.age}\n   *         RETURN u.user\n   *       \\`.toArray();\n   *   }\n   * `);\n   *\n   * const result = await db.executeTransaction(\"_users\", action, {\n   *   params: { age: 12 }\n   * });\n   * // result contains the return value of the action\n   * ```\n   */\n  executeTransaction(\n    collection: string | ArangoCollection,\n    action: string,\n    options?: TransactionOptions & { params?: any }\n  ): Promise<any>;\n  executeTransaction(\n    collections:\n      | (TransactionCollections & { allowImplicit?: boolean })\n      | (string | ArangoCollection)[]\n      | string\n      | ArangoCollection,\n    action: string,\n    options?: TransactionOptions & { params?: any }\n  ): Promise<any> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/transaction\",\n        body: {\n          collections: coerceTransactionCollections(collections),\n          action,\n          ...options,\n        },\n      },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Returns a {@link Transaction} instance for an existing streaming\n   * transaction with the given `id`.\n   *\n   * See also {@link Database.beginTransaction}.\n   *\n   * @param id - The `id` of an existing stream transaction.\n   *\n   * @example\n   * ```js\n   * const trx1 = await db.beginTransaction(collections);\n   * const id = trx1.id;\n   * // later\n   * const trx2 = db.transaction(id);\n   * await trx2.commit();\n   * ```\n   */\n  transaction(transactionId: string): Transaction {\n    return new Transaction(this, transactionId);\n  }\n\n  /**\n   * Begins a new streaming transaction for the given collections, then returns\n   * a {@link Transaction} instance for the transaction.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link ArangoCollection} interface: `Collection`,\n   * {@link GraphVertexCollection}, {@link GraphEdgeCollection} as well as\n   * (in TypeScript) {@link DocumentCollection} and {@link EdgeCollection}.\n   *\n   * @param collections - Collections involved in the transaction.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction({\n   *   read: [\"vertices\"],\n   *   write: [edges] // collection instances can be passed directly\n   * });\n   * const start = await trx.step(() => vertices.document(\"a\"));\n   * const end = await trx.step(() => vertices.document(\"b\"));\n   * await trx.step(() => edges.save({ _from: start._id, _to: end._id }));\n   * await trx.commit();\n   * ```\n   */\n  beginTransaction(\n    collections: TransactionCollections,\n    options?: TransactionOptions\n  ): Promise<Transaction>;\n  /**\n   * Begins a new streaming transaction for the given collections, then returns\n   * a {@link Transaction} instance for the transaction.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link ArangoCollection} interface: `Collection`,\n   * {@link GraphVertexCollection}, {@link GraphEdgeCollection} as well as\n   * (in TypeScript) {@link DocumentCollection} and {@link EdgeCollection}.\n   *\n   * @param collections - Collections that can be read from and written to\n   * during the transaction.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction([\n   *   \"vertices\",\n   *   edges // collection instances can be passed directly\n   * ]);\n   * const start = await trx.step(() => vertices.document(\"a\"));\n   * const end = await trx.step(() => vertices.document(\"b\"));\n   * await trx.step(() => edges.save({ _from: start._id, _to: end._id }));\n   * await trx.commit();\n   * ```\n   */\n  beginTransaction(\n    collections: (string | ArangoCollection)[],\n    options?: TransactionOptions\n  ): Promise<Transaction>;\n  /**\n   * Begins a new streaming transaction for the given collections, then returns\n   * a {@link Transaction} instance for the transaction.\n   *\n   * The Collection can be specified as a collection name (string) or an object\n   * implementing the {@link ArangoCollection} interface: `Collection`,\n   * {@link GraphVertexCollection}, {@link GraphEdgeCollection} as well as\n   * (in TypeScript) {@link DocumentCollection} and {@link EdgeCollection}.\n   *\n   * @param collections - A collection that can be read from and written to\n   * during the transaction.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const start = vertices.document(\"a\");\n   * const end = vertices.document(\"b\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction(\n   *   edges // collection instances can be passed directly\n   * );\n   * await trx.step(() => edges.save({ _from: start._id, _to: end._id }));\n   * await trx.commit();\n   * ```\n   */\n  beginTransaction(\n    collection: string | ArangoCollection,\n    options?: TransactionOptions\n  ): Promise<Transaction>;\n  beginTransaction(\n    collections:\n      | TransactionCollections\n      | (string | ArangoCollection)[]\n      | string\n      | ArangoCollection,\n    options?: TransactionOptions\n  ): Promise<Transaction> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/transaction/begin\",\n        body: {\n          collections: coerceTransactionCollections(collections),\n          ...options,\n        },\n      },\n      (res) => new Transaction(this, res.body.result.id)\n    );\n  }\n\n  /**\n   * Fetches all active transactions from the database and returns an array of\n   * transaction descriptions.\n   *\n   * See also {@link Database.transactions}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const transactions = await db.listTransactions();\n   * // transactions is an array of transaction descriptions\n   * ```\n   */\n  listTransactions(): Promise<TransactionDetails[]> {\n    return this._connection.request(\n      { path: \"/_api/transaction\" },\n      (res) => res.body.transactions\n    );\n  }\n\n  /**\n   * Fetches all active transactions from the database and returns an array of\n   * {@link Transaction} instances for those transactions.\n   *\n   * See also {@link Database.listTransactions}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const transactions = await db.transactions();\n   * // transactions is an array of transactions\n   * ```\n   */\n  async transactions(): Promise<Transaction[]> {\n    const transactions = await this.listTransactions();\n    return transactions.map((data) => this.transaction(data.id));\n  }\n  //#endregion\n\n  //#region queries\n  /**\n   * Performs a database query using the given `query`, then returns a new\n   * {@link ArrayCursor} instance for the result set.\n   *\n   * See the {@link aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An object containing an AQL query string and bind\n   * parameters, e.g. the object returned from an {@link aql} template string.\n   * @param options - Options for the query execution.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   *\n   * // Using an aql template string\n   * const cursor = await db.query(aql`\n   *   FOR u IN _users\n   *   FILTER u.authData.active == ${active}\n   *   RETURN u.user\n   * `);\n   * // cursor is a cursor for the query result\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   *\n   * // Using an object with a regular multi-line string\n   * const cursor = await db.query({\n   *   query: `\n   *     FOR u IN _users\n   *     FILTER u.authData.active == @active\n   *     RETURN u.user\n   *   `,\n   *   bindVars: { active: active }\n   * });\n   * ```\n   */\n  query(query: AqlQuery, options?: QueryOptions): Promise<ArrayCursor>;\n  /**\n   * Performs a database query using the given `query` and `bindVars`, then\n   * returns a new {@link ArrayCursor} instance for the result set.\n   *\n   * See the {@link aql} template string handler for a safer and easier\n   * alternative to passing strings directly.\n   *\n   * @param query - An AQL query string.\n   * @param bindVars - An object defining bind parameters for the query.\n   * @param options - Options for the query execution.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   *\n   * const cursor = await db.query(\n   *   // A normal multi-line string\n   *   `\n   *     FOR u IN _users\n   *     FILTER u.authData.active == @active\n   *     RETURN u.user\n   *   `,\n   *   { active: active }\n   * );\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   *\n   * const cursor = await db.query(\n   *   // An AQL literal created from a normal multi-line string\n   *   aql.literal(`\n   *     FOR u IN _users\n   *     FILTER u.authData.active == @active\n   *     RETURN u.user\n   *   `),\n   *   { active: active }\n   * );\n   * ```\n   */\n  query(\n    query: string | AqlLiteral,\n    bindVars?: Dict<any>,\n    options?: QueryOptions\n  ): Promise<ArrayCursor>;\n  query(\n    query: string | AqlQuery | AqlLiteral,\n    bindVars?: Dict<any>,\n    options?: QueryOptions\n  ): Promise<ArrayCursor> {\n    if (isAqlQuery(query)) {\n      options = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    const {\n      allowDirtyRead,\n      count,\n      batchSize,\n      cache,\n      memoryLimit,\n      ttl,\n      timeout,\n      ...opts\n    } = options || {};\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/cursor\",\n        body: {\n          query,\n          bindVars,\n          count,\n          batchSize,\n          cache,\n          memoryLimit,\n          ttl,\n          options: opts,\n        },\n        allowDirtyRead,\n        timeout,\n      },\n      (res) =>\n        new BatchedArrayCursor(\n          this,\n          res.body,\n          res.arangojsHostId,\n          allowDirtyRead\n        ).items\n    );\n  }\n\n  /**\n   * Explains a database query using the given `query`.\n   *\n   * See the {@link aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An object containing an AQL query string and bind\n   * parameters, e.g. the object returned from an {@link aql} template string.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   RETURN doc._key\n   * `);\n   * ```\n   */\n  explain(\n    query: AqlQuery,\n    options?: ExplainOptions & { allPlans?: false }\n  ): Promise<ArangoResponseMetadata & SingleExplainResult>;\n  /**\n   * Explains a database query using the given `query`.\n   *\n   * See the {@link aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An object containing an AQL query string and bind\n   * parameters, e.g. the object returned from an {@link aql} template string.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(\n   *   aql`\n   *     FOR doc IN ${collection}\n   *     FILTER doc.flavor == \"strawberry\"\n   *     RETURN doc._key\n   *   `,\n   *   { allPlans: true }\n   * );\n   * ```\n   */\n  explain(\n    query: AqlQuery,\n    options?: ExplainOptions & { allPlans: true }\n  ): Promise<ArangoResponseMetadata & MultiExplainResult>;\n  /**\n   * Explains a database query using the given `query` and `bindVars`.\n   *\n   * See the {@link aql} template string handler for a safer and easier\n   * alternative to passing strings directly.\n   *\n   * @param query - An AQL query string.\n   * @param bindVars - An object defining bind parameters for the query.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(\n   *   `\n   *     FOR doc IN @@collection\n   *     FILTER doc.flavor == \"strawberry\"\n   *     RETURN doc._key\n   *   `,\n   *   { \"@collection\": collection.name }\n   * );\n   * ```\n   */\n  explain(\n    query: string | AqlLiteral,\n    bindVars?: Dict<any>,\n    options?: ExplainOptions & { allPlans?: false }\n  ): Promise<ArangoResponseMetadata & SingleExplainResult>;\n  /**\n   * Explains a database query using the given `query` and `bindVars`.\n   *\n   * See the {@link aql} template string handler for a safer and easier\n   * alternative to passing strings directly.\n   *\n   * @param query - An AQL query string.\n   * @param bindVars - An object defining bind parameters for the query.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(\n   *   `\n   *     FOR doc IN @@collection\n   *     FILTER doc.flavor == \"strawberry\"\n   *     RETURN doc._key\n   *   `,\n   *   { \"@collection\": collection.name },\n   *   { allPlans: true }\n   * );\n   * ```\n   */\n  explain(\n    query: string | AqlLiteral,\n    bindVars?: Dict<any>,\n    options?: ExplainOptions & { allPlans: true }\n  ): Promise<ArangoResponseMetadata & MultiExplainResult>;\n  explain(\n    query: string | AqlQuery | AqlLiteral,\n    bindVars?: Dict<any>,\n    options?: ExplainOptions\n  ): Promise<\n    ArangoResponseMetadata & (SingleExplainResult | MultiExplainResult)\n  > {\n    if (isAqlQuery(query)) {\n      options = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/explain\",\n        body: { query, bindVars, options },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Parses the given query and returns the result.\n   *\n   * See the {@link aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An AQL query string or an object containing an AQL query\n   * string and bind parameters, e.g. the object returned from an {@link aql}\n   * template string.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const ast = await db.parse(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   RETURN doc._key\n   * `);\n   * ```\n   */\n  parse(query: string | AqlQuery | AqlLiteral): Promise<ParseResult> {\n    if (isAqlQuery(query)) {\n      query = query.query;\n    } else if (isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/query\",\n        body: { query },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Fetches the query tracking properties.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const tracking = await db.queryTracking();\n   * console.log(tracking.enabled);\n   * ```\n   */\n  queryTracking(): Promise<QueryTracking>;\n  /**\n   * Modifies the query tracking properties.\n   *\n   * @param options - Options for query tracking.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // track up to 5 slow queries exceeding 5 seconds execution time\n   * await db.setQueryTracking({\n   *   enabled: true,\n   *   trackSlowQueries: true,\n   *   maxSlowQueries: 5,\n   *   slowQueryThreshold: 5\n   * });\n   * ```\n   */\n  queryTracking(options: QueryTrackingOptions): Promise<QueryTracking>;\n  queryTracking(options?: QueryTrackingOptions): Promise<QueryTracking> {\n    return this.request(\n      options\n        ? {\n            method: \"PUT\",\n            path: \"/_api/query/properties\",\n            body: options,\n          }\n        : {\n            method: \"GET\",\n            path: \"/_api/query/properties\",\n          },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Fetches a list of information for all currently running queries.\n   *\n   * See also {@link Database.listSlowQueries} and {@link Database.killQuery}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const queries = await db.listRunningQueries();\n   * ```\n   */\n  listRunningQueries(): Promise<QueryInfo[]> {\n    return this.request(\n      {\n        method: \"GET\",\n        path: \"/_api/query/current\",\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Fetches a list of information for all recent slow queries.\n   *\n   * See also {@link Database.listRunningQueries} and\n   * {@link Database.clearSlowQueries}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const queries = await db.listSlowQueries();\n   * // Only works if slow query tracking is enabled\n   * ```\n   */\n  listSlowQueries(): Promise<QueryInfo[]> {\n    return this.request(\n      {\n        method: \"GET\",\n        path: \"/_api/query/slow\",\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Clears the list of recent slow queries.\n   *\n   * See also {@link Database.listSlowQueries}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearSlowQueries();\n   * // Slow query list is now cleared\n   * ```\n   */\n  clearSlowQueries(): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        path: \"/_api/query/slow\",\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Kills a running query with the given `queryId`.\n   *\n   * See also {@link Database.listRunningQueries}.\n   *\n   * @param queryId - The ID of a currently running query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const queries = await db.listRunningQueries();\n   * await Promise.all(queries.map(\n   *   async (query) => {\n   *     if (query.state === \"executing\") {\n   *       await db.killQuery(query.id);\n   *     }\n   *   }\n   * ));\n   * ```\n   */\n  killQuery(queryId: string): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/query/${encodeURIComponent(queryId)}`,\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n\n  //#region functions\n  /**\n   * Fetches a list of all AQL user functions registered with the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const functions = await db.listFunctions();\n   * const names = functions.map(fn => fn.name);\n   * ```\n   */\n  listFunctions(): Promise<AqlUserFunction[]> {\n    return this.request(\n      { path: \"/_api/aqlfunction\" },\n      (res) => res.body.result\n    );\n  }\n\n  /**\n   * Creates an AQL user function with the given _name_ and _code_ if it does\n   * not already exist or replaces it if a function with the same name already\n   * existed.\n   *\n   * @param name - A valid AQL function name. The function name must consist\n   * of at least two alphanumeric identifiers separated with double colons.\n   * @param code - A string evaluating to a JavaScript function (not a\n   * JavaScript function object).\n   * @param isDeterministic - If set to `true`, the function is expected to\n   * always return the same result for equivalent inputs. This option currently\n   * has no effect but may allow for optimizations in the future.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.createFunction(\n   *   \"ACME::ACCOUNTING::CALCULATE_VAT\",\n   *   \"(price) => price * 0.19\"\n   * );\n   * // Use the new function in an AQL query with template handler:\n   * const cursor = await db.query(aql`\n   *   FOR product IN products\n   *   RETURN MERGE(\n   *     { vat: ACME::ACCOUNTING::CALCULATE_VAT(product.price) },\n   *     product\n   *   )\n   * `);\n   * // cursor is a cursor for the query result\n   * ```\n   */\n  createFunction(\n    name: string,\n    code: string,\n    isDeterministic: boolean = false\n  ): Promise<ArangoResponseMetadata & { isNewlyCreated: boolean }> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/aqlfunction\",\n        body: { name, code, isDeterministic },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Deletes the AQL user function with the given name from the database.\n   *\n   * @param name - The name of the user function to drop.\n   * @param group - If set to `true`, all functions with a name starting with\n   * `name` will be deleted, otherwise only the function with the exact name\n   * will be deleted.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.dropFunction(\"ACME::ACCOUNTING::CALCULATE_VAT\");\n   * // the function no longer exists\n   * ```\n   */\n  dropFunction(\n    name: string,\n    group: boolean = false\n  ): Promise<ArangoResponseMetadata & { deletedCount: number }> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/aqlfunction/${encodeURIComponent(name)}`,\n        qs: { group },\n      },\n      (res) => res.body\n    );\n  }\n  //#endregion\n\n  //#region services\n  /**\n   * Fetches a list of all installed service.\n   *\n   * @param excludeSystem - Whether system services should be excluded.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const services = await db.listServices();\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const services = await db.listServices(false); // all services\n   * ```\n   */\n  listServices(excludeSystem: boolean = true): Promise<ServiceSummary[]> {\n    return this.request(\n      {\n        path: \"/_api/foxx\",\n        qs: { excludeSystem },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Installs a new service.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param source - The service bundle to install.\n   * @param options - Options for installing the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a node.js file stream as source\n   * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n   * const info = await db.installService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a node.js Buffer as source\n   * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n   * const info = await db.installService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a File (Blob) from a browser file input\n   * const element = document.getElementById(\"my-file-input\");\n   * const source = element.files[0];\n   * const info = await db.installService(\"/hello\", source);\n   * ```\n   */\n  async installService(\n    mount: string,\n    source: Readable | Buffer | Blob | string,\n    options: InstallServiceOptions = {}\n  ): Promise<ServiceInfo> {\n    const { configuration, dependencies, ...qs } = options;\n    const req = await toForm({\n      configuration,\n      dependencies,\n      source,\n    });\n    return await this.request(\n      {\n        ...req,\n        method: \"POST\",\n        path: \"/_api/foxx\",\n        isBinary: true,\n        qs: { ...qs, mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Replaces an existing service with a new service by completely removing the\n   * old service and installing a new service at the same mount point.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param source - The service bundle to install.\n   * @param options - Options for replacing the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a node.js file stream as source\n   * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n   * const info = await db.replaceService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a node.js Buffer as source\n   * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n   * const info = await db.replaceService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a File (Blob) from a browser file input\n   * const element = document.getElementById(\"my-file-input\");\n   * const source = element.files[0];\n   * const info = await db.replaceService(\"/hello\", source);\n   * ```\n   */\n  async replaceService(\n    mount: string,\n    source: Readable | Buffer | Blob | string,\n    options: ReplaceServiceOptions = {}\n  ): Promise<ServiceInfo> {\n    const { configuration, dependencies, ...qs } = options;\n    const req = await toForm({\n      configuration,\n      dependencies,\n      source,\n    });\n    return await this.request(\n      {\n        ...req,\n        method: \"PUT\",\n        path: \"/_api/foxx/service\",\n        isBinary: true,\n        qs: { ...qs, mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Replaces an existing service with a new service while retaining the old\n   * service's configuration and dependencies.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param source - The service bundle to install.\n   * @param options - Options for upgrading the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a node.js file stream as source\n   * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n   * const info = await db.upgradeService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a node.js Buffer as source\n   * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n   * const info = await db.upgradeService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a File (Blob) from a browser file input\n   * const element = document.getElementById(\"my-file-input\");\n   * const source = element.files[0];\n   * const info = await db.upgradeService(\"/hello\", source);\n   * ```\n   */\n  async upgradeService(\n    mount: string,\n    source: Readable | Buffer | Blob | string,\n    options: UpgradeServiceOptions = {}\n  ): Promise<ServiceInfo> {\n    const { configuration, dependencies, ...qs } = options;\n    const req = await toForm({\n      configuration,\n      dependencies,\n      source,\n    });\n    return await this.request(\n      {\n        ...req,\n        method: \"PATCH\",\n        path: \"/_api/foxx/service\",\n        isBinary: true,\n        qs: { ...qs, mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Completely removes a service from the database.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for uninstalling the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.uninstallService(\"/my-foxx\");\n   * ```\n   */\n  uninstallService(\n    mount: string,\n    options?: UninstallServiceOptions\n  ): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        path: \"/_api/foxx/service\",\n        qs: { ...options, mount },\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Retrieves information about a mounted service.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.getService(\"/my-service\");\n   * // info contains detailed information about the service\n   * ```\n   */\n  getService(mount: string): Promise<ServiceInfo> {\n    return this.request(\n      {\n        path: \"/_api/foxx/service\",\n        qs: { mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Retrieves information about the service's configuration options and their\n   * current values.\n   *\n   * See also {@link Database.replaceServiceConfiguration} and\n   * {@link Database.updateServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value. Otherwise it will include the full\n   * definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = await db.getServiceConfiguration(\"/my-service\");\n   * for (const [key, option] of Object.entries(config)) {\n   *   console.log(`${option.title} (${key}): ${option.current}`);\n   * }\n   * ```\n   */\n  async getServiceConfiguration(\n    mount: string,\n    minimal?: false\n  ): Promise<Dict<ServiceConfiguration>>;\n  /**\n   * Retrieves information about the service's configuration options and their\n   * current values.\n   *\n   * See also {@link Database.replaceServiceConfiguration} and\n   * {@link Database.updateServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value. Otherwise it will include the full\n   * definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = await db.getServiceConfiguration(\"/my-service\", true);\n   * for (const [key, value] of Object.entries(config)) {\n   *   console.log(`${key}: ${value}`);\n   * }\n   * ```\n   */\n  async getServiceConfiguration(\n    mount: string,\n    minimal: true\n  ): Promise<Dict<any>>;\n  async getServiceConfiguration(mount: string, minimal: boolean = false) {\n    const result = await this.request(\n      {\n        path: \"/_api/foxx/configuration\",\n        qs: { mount, minimal },\n      },\n      (res) => res.body\n    );\n    if (\n      !minimal ||\n      !Object.keys(result).every((key: string) => result[key].title)\n    ) {\n      return result;\n    }\n    const values: any = {};\n    for (const key of Object.keys(result)) {\n      values[key] = result[key].current;\n    }\n    return values;\n  }\n\n  /**\n   * Replaces the configuration of the given service, discarding any existing\n   * values for options not specified.\n   *\n   * See also {@link Database.updateServiceConfiguration} and\n   * {@link Database.getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * configuration definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.replaceServiceConfiguration(\"/my-service\", config);\n   * for (const [key, option] of Object.entries(info)) {\n   *   console.log(`${option.title} (${key}): ${option.value}`);\n   *   if (option.warning) console.warn(`Warning: ${option.warning}`);\n   * }\n   * ```\n   */\n  async replaceServiceConfiguration(\n    mount: string,\n    cfg: Dict<any>,\n    minimal?: false\n  ): Promise<Dict<ServiceConfiguration & { warning?: string }>>;\n  /**\n   * Replaces the configuration of the given service, discarding any existing\n   * values for options not specified.\n   *\n   * See also {@link Database.updateServiceConfiguration} and\n   * {@link Database.getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * configuration definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.replaceServiceConfiguration(\"/my-service\", config);\n   * for (const [key, value] of Object.entries(info.values)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  async replaceServiceConfiguration(\n    mount: string,\n    cfg: Dict<any>,\n    minimal: true\n  ): Promise<{\n    values: Dict<any>;\n    warnings: Dict<string | undefined>;\n  }>;\n  async replaceServiceConfiguration(\n    mount: string,\n    cfg: Dict<any>,\n    minimal: boolean = false\n  ) {\n    const result = await this.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/foxx/configuration\",\n        body: cfg,\n        qs: { mount, minimal },\n      },\n      (res) => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    const result2 = (await this.getServiceConfiguration(mount, false)) as Dict<\n      ServiceConfiguration & { warning?: string }\n    >;\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  /**\n   * Updates the configuration of the given service while maintaining any\n   * existing values for options not specified.\n   *\n   * See also {@link Database.replaceServiceConfiguration} and\n   * {@link Database.getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * configuration definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.updateServiceConfiguration(\"/my-service\", config);\n   * for (const [key, option] of Object.entries(info)) {\n   *   console.log(`${option.title} (${key}): ${option.value}`);\n   *   if (option.warning) console.warn(`Warning: ${option.warning}`);\n   * }\n   * ```\n   */\n  async updateServiceConfiguration(\n    mount: string,\n    cfg: Dict<any>,\n    minimal?: false\n  ): Promise<Dict<ServiceConfiguration & { warning?: string }>>;\n  /**\n   * Updates the configuration of the given service while maintaining any\n   * existing values for options not specified.\n   *\n   * See also {@link Database.replaceServiceConfiguration} and\n   * {@link Database.getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * configuration definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.updateServiceConfiguration(\"/my-service\", config);\n   * for (const [key, value] of Object.entries(info.values)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  async updateServiceConfiguration(\n    mount: string,\n    cfg: Dict<any>,\n    minimal: true\n  ): Promise<{\n    values: Dict<any>;\n    warnings: Dict<string | undefined>;\n  }>;\n  async updateServiceConfiguration(\n    mount: string,\n    cfg: Dict<any>,\n    minimal: boolean = false\n  ) {\n    const result = await this.request(\n      {\n        method: \"PATCH\",\n        path: \"/_api/foxx/configuration\",\n        body: cfg,\n        qs: { mount, minimal },\n      },\n      (res) => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    const result2 = (await this.getServiceConfiguration(mount, false)) as Dict<\n      ServiceConfiguration & { warning?: string }\n    >;\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  /**\n   * Retrieves information about the service's dependencies and their current\n   * mount points.\n   *\n   * See also {@link Database.replaceServiceDependencies} and\n   * {@link Database.updateServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = await db.getServiceDependencies(\"/my-service\");\n   * for (const [key, dep] of Object.entries(deps)) {\n   *   console.log(`${dep.title} (${key}): ${dep.current}`);\n   * }\n   * ```\n   */\n  async getServiceDependencies(\n    mount: string,\n    minimal?: false\n  ): Promise<Dict<SingleServiceDependency | MultiServiceDependency>>;\n  /**\n   * Retrieves information about the service's dependencies and their current\n   * mount points.\n   *\n   * See also {@link Database.replaceServiceDependencies} and\n   * {@link Database.updateServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = await db.getServiceDependencies(\"/my-service\", true);\n   * for (const [key, value] of Object.entries(deps)) {\n   *   console.log(`${key}: ${value}`);\n   * }\n   * ```\n   */\n  async getServiceDependencies(\n    mount: string,\n    minimal: true\n  ): Promise<Dict<string | string[] | undefined>>;\n  async getServiceDependencies(mount: string, minimal: boolean = false) {\n    const result = await this.request(\n      {\n        path: \"/_api/foxx/dependencies\",\n        qs: { mount, minimal },\n      },\n      (res) => res.body\n    );\n    if (\n      !minimal ||\n      !Object.keys(result).every((key: string) => result[key].title)\n    )\n      return result;\n    const values: any = {};\n    for (const key of Object.keys(result)) {\n      values[key] = result[key].current;\n    }\n    return values;\n  }\n\n  /**\n   * Replaces the dependencies of the given service, discarding any existing\n   * mount points for dependencies not specified.\n   *\n   * See also {@link Database.updateServiceDependencies} and\n   * {@link Database.getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * dependency definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.replaceServiceDependencies(\"/my-service\", deps);\n   * for (const [key, dep] of Object.entries(info)) {\n   *   console.log(`${dep.title} (${key}): ${dep.current}`);\n   *   if (dep.warning) console.warn(`Warning: ${dep.warning}`);\n   * }\n   * ```\n   */\n  async replaceServiceDependencies(\n    mount: string,\n    deps: Dict<string>,\n    minimal?: false\n  ): Promise<\n    Dict<\n      (SingleServiceDependency | MultiServiceDependency) & { warning?: string }\n    >\n  >;\n  /**\n   * Replaces the dependencies of the given service, discarding any existing\n   * mount points for dependencies not specified.\n   *\n   * See also {@link Database.updateServiceDependencies} and\n   * {@link Database.getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * dependency definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.replaceServiceDependencies(\n   *   \"/my-service\",\n   *   deps,\n   *   true\n   * );\n   * for (const [key, value] of Object.entries(info)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  async replaceServiceDependencies(\n    mount: string,\n    deps: Dict<string>,\n    minimal: true\n  ): Promise<{\n    values: Dict<string>;\n    warnings: Dict<string | undefined>;\n  }>;\n  async replaceServiceDependencies(\n    mount: string,\n    deps: Dict<string>,\n    minimal: boolean = false\n  ) {\n    const result = await this.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/foxx/dependencies\",\n        body: deps,\n        qs: { mount, minimal },\n      },\n      (res) => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    // Work around \"minimal\" flag not existing in 3.3\n    const result2 = (await this.getServiceDependencies(mount, false)) as Dict<\n      (SingleServiceDependency | MultiServiceDependency) & { warning?: string }\n    >;\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        (result2[key] as any).warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  /**\n   * Updates the dependencies of the given service while maintaining any\n   * existing mount points for dependencies not specified.\n   *\n   * See also {@link Database.replaceServiceDependencies} and\n   * {@link Database.getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * dependency definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.updateServiceDependencies(\"/my-service\", deps);\n   * for (const [key, dep] of Object.entries(info)) {\n   *   console.log(`${dep.title} (${key}): ${dep.current}`);\n   *   if (dep.warning) console.warn(`Warning: ${dep.warning}`);\n   * }\n   * ```\n   */\n  async updateServiceDependencies(\n    mount: string,\n    deps: Dict<string>,\n    minimal?: false\n  ): Promise<\n    Dict<\n      (SingleServiceDependency | MultiServiceDependency) & { warning?: string }\n    >\n  >;\n  /**\n   * Updates the dependencies of the given service while maintaining any\n   * existing mount points for dependencies not specified.\n   *\n   * See also {@link Database.replaceServiceDependencies} and\n   * {@link Database.getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * **Note**: When using ArangoDB 3.2.8 or older, setting the `minimal` option\n   * to `true` avoids triggering a second request to fetch the full\n   * dependency definitions.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.updateServiceDependencies(\n   *   \"/my-service\",\n   *   deps,\n   *   true\n   * );\n   * for (const [key, value] of Object.entries(info)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  async updateServiceDependencies(\n    mount: string,\n    deps: Dict<string>,\n    minimal: true\n  ): Promise<{\n    values: Dict<string>;\n    warnings: Dict<string | undefined>;\n  }>;\n  async updateServiceDependencies(\n    mount: string,\n    deps: Dict<string>,\n    minimal: boolean = false\n  ) {\n    const result = await this.request(\n      {\n        method: \"PATCH\",\n        path: \"/_api/foxx/dependencies\",\n        body: deps,\n        qs: { mount, minimal },\n      },\n      (res) => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    // Work around \"minimal\" flag not existing in 3.3\n    const result2 = (await this.getServiceDependencies(mount, false)) as Dict<\n      (SingleServiceDependency | MultiServiceDependency) & { warning?: string }\n    >;\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  /**\n   * Enables or disables development mode for the given service.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param enabled - Whether development mode should be enabled or disabled.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setServiceDevelopmentMode(\"/my-service\", true);\n   * // the service is now in development mode\n   * await db.setServiceDevelopmentMode(\"/my-service\", false);\n   * // the service is now in production mode\n   * ```\n   */\n  setServiceDevelopmentMode(\n    mount: string,\n    enabled: boolean = true\n  ): Promise<ServiceInfo> {\n    return this.request(\n      {\n        method: enabled ? \"POST\" : \"DELETE\",\n        path: \"/_api/foxx/development\",\n        qs: { mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Retrieves a list of scripts defined in the service manifest's \"scripts\"\n   * section mapped to their human readable representations.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const scripts = await db.listServiceScripts(\"/my-service\");\n   * for (const [name, title] of Object.entries(scripts)) {\n   *   console.log(`${name}: ${title}`);\n   * }\n   * ```\n   */\n  listServiceScripts(mount: string): Promise<Dict<string>> {\n    return this.request(\n      {\n        path: \"/_api/foxx/scripts\",\n        qs: { mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Executes a service script and retrieves its result exposed as\n   * `module.exports` (if any).\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param name - Name of the service script to execute as defined in the\n   * service manifest.\n   * @param params - Arbitrary value that will be exposed to the script as\n   * `argv[0]` in the service context (e.g. `module.context.argv[0]`).\n   * Must be serializable to JSON.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.runServiceScript(\n   *   \"/my-service\",\n   *   \"create-user\",\n   *   {\n   *     username: \"service_admin\",\n   *     password: \"hunter2\"\n   *   }\n   * );\n   * ```\n   */\n  runServiceScript(mount: string, name: string, params?: any): Promise<any> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: `/_api/foxx/scripts/${encodeURIComponent(name)}`,\n        body: params,\n        qs: { mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"default\" reporter.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const testReport = await db.runServiceTests(\"/my-foxx\");\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options?: {\n      reporter?: \"default\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. Has no effect when\n       * using the \"default\" or \"suite\" reporters.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<ServiceTestDefaultReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"suite\" reporter, which groups the test result by test suite.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const suiteReport = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"suite\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"suite\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. Has no effect when\n       * using the \"default\" or \"suite\" reporters.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<ServiceTestSuiteReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"stream\" reporter, which represents the results as a sequence of tuples\n   * representing events.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const streamEvents = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"stream\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"stream\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `true`,\n       * the results will be returned as a formatted string.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<ServiceTestStreamReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"tap\" reporter, which represents the results as an array of strings using\n   * the \"tap\" format.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const tapLines = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"tap\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"tap\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `true`,\n       * the results will be returned as a formatted string.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<ServiceTestTapReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"xunit\" reporter, which represents the results as an XML document using\n   * the JSONML exchange format.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const jsonML = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"xunit\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"xunit\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `true`,\n       * the results will be returned as a formatted string.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<ServiceTestXunitReport>;\n  /**\n   * Runs the tests of a given service and returns the results as a string\n   * using the \"stream\" reporter in \"idiomatic\" mode, which represents the\n   * results as a line-delimited JSON stream of tuples representing events.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const streamReport = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"stream\", idiomatic: true }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"stream\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `false`,\n       * the results will be returned as an array of tuples instead of a\n       * string.\n       */\n      idiomatic: true;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<string>;\n  /**\n   * Runs the tests of a given service and returns the results as a string\n   * using the \"tap\" reporter in \"idiomatic\" mode, which represents the\n   * results using the \"tap\" format.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const tapReport = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"tap\", idiomatic: true }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"tap\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `false`,\n       * the results will be returned as an array of strings instead of a\n       * single string.\n       */\n      idiomatic: true;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<string>;\n  /**\n   * Runs the tests of a given service and returns the results as a string\n   * using the \"xunit\" reporter in \"idiomatic\" mode, which represents the\n   * results as an XML document.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const xml = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"xunit\", idiomatic: true }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"xunit\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `false`,\n       * the results will be returned using the JSONML exchange format\n       * instead of a string.\n       */\n      idiomatic: true;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<string>;\n  runServiceTests(\n    mount: string,\n    options?: {\n      reporter?: string;\n      idiomatic?: boolean;\n      filter?: string;\n    }\n  ) {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/tests\",\n        qs: {\n          ...options,\n          mount,\n        },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Retrieves the text content of the service's `README` or `README.md` file.\n   *\n   * Returns `undefined` if no such file could be found.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const readme = await db.getServiceReadme(\"/my-service\");\n   * if (readme !== undefined) console.log(readme);\n   * else console.warn(`No README found.`)\n   * ```\n   */\n  getServiceReadme(mount: string): Promise<string | undefined> {\n    return this.request(\n      {\n        path: \"/_api/foxx/readme\",\n        qs: { mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Retrieves an Open API compatible Swagger API description object for the\n   * service installed at the given mount point.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const spec = await db.getServiceDocumentation(\"/my-service\");\n   * // spec is a Swagger API description of the service\n   * ```\n   */\n  getServiceDocumentation(mount: string): Promise<SwaggerJson> {\n    return this.request(\n      {\n        path: \"/_api/foxx/swagger\",\n        qs: { mount },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Retrieves a zip bundle containing the service files.\n   *\n   * Returns a `Buffer` in node.js or `Blob` in the browser.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const serviceBundle = await db.downloadService(\"/my-foxx\");\n   * ```\n   */\n  downloadService(mount: string): Promise<Buffer | Blob> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/download\",\n        qs: { mount },\n        expectBinary: true,\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Writes all locally available services to the database and updates any\n   * service bundles missing in the database.\n   *\n   * @param replace - If set to `true`, outdated services will also be\n   * committed. This can be used to solve some consistency problems when\n   * service bundles are missing in the database or were deleted manually.\n   *\n   * @example\n   * ```js\n   * await db.commitLocalServiceState();\n   * // all services available on the coordinator have been written to the db\n   * ```\n   *\n   * @example\n   * ```js\n   * await db.commitLocalServiceState(true);\n   * // all service conflicts have been resolved in favor of this coordinator\n   * ```\n   */\n  commitLocalServiceState(replace: boolean = false): Promise<void> {\n    return this.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/commit\",\n        qs: { replace },\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n}\n"],"sourceRoot":""}